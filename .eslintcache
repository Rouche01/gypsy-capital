[{"/home/tga/Desktop/gypsy-capital/src/reportWebVitals.js":"1","/home/tga/Desktop/gypsy-capital/src/App.js":"2","/home/tga/Desktop/gypsy-capital/src/context/AuthContext.js":"3","/home/tga/Desktop/gypsy-capital/src/context/createDataContext.js":"4","/home/tga/Desktop/gypsy-capital/src/api/gypsy-web.js":"5","/home/tga/Desktop/gypsy-capital/src/pages/Profile/Profile.jsx":"6","/home/tga/Desktop/gypsy-capital/src/pages/OtpVerify/OtpVerify.jsx":"7","/home/tga/Desktop/gypsy-capital/src/pages/ConsumerCredit/ConsumerCredit.jsx":"8","/home/tga/Desktop/gypsy-capital/src/pages/AgentOverview/AgentOverview.jsx":"9","/home/tga/Desktop/gypsy-capital/src/pages/AboutUs/AboutUs.jsx":"10","/home/tga/Desktop/gypsy-capital/src/pages/Support/Support.jsx":"11","/home/tga/Desktop/gypsy-capital/src/pages/ClientDetails/ClientDetails.jsx":"12","/home/tga/Desktop/gypsy-capital/src/hooks/usePagination.js":"13","/home/tga/Desktop/gypsy-capital/src/components/InputField/InputField.js":"14","/home/tga/Desktop/gypsy-capital/src/components/Dashboard/Dashboard.jsx":"15","/home/tga/Desktop/gypsy-capital/src/components/ProfileView/ProfileView.jsx":"16","/home/tga/Desktop/gypsy-capital/src/components/NavTabs/NavTabs.jsx":"17","/home/tga/Desktop/gypsy-capital/src/utils/nigeriaStates.js":"18","/home/tga/Desktop/gypsy-capital/src/components/EmployerInfoForm/EmployerInfoForm.jsx":"19","/home/tga/Desktop/gypsy-capital/src/components/AccountSetupModal/AccountSetupModal.jsx":"20","/home/tga/Desktop/gypsy-capital/src/context/LoanContext.js":"21","/home/tga/Desktop/gypsy-capital/src/components/LoanContactForm/LoanContactForm.jsx":"22","/home/tga/Desktop/gypsy-capital/src/components/LoanCalculatorForm/LoanCalculatorForm.jsx":"23","/home/tga/Desktop/gypsy-capital/src/components/LoanModal/LoanModal.jsx":"24","/home/tga/Desktop/gypsy-capital/src/components/BankInfoForm/BankInfoForm.jsx":"25","/home/tga/Desktop/gypsy-capital/src/routes/sidebarRoutes.js":"26","/home/tga/Desktop/gypsy-capital/src/routes/pageUrl.js":"27","/home/tga/Desktop/gypsy-capital/src/pages/ProcessorLoans/ProcessorLoans.jsx":"28","/home/tga/Desktop/gypsy-capital/src/pages/ProcessorClients/ProcessorClients.jsx":"29","/home/tga/Desktop/gypsy-capital/src/pages/ProcessorDashboard/ProcessorDashboard.jsx":"30","/home/tga/Desktop/gypsy-capital/src/index.js":"31","/home/tga/Desktop/gypsy-capital/src/routes/protectedroute/ProtectedRoute.js":"32","/home/tga/Desktop/gypsy-capital/src/utils/history.js":"33","/home/tga/Desktop/gypsy-capital/src/context/createPersistDataContext.js":"34","/home/tga/Desktop/gypsy-capital/src/pages/Overview/Overview.jsx":"35","/home/tga/Desktop/gypsy-capital/src/pages/ContactPage/ContactPage.jsx":"36","/home/tga/Desktop/gypsy-capital/src/pages/Faqs/Faqs.jsx":"37","/home/tga/Desktop/gypsy-capital/src/pages/LoanDetail/LoanDetail.jsx":"38","/home/tga/Desktop/gypsy-capital/src/pages/ClientListPage/ClientListPage.jsx":"39","/home/tga/Desktop/gypsy-capital/src/components/ProgressBar/ProgressBar.jsx":"40","/home/tga/Desktop/gypsy-capital/src/components/BvnForm/BvnForm.jsx":"41","/home/tga/Desktop/gypsy-capital/src/components/StatBox/StatBox.jsx":"42"},{"size":362,"mtime":1611009045300,"results":"43","hashOfConfig":"44"},{"size":3182,"mtime":1613661102388,"results":"45","hashOfConfig":"44"},{"size":5804,"mtime":1612764452830,"results":"46","hashOfConfig":"44"},{"size":533,"mtime":1612421501467,"results":"47","hashOfConfig":"44"},{"size":147,"mtime":1612318782772,"results":"48","hashOfConfig":"44"},{"size":5189,"mtime":1613050311835,"results":"49","hashOfConfig":"44"},{"size":2391,"mtime":1612574568451,"results":"50","hashOfConfig":"44"},{"size":6719,"mtime":1613647145698,"results":"51","hashOfConfig":"44"},{"size":3116,"mtime":1613662243423,"results":"52","hashOfConfig":"44"},{"size":6259,"mtime":1612758512034,"results":"53","hashOfConfig":"44"},{"size":156,"mtime":1613199246806,"results":"54","hashOfConfig":"44"},{"size":9850,"mtime":1613641026798,"results":"55","hashOfConfig":"44"},{"size":1253,"mtime":1613397508401,"results":"56","hashOfConfig":"44"},{"size":2389,"mtime":1612921206368,"results":"57","hashOfConfig":"44"},{"size":3540,"mtime":1613205462740,"results":"58","hashOfConfig":"44"},{"size":7010,"mtime":1612714255563,"results":"59","hashOfConfig":"44"},{"size":504,"mtime":1613386895718,"results":"60","hashOfConfig":"44"},{"size":6576,"mtime":1613018961113,"results":"61","hashOfConfig":"44"},{"size":9528,"mtime":1613646535414,"results":"62","hashOfConfig":"44"},{"size":18951,"mtime":1613457270839,"results":"63","hashOfConfig":"44"},{"size":5548,"mtime":1613647064340,"results":"64","hashOfConfig":"44"},{"size":5933,"mtime":1613644183256,"results":"65","hashOfConfig":"44"},{"size":7458,"mtime":1613642079250,"results":"66","hashOfConfig":"44"},{"size":3729,"mtime":1613647530332,"results":"67","hashOfConfig":"44"},{"size":5437,"mtime":1613647373524,"results":"68","hashOfConfig":"44"},{"size":2154,"mtime":1613661255554,"results":"69","hashOfConfig":"44"},{"size":1709,"mtime":1613660740475,"results":"70","hashOfConfig":"44"},{"size":478,"mtime":1613661295795,"results":"71","hashOfConfig":"44"},{"size":2912,"mtime":1613664452829,"results":"72","hashOfConfig":"44"},{"size":3746,"mtime":1613663780278,"results":"73","hashOfConfig":"44"},{"size":548,"mtime":1612763106807,"results":"74","hashOfConfig":"44"},{"size":601,"mtime":1613641026802,"results":"75","hashOfConfig":"44"},{"size":84,"mtime":1612764469627,"results":"76","hashOfConfig":"44"},{"size":821,"mtime":1612688150601,"results":"77","hashOfConfig":"44"},{"size":4634,"mtime":1613050027352,"results":"78","hashOfConfig":"44"},{"size":4507,"mtime":1612758575858,"results":"79","hashOfConfig":"44"},{"size":737,"mtime":1613020227334,"results":"80","hashOfConfig":"44"},{"size":4731,"mtime":1613387224280,"results":"81","hashOfConfig":"44"},{"size":3435,"mtime":1613414410160,"results":"82","hashOfConfig":"44"},{"size":1565,"mtime":1611429643367,"results":"83","hashOfConfig":"44"},{"size":1331,"mtime":1612592363525,"results":"84","hashOfConfig":"44"},{"size":359,"mtime":1613662172186,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"t9s37o",{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"104"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"104"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"104"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"104"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"104"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"104"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/tga/Desktop/gypsy-capital/src/reportWebVitals.js",[],"/home/tga/Desktop/gypsy-capital/src/App.js",[],"/home/tga/Desktop/gypsy-capital/src/context/AuthContext.js",[],"/home/tga/Desktop/gypsy-capital/src/context/createDataContext.js",["178"],"/home/tga/Desktop/gypsy-capital/src/api/gypsy-web.js",[],"/home/tga/Desktop/gypsy-capital/src/pages/Profile/Profile.jsx",["179","180","181","182","183","184"],"/home/tga/Desktop/gypsy-capital/src/pages/OtpVerify/OtpVerify.jsx",["185"],"/home/tga/Desktop/gypsy-capital/src/pages/ConsumerCredit/ConsumerCredit.jsx",["186","187","188","189","190","191"],"/home/tga/Desktop/gypsy-capital/src/pages/AgentOverview/AgentOverview.jsx",[],["192","193"],"/home/tga/Desktop/gypsy-capital/src/pages/AboutUs/AboutUs.jsx",["194","195","196","197"],"/home/tga/Desktop/gypsy-capital/src/pages/Support/Support.jsx",["198"],"import React from 'react';\nimport styles from './Support.module.scss';\n\n\nconst Support = () => {\n  return (\n    <>\n\n    </>\n  )\n}\n\n\nexport default Support;\n","/home/tga/Desktop/gypsy-capital/src/pages/ClientDetails/ClientDetails.jsx",["199","200","201","202","203","204","205","206"],"/home/tga/Desktop/gypsy-capital/src/hooks/usePagination.js",["207","208"],"import React, { useMemo } from 'react';\nimport { Pagination } from 'react-bootstrap';\n\n\nexport default (currentPage, postsPerPage, list, setPage, cssStyles) => {\n  const indexOfLastItem = useMemo(() => {\n    return currentPage * postsPerPage\n  }, [currentPage, postsPerPage]);\n\n  const indexOfFirstItem = useMemo(() => {\n    return indexOfLastItem - postsPerPage\n  }, [indexOfLastItem, postsPerPage]);\n\n  const currentList = useMemo(() => {\n    return list.slice(indexOfFirstItem, indexOfLastItem);\n  }, [indexOfFirstItem, indexOfLastItem]);\n\n  const goToPage = (event) => {\n    if(event.target.text) {\n      setPage(Number(event.target.text));\n    }\n  }\n\n  let items = [];\n\n  for (let i=1; i <= Math.ceil(list.length / postsPerPage); i++) {\n    items.push(\n      <Pagination.Item \n        className={cssStyles.active} \n        onClick={goToPage} \n        key={i} \n        active={i === currentPage}\n      >\n        {i}\n      </Pagination.Item>\n    )\n  }\n\n  const goToPrevPage = () => {\n    if(currentPage > 1) {\n      setPage(currentPage - 1);\n    }\n  }\n\n  const goToNextPage = () => {\n    if(currentPage < Math.ceil(list.length / postsPerPage)) {\n      setPage(currentPage + 1);\n    }\n  }\n\n  return { currentList, items, goToNextPage, goToPrevPage }\n}","/home/tga/Desktop/gypsy-capital/src/components/InputField/InputField.js",[],"/home/tga/Desktop/gypsy-capital/src/components/Dashboard/Dashboard.jsx",["209"],"import React, { useContext, useState } from 'react';\nimport styles from './Dashboard.module.scss';\nimport { Row, Col } from 'react-bootstrap';\nimport Logo from '../../assets/logo-white.png';\nimport Button from '../../components/Button/Button';\nimport { FaSearch } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\nimport { MdNotificationsNone } from 'react-icons/md';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport placeholderAvatar from '../../assets/placeholder.png';\n\n\nconst Dashboard = ({ children, sidebarRoutes, location }) => {\n\n  console.log(location)\n\n  const { logout } = useContext(AuthContext);\n  const signout = () => {\n    logout();\n  }\n\n  const role = \"sales\";\n\n  const [searchTerm, setSearchTerm] = useState('');\n\n  return(\n    <div className={styles.container}>\n      <Row className={styles.header}>\n        <Col className={styles.logoGrid} sm={3}>\n          <img src={Logo} alt=\"Gypsy Logo\" width={150} />\n        </Col>\n        <Col className={styles.altNavGrid} sm={9}>\n          { role && role === \"client\" ? \n          <>\n            <MdNotificationsNone size=\"2em\" className=\"mr-5\" color=\"#741763\" />\n            <Button clicked={signout} size=\"sm\" bgColor=\"#A0208931\" color=\"#212121\">Log out</Button>\n          </> : null\n          }\n          {\n            role && role === \"sales\" ?\n            <>\n              <div className={styles.searchBar}>\n                <FaSearch className={styles.searchIcon} />\n                <input \n                  type=\"text\"\n                  name=\"searchTerm\"\n                  placeholder=\"Search for customer by  name, number or BVN\"\n                  className={styles.searchTerm}\n                  value={searchTerm}\n                  onChange={(e) => {\n                    setSearchTerm(e.currentTarget.value)\n                  }}\n                />\n              </div>\n              <div className={styles.profileGroup}>\n                <MdNotificationsNone style={{ display: \"block\" }} size=\"2em\" className=\"mr-5\" color=\"#741763\" />\n                <div className={styles.profileAvi}>\n                  <img src={placeholderAvatar} alt=\"Profile Picture\" />\n                  <div className={styles.userInfo}>\n                    <p>Moses Emmanuel</p>\n                    <p>Sales agent</p>\n                  </div>\n                </div>\n              </div>\n            </> : null\n          }\n        </Col>\n      </Row>\n      <Row>\n        <Col className={styles.menuPanel} sm={3}>\n          <div className={styles.menuList}>\n            <ul>\n              { sidebarRoutes.map(route => {\n                if(location.pathname.includes(route.rootLink)) {\n                  return (\n                    <li className={[styles.activeMenu, \"mb-4\"].join(' ')}>\n                      <route.icon size=\"1.3em\" color=\"#741763\" />\n                      <Link className={styles.activeLink} to={route.link}>{route.label}</Link>\n                    </li>\n                  )\n                } else {\n                  return (\n                    <li className=\"mb-4\">\n                      <route.icon size=\"1.3em\" color=\"#fff\" />\n                      <Link to={route.link}>{route.label}</Link>\n                    </li>\n                  )\n                }\n              })}\n            </ul>\n          </div>\n        </Col>\n        <Col sm={9} className={styles.mainPanel}>\n          <div className={styles.mainContent}>\n            {children}\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\n\nexport default Dashboard;","/home/tga/Desktop/gypsy-capital/src/components/ProfileView/ProfileView.jsx",["210","211"],"import React, { useState, useContext, useRef, useEffect } from 'react';\nimport styles from './ProfileView.module.scss';\nimport { Row, Col } from 'react-bootstrap';\nimport InputField from '../InputField/InputField';\nimport Button from '../Button/Button';\nimport { BiCreditCard, BiPlus } from 'react-icons/bi';\nimport { RiBankFill } from 'react-icons/ri';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport { Context as UserContext } from '../../context/UserContext';\n\n\nconst ProfileView = () => {\n\n  const [visibleSection, setVisibleSection] = useState('personalInfo');\n  const [profileImg, setProfileImg] = useState(null);\n  const [visiblePaymentSection, setVisiblePaymentSection] = useState('card');\n\n  const [profileData, setProfileData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phoneNo: \"\",\n    bvn: \"\",\n    residence: \"\"\n  })\n\n  const profilePicRef = useRef();\n\n  const { state: { user } } = useContext(AuthContext);\n  const { \n    state: { userDetails },\n    getClientDetails, \n  } = useContext(UserContext);\n\n  useEffect(() => {\n    getClientDetails(user.user_id);\n  }, [])\n\n  useEffect(() => {\n    if(userDetails) {\n      // setProfileData({\n      //   firstName\n      // })\n      console.log(userDetails)\n      const { bioData, identity, residence } = userDetails;\n      setProfileData({\n        firstName: bioData.firstName,\n        lastName: bioData.lastName,\n        email: bioData.email,\n        phoneNo: bioData.phoneNumber.replace('234', '0'),\n        bvn: bioData.BVN,\n        residence: residence.street\n      })\n      setProfileImg(identity.profilePhoto)\n    }\n  }, [userDetails])\n\n  const goToProfileSection = (section) => {\n    console.log('works');\n    setVisibleSection(section);\n  }\n\n  return (\n    <div className={styles.profileBox}>\n      <div className={styles.header}>\n        <Row>\n          <Col \n            onClick={() => goToProfileSection('personalInfo')} \n            className={[styles.borderStyle, styles.tabCol].join(' ')}\n          >\n            <p \n              className={[styles.tabMenu, visibleSection === \"personalInfo\" && styles.activeTab1].join(' ')}\n            >\n              Personal Information\n            </p>\n          </Col>\n          <Col \n            onClick={() => goToProfileSection('security')} \n            className={[styles.borderStyle, styles.tabCol].join(' ')}\n          >\n            <p\n              className={[styles.tabMenu, visibleSection === \"security\" && styles.activeTab2].join(' ')}\n            >\n              Security\n            </p>\n          </Col>\n          <Col\n            onClick={() => goToProfileSection('payment')} \n            className={styles.tabCol}\n          >\n            <p\n              className={[styles.tabMenu, visibleSection === \"payment\" && styles.activeTab3].join(' ')}\n            >\n              Payment\n            </p>\n          </Col>\n        </Row>\n      </div>\n      <div className={styles.body}>\n        {visibleSection === \"personalInfo\" && <div>\n          <div className={styles.profilePictureSection}>\n            { profileImg && <img src={profileImg} alt=\"profile image\"/> }\n          </div>\n          <div className={styles.uploadBtn}>\n            <input type=\"file\" id=\"profilePic\" hidden ref={profilePicRef} />\n            <label  \n              htmlFor=\"profilePic\"\n            >\n              Change Profile Picture\n            </label>\n          </div>\n          <Row className=\"mb-4\">\n          <Col>\n            <InputField \n              label=\"First Name\"\n              type=\"text\"\n              nameAttr=\"firstName\"\n              value={profileData.firstName}\n            />\n          </Col> \n          <Col>\n            <InputField \n              label=\"Last Name\"\n              type=\"text\"\n              nameAttr=\"lastName\"\n              value={profileData.lastName}\n            />\n          </Col> \n          </Row> \n          <Row className=\"mb-4\">\n          <Col>\n            <InputField \n              label=\"Email\"\n              type=\"email\"\n              nameAttr=\"email\"\n              value={profileData.email}\n            />\n          </Col> \n          <Col>\n            <InputField \n              label=\"Phone Number\"\n              type=\"text\"\n              nameAttr=\"phoneNumber\"\n              value={profileData.phoneNo}\n            />\n          </Col> \n          </Row> \n          <Row>\n          <Col>\n            <InputField \n              label=\"BVN\"\n              type=\"text\"\n              nameAttr=\"bvn\"\n              value={profileData.bvn}\n            />\n          </Col> \n          <Col>\n            <InputField \n              label=\"Residential Address\"\n              type=\"text\"\n              nameAttr=\"address\"\n              value={profileData.residence}\n            />\n          </Col> \n          </Row> \n          <Button className=\"mt-5\" fullWidth  bgColor=\"#741763\" size=\"lg\" color=\"#EBEBEB\">\n            Edit Info\n          </Button>\n        </div>}\n        { visibleSection === \"security\" &&\n          <div className={styles.security}>\n            <h2>CHANGE PASSWORD</h2>\n            <Row className=\"mb-4\">\n              <Col>\n                <InputField \n                  type=\"password\"\n                  label=\"Current Password\"\n                  nameAttr=\"currPassword\"\n                />\n              </Col>\n            </Row>\n            <Row className=\"mb-4\">\n              <Col>\n                <InputField \n                  type=\"password\"\n                  label=\"Current Password\"\n                  nameAttr=\"currPassword\"\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <InputField \n                  type=\"password\"\n                  label=\"Current Password\"\n                  nameAttr=\"currPassword\"\n                />\n              </Col>\n            </Row>\n          </div>\n        }\n        { visibleSection === \"payment\" && \n          <div className={styles.payment}>\n            <div className={styles.btnGroup}>\n              <button \n                className={ visiblePaymentSection === 'card' && styles.activeMenu }\n                onClick={() => setVisiblePaymentSection('card')}\n              >\n                <BiCreditCard className={styles.icon} />\n                Card\n              </button>\n              <button\n                className={ visiblePaymentSection === 'bank' && styles.activeMenu }\n                onClick={() => setVisiblePaymentSection('bank')}\n              >\n                <RiBankFill className={styles.icon} />\n                Bank\n              </button>\n            </div>\n            <div className={styles.content}>\n              { visiblePaymentSection === \"card\" && <div className={styles.addCard}>\n                <div className={styles.cardInner}>\n                  <BiPlus size=\"2em\" />\n                  <p>Add Card</p>\n                </div>\n              </div> }\n            </div>\n          </div>\n        }\n      </div>\n    </div>\n  )\n}\n\n\nexport default ProfileView;","/home/tga/Desktop/gypsy-capital/src/components/NavTabs/NavTabs.jsx",[],"/home/tga/Desktop/gypsy-capital/src/utils/nigeriaStates.js",[],"/home/tga/Desktop/gypsy-capital/src/components/EmployerInfoForm/EmployerInfoForm.jsx",[],"/home/tga/Desktop/gypsy-capital/src/components/AccountSetupModal/AccountSetupModal.jsx",["212","213","214"],"import React, { useContext, useEffect, useMemo, useState, useRef } from 'react';\nimport styles from './AccountSetupModal.module.scss';\nimport { Modal, Row, Col } from 'react-bootstrap';\nimport InputField from '../../components/InputField/InputField';\nimport Button from '../../components/Button/Button';\nimport { validateInput } from '../../utils/validateInput';\nimport { nigeriaStates } from '../../utils/nigeriaStates';\nimport { Context as BankContext } from '../../context/BankCotext';\nimport FileUploadButton from '../FileUploadButton/FileUploadButton';\nimport { FaCloudUploadAlt } from 'react-icons/fa';\n\n\nexport const VerifyBvn = ({ submit }) => {\n\n  const [bvn, setBvn] = useState('');\n\n  const submitBvn = () => {\n    if(bvn) {\n      submit();\n    }\n  }\n\n  return (\n    <>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <h2 className={styles.headerText}>Verify BVN</h2>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div className={styles.body}>\n          <Row>\n            <Col>\n              <InputField \n                type=\"text\"\n                nameAttr=\"otp\"\n                label=\"Enter Client's BVN\"\n                value={bvn}\n                changed={(val) => {\n                  setBvn(val)\n                }}\n              />\n            </Col>\n          </Row>\n        </div>\n      </Modal.Body>\n      <Modal.Footer className={styles.body}>\n        <Button\n          fullWidth\n          bgColor=\"#741763\" \n          size=\"lg\" \n          clicked={submitBvn}\n          color=\"#EBEBEB\"\n        >\n          Verify\n        </Button>\n        <p className={styles.hint}>To get your BVN, Dial *565*0#</p>\n      </Modal.Footer>\n    </>\n  )\n}\n\n\nexport const PersonalInfo = ({ submit }) => {\n\n  const [biodata, setBiodata] = useState({\n    fullName: '',\n    dateOfBirth: '',\n    bvnPhoneNo: '',\n    email: '',\n    phoneNo: '',\n    altPhone: '',\n    gender: ''\n  });\n\n  const [biodataErrors, setBiodataErrors] = useState({\n    fullName: null,\n    dateOfBirth: null,\n    bvnPhoneNo: null,\n    email: null,\n    phoneNo: null,\n    altPhone: null,\n    gender: null\n  });\n\n\n  const addPersonalInfo = () => {\n    const validated = validateInput(biodata, setBiodataErrors);\n    if(validated) {\n      submit();\n    }\n  }\n\n  return (\n    <>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <h2 className={styles.headerText}>Personal Info</h2>\n        </Modal.Title>\n        {/* <p className={styles.subtitle}>Personal Info</p> */}\n      </Modal.Header>\n      <Modal.Body>\n        <div className={styles.body}>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                label=\"Full name\"\n                type=\"text\"\n                nameAttr=\"fullname\"\n                value={biodata.fullName}\n                changed={(val) => {\n                  setBiodataErrors({ ...biodataErrors, fullName: null })\n                  setBiodata({ ...biodata, fullName: val})\n                }}\n                error={biodataErrors.fullName && biodataErrors.fullName}\n              />\n            </Col>\n            <Col>\n              <InputField \n                label=\"Date of Birth\"\n                type=\"text\"\n                nameAttr=\"dob\"\n                value={biodata.dateOfBirth}\n                changed={(val) => {\n                  setBiodataErrors({ ...biodataErrors, dateOfBirth: null })\n                  setBiodata({ ...biodata, dateOfBirth: val})\n                }}\n                error={biodataErrors.dateOfBirth && biodataErrors.dateOfBirth}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                label=\"BVN-linked Phone Number\"\n                type=\"text\"\n                nameAttr=\"bvnPhoneNo\"\n                value={biodata.bvnPhoneNo}\n                changed={(val) => {\n                  setBiodataErrors({ ...biodataErrors, bvnPhoneNo: null })\n                  setBiodata({ ...biodata, bvnPhoneNo: val})\n                }}\n                error={biodataErrors.bvnPhoneNo && biodataErrors.bvnPhoneNo}\n              />\n            </Col>\n            <Col>\n              <InputField \n                label=\"Email\"\n                type=\"email\"\n                nameAttr=\"email\"\n                value={biodata.email}\n                changed={(val) => {\n                  setBiodataErrors({ ...biodataErrors, email: null })\n                  setBiodata({ ...biodata, email: val})\n                }}\n                error={biodataErrors.email && biodataErrors.email}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                label=\"Phone Number\"\n                type=\"text\"\n                nameAttr=\"PhoneNo\"\n                value={biodata.phoneNo}\n                changed={(val) => {\n                  setBiodataErrors({ ...biodataErrors, phoneNo: null })\n                  setBiodata({ ...biodata, phoneNo: val})\n                }}\n                error={biodataErrors.phoneNo && biodataErrors.phoneNo}\n              />\n            </Col>\n            <Col>\n              <InputField \n                label=\"Alternative Phone Number\"\n                type=\"text\"\n                nameAttr=\"altPhoneNo\"\n                value={biodata.altPhone}\n                changed={(val) => {\n                  setBiodataErrors({ ...biodataErrors, altPhone: null })\n                  setBiodata({ ...biodata, altPhone: val})\n                }}\n                error={biodataErrors.altPhone && biodataErrors.altPhone}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <InputField \n                label=\"Gender\"\n                type=\"select\"\n                options={['Female', 'Male', 'Other']}\n                nameAttr=\"gender\"\n                value={biodata.gender}\n                changed={(val) => {\n                  setBiodataErrors({ ...biodataErrors, gender: null })\n                  setBiodata({ ...biodata, gender: val})\n                }}\n                error={biodataErrors.gender && biodataErrors.gender}\n              />\n            </Col>\n          </Row>\n          <Modal.Footer>\n            <Button \n              className=\"mt-4\" \n              clicked={addPersonalInfo} \n              fullWidth \n              bgColor=\"#741763\" \n              size=\"lg\" \n              color=\"#EBEBEB\"\n            >\n              Save & Continue\n            </Button>\n          </Modal.Footer>\n        </div>\n      </Modal.Body>\n    </>\n  )\n}\n\n\nexport const Residence = ({ submit }) => {\n\n  const [residentialInfo, setResidentialInfo] = useState({\n    street: '',\n    city: '',\n    state: ''\n  });\n\n  const [residentialErrors, setResidentialErrors] = useState({\n    street: null,\n    city: null,\n    state: null\n  });\n\n  const addResidence = () => {\n    const validated = validateInput(residentialInfo, setResidentialErrors);\n    if(validated) {\n      submit();\n    }\n  }\n\n  return (\n    <>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <h2 className={styles.headerText}>Residential Address</h2>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div className={styles.body}>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                label=\"Street\"\n                type=\"text\"\n                nameAttr=\"residentStreet\"\n                value={residentialInfo.street}\n                changed={(val) => {\n                  setResidentialErrors({ ...residentialErrors, street: null })\n                  setResidentialInfo({ ...residentialInfo, street: val})\n                }}\n                error={residentialErrors.street && residentialErrors.street}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                label=\"City\"\n                type=\"text\"\n                nameAttr=\"city\"\n                value={residentialInfo.city}\n                changed={(val) => {\n                  setResidentialErrors({ ...residentialErrors, city: null })\n                  setResidentialInfo({ ...residentialInfo, city: val})\n                }}\n                error={residentialErrors.city && residentialErrors.city}\n              />\n            </Col>\n            <Col>\n              <InputField \n                label=\"State\"\n                type=\"select\"\n                options={nigeriaStates}\n                nameAttr=\"state\"\n                value={residentialInfo.state}\n                changed={(val) => {\n                  setResidentialErrors({ ...residentialErrors, state: null })\n                  setResidentialInfo({ ...residentialInfo, state: val})\n                }}\n                error={residentialErrors.state && residentialErrors.state}\n              />\n            </Col>\n          </Row>\n        </div>\n      </Modal.Body>\n      <Modal.Footer className={styles.body}>\n        <Button \n          className=\"mt-4\" \n          clicked={addResidence} \n          fullWidth \n          bgColor=\"#741763\" \n          size=\"lg\" \n          color=\"#EBEBEB\"\n        >\n          Save & Continue\n        </Button>\n      </Modal.Footer>\n    </>\n  )\n}\n\n\nexport const NextOfKin = ({ submit }) => {\n\n  const [kinInfo, setKinInfo] = useState({\n    fullName: '',\n    relationship: '',\n    email: '',\n    phoneNo: '',\n    address: ''\n  });\n\n  const [kinErrors, setKinErrors] = useState({\n    fullName: null,\n    relationship: null,\n    email: null,\n    phoneNo: null,\n    address: null\n  });\n\n  const addNextOfKin = () => {\n    const validated = validateInput(kinInfo, setKinErrors);\n    if(validated) {\n      submit();\n    }\n  }\n\n  return (\n    <>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <h2 className={styles.headerText}>Next of Kin Info</h2>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div className={styles.body}>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                label=\"Full name\"\n                type=\"text\"\n                nameAttr=\"kinFullname\"\n                value={kinInfo.fullName}\n                changed={(val) => {\n                  setKinErrors({ ...kinErrors, fullName: null })\n                  setKinInfo({ ...kinInfo, fullName: val})\n                }}\n                error={kinErrors.fullName && kinErrors.fullName}\n              />\n            </Col>\n            <Col>\n              <InputField \n                label=\"Relationship\"\n                type=\"text\"\n                nameAttr=\"kinRelationship\"\n                value={kinInfo.relationship}\n                changed={(val) => {\n                  setKinErrors({ ...kinErrors, relationship: null })\n                  setKinInfo({ ...kinInfo, relationship: val})\n                }}\n                error={kinErrors.relationship && kinErrors.relationship}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                label=\"Email Address\"\n                type=\"email\"\n                nameAttr=\"kinEmail\"\n                value={kinInfo.email}\n                changed={(val) => {\n                  setKinErrors({ ...kinErrors, email: null })\n                  setKinInfo({ ...kinInfo, email: val})\n                }}\n                error={kinErrors.email && kinErrors.email}\n              />\n            </Col>\n            <Col>\n              <InputField \n                label=\"Phone Number\"\n                type=\"text\"\n                nameAttr=\"kinPhone\"\n                value={kinInfo.phoneNo}\n                changed={(val) => {\n                  setKinErrors({ ...kinErrors, phoneNo: null })\n                  setKinInfo({ ...kinInfo, phoneNo: val})\n                }}\n                error={kinErrors.phoneNo && kinErrors.phoneNo}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                label=\"Residential Address\"\n                type=\"text\"\n                nameAttr=\"kinAddress\"\n                placeholder=\"Street address to the nearest bus stop\"\n                value={kinInfo.address}\n                changed={(val) => {\n                  setKinErrors({ ...kinErrors, address: null })\n                  setKinInfo({ ...kinInfo, address: val})\n                }}  \n                error={kinErrors.address && kinErrors.address}\n              />\n            </Col>\n          </Row>\n        </div>\n      </Modal.Body>\n      <Modal.Footer className={styles.body}>\n        <Button \n          className=\"mt-4\" \n          clicked={addNextOfKin} \n          fullWidth \n          bgColor=\"#741763\" \n          size=\"lg\" \n          color=\"#EBEBEB\"\n        >\n          Save & Continue\n        </Button>\n      </Modal.Footer>\n    </>\n  )\n}\n\nexport const BankInfo = ({ submit }) => {\n\n  const [bankInfo, setBankInfo] = useState({\n    bankName: '',\n    accountType: '',\n    accountNumber: '',\n    accountName: ''\n  });\n\n  const [bankInfoErrors, setBankInfoErrors] = useState({\n    bankName: null,\n    accountType: null,\n    accountNumber: null,\n    accountName: null\n  });\n\n  const { \n    state: { bankList, userBankDetails }, \n    getBankList,\n    verifyBankInfo\n  } = useContext(BankContext);\n\n  useEffect(() => {\n      getBankList();\n  }, []);\n\n  const bankNames = useMemo(() => {\n    return bankList ? \n      bankList.map((bank) => bank.name) :\n      []\n  }, [bankList]);\n\n  useEffect(() => {\n    if(bankInfo.accountNumber.length === 10 && bankInfo.bankName) {\n      const bank = bankList.find(bank => bank.name.toLowerCase() === bankInfo.bankName);\n      const bankCode = bank.code;\n      console.log(bankCode)\n      verifyBankInfo(bankInfo.accountNumber, bankCode)\n    }\n  }, [bankInfo.accountNumber, bankInfo.bankName])\n\n\n  useEffect(() => {\n    console.log(userBankDetails);\n    if(userBankDetails) {\n      setBankInfo({ ...bankInfo, accountName: userBankDetails.account_name })\n    }\n  }, [userBankDetails]);\n\n  const addBankInfo = () => {\n    const validated = validateInput(bankInfo, setBankInfoErrors);\n    if(validated) {\n      submit();\n    }\n  }\n\n  return(\n    <>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <h2 className={styles.headerText}>Bank Info</h2>\n          <p className={styles.subtitle}>Add a bank account where we can send investment proceeds or loan requests to.</p>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div className={styles.body}>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                type=\"select\"\n                label=\"Bank\"\n                options={bankNames}\n                nameAttr=\"bank\"\n                value={bankInfo.bankName}\n                changed={(val) => {\n                  setBankInfoErrors({ ...bankInfoErrors, bankName: null })\n                  setBankInfo({ ...bankInfo, bankName: val})\n                }}\n                error={bankInfoErrors.bankName && bankInfoErrors.bankName}\n              />\n            </Col>\n            <Col>\n              <InputField \n                label=\"Account Type\"\n                type=\"select\"\n                options={[\"Savings\", \"Current\"]}\n                nameAttr=\"acountType\"\n                value={bankInfo.accountType}\n                changed={(val) => {\n                  setBankInfoErrors({ ...bankInfoErrors, accountType: null })\n                  setBankInfo({ ...bankInfo, accountType: val})\n                }}\n                error={bankInfoErrors.accountType && bankInfoErrors.accountType}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                type=\"text\"\n                label=\"Account Number\"\n                nameAttr=\"accountNo\"\n                value={bankInfo.accountNumber}\n                changed={(val) => {\n                  setBankInfoErrors({ ...bankInfoErrors, accountNumber: null })\n                  setBankInfo({ ...bankInfo, accountNumber: val})\n                }}\n                error={bankInfoErrors.accountNumber && bankInfoErrors.accountNumber}\n              />\n            </Col>\n            <Col>\n              <InputField \n                label=\"Account Name\"\n                type=\"text\"\n                nameAttr=\"accountName\"\n                value={bankInfo.accountName}\n                changed={(val) => {\n                  setBankInfoErrors({ ...bankInfoErrors, accountName: null })\n                  setBankInfo({ ...bankInfo, accountName: val})\n                }}\n                error={bankInfoErrors.accountName && bankInfoErrors.accountName}\n              />\n            </Col>\n          </Row>\n        </div>\n      </Modal.Body>\n      <Modal.Footer className={styles.body}>\n        <Button \n          className=\"mt-4\" \n          clicked={addBankInfo} \n          fullWidth \n          bgColor=\"#741763\" \n          size=\"lg\" \n          color=\"#EBEBEB\"\n        >\n          Save & Continue\n        </Button>\n      </Modal.Footer>\n    </>\n  )\n}\n\nexport const IdentityForm = () => {\n\n  const idFileRef = useRef();\n  const passportFileRef= useRef();\n\n  const [idType, setIdType] = useState('');\n\n  return (\n    <>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <h2 className={styles.headerText}>Identity</h2>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div className={styles.body}>\n          <div className={styles.validId}>\n            <p className={styles.validID}>Upload a valid government issued Identification</p>\n            <InputField \n              type=\"select\"\n              options={['International Passport', \"Driver's License\", 'Voters Card', 'National Identity Card']}\n              nameAttr=\"identityType\"\n              value={idType}\n              changed={(val) => setIdType(val)}\n            />\n            <FileUploadButton \n              label=\"Choose File\" \n              icon={<FaCloudUploadAlt className=\"ml-3\" size=\"1.1em\" />}\n              id=\"id-upload\" \n              className=\"mt-3\"\n              fileRef={idFileRef}\n              fullwidth\n            />\n          </div>\n          <div className={styles.passportVerify}>\n            <p className={styles.passportImg}>Please upload a clear and resent passport photograph.</p>\n            <FileUploadButton \n              label=\"Choose File\" \n              icon={<FaCloudUploadAlt className=\"ml-3\" size=\"1.1em\" />}\n              id=\"passport-upload\"  \n              fileRef={passportFileRef}\n              fullwidth\n            />\n          </div>\n        </div>\n      </Modal.Body>\n      <Modal.Footer className={styles.body}>\n        <Button \n          className=\"mt-4\" \n          // clicked={addBankInfo} \n          fullWidth \n          bgColor=\"#741763\" \n          size=\"lg\" \n          color=\"#EBEBEB\"\n        >\n          Save & Continue\n        </Button>\n      </Modal.Footer>\n    </>\n  )\n}","/home/tga/Desktop/gypsy-capital/src/context/LoanContext.js",[],"/home/tga/Desktop/gypsy-capital/src/components/LoanContactForm/LoanContactForm.jsx",["215"],"/home/tga/Desktop/gypsy-capital/src/components/LoanCalculatorForm/LoanCalculatorForm.jsx",["216","217","218"],"import React, { useState, useEffect, useContext } from 'react';\nimport styles from './LoanCalculatorForm.module.scss';\nimport InputField from '../InputField/InputField';\nimport Button from '../Button/Button';\nimport { Row, Col } from 'react-bootstrap';\nimport { validateInput } from '../../utils/validateInput';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Context as LoanContext } from '../../context/LoanContext';\nimport { Context as AuthContext } from '../../context/AuthContext';\n\n\nconst LoanCalculatorForm = ({ delegateApply }) => {\n\n  const { state: { loading }, loanApply } = useContext(LoanContext);\n\n  const [daysOfMonth, setDaysOfMonth] = useState([]);\n  const [limitError, setLimitError] = useState(null);\n  const [loanCalcData, setLoanCalcData] = useState({\n    monthlySalary: \"\",\n    payDay: \"\",\n    loanAmount: \"\",\n    installmentPeriod: \"\",\n    loanPurpose: \"\",\n    estimatedMonthlyPayment: \"\"\n  });\n\n  const [loanCalcDataErrors, setLoanCalcDataErrors] = useState({\n    monthlySalary: null,\n    payDay: null,\n    loanAmount: null,\n    installmentPeriod: null,\n    loanPurpose: null\n  });\n\n  useEffect(() => {\n    setDaysOfMonth(fillUpDaysArray);\n  }, [])\n\n  const fillUpDaysArray = () => {\n    let daysArray = [];\n    for(let i=0; i < 31; i++) {\n      daysArray.push(i+1)\n    }\n    return daysArray;\n  }\n\n  const { monthlySalary, loanAmount, installmentPeriod, payDay, loanPurpose } = loanCalcData;\n\n  useEffect(() => {\n    if(monthlySalary && loanAmount && installmentPeriod) {\n      // console.log(typeof monthlySalary, typeof loanAmount, installmentPeriod);\n      const tenor = Number(installmentPeriod.split(' ')[0]);\n      let initRate = Number(loanAmount);\n      let toRepay = initRate + (initRate * 0.04);\n      toRepay = toRepay + (toRepay * 0.04 * tenor)\n      // for(let i=0; i < tenor; i++) {\n      //   toRepay = initRate + (initRate * 0.04);\n      //   initRate = toRepay;\n      // }\n      const monthlyRepay = toRepay / tenor;\n      console.log(monthlyRepay)\n      if(monthlyRepay > (0.333 * Number(monthlySalary))) {\n        setLimitError('You are not eligible for this amount, kindly enter a lower loan amount');\n      } else {\n        setLimitError(null)\n      }\n      setLoanCalcData({ ...loanCalcData, estimatedMonthlyPayment: Math.floor(monthlyRepay) })\n    }\n  }, [monthlySalary, loanAmount, installmentPeriod])\n\n  const submitLoanCalcData = () => {\n    console.log('works');\n    const fieldsTovalidate = { monthlySalary, payDay, loanAmount, installmentPeriod, loanPurpose }\n    const validated = validateInput(fieldsTovalidate, setLoanCalcDataErrors);\n    if(validated) {\n      const applyData = {\n        monthlySalary,\n        payDay,\n        amount: loanAmount,\n        paymentPeriod: installmentPeriod,\n        loanPurpose,\n        monthlyRepayment: loanCalcData.estimatedMonthlyPayment\n      }\n      console.log(applyData);\n      limitError ? toast.error(limitError) : delegateApply(applyData);\n    }\n  }\n\n  if(daysOfMonth.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={styles.calculatorForm}>\n      <ToastContainer position=\"top-center\" />\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            label=\"Monthly Salary\" \n            type=\"number\" \n            nameAttr=\"salary\"\n            value={loanCalcData.monthlySalary}\n            changed={(val) => {\n              setLoanCalcDataErrors({ ...loanCalcDataErrors, monthlySalary: null })\n              setLoanCalcData({ ...loanCalcData, monthlySalary: val })\n            }}\n            error={loanCalcDataErrors.monthlySalary && loanCalcDataErrors.monthlySalary}\n          />\n        </Col>\n        <Col>\n          <InputField \n            label=\"Pay Day\"\n            type=\"select\"\n            options={daysOfMonth}\n            nameAttr=\"payday\"\n            value={loanCalcData.payDay}\n            changed={(val) => {\n              setLoanCalcDataErrors({ ...loanCalcDataErrors, payDay: null })\n              setLoanCalcData({ ...loanCalcData, payDay: val })\n            }}\n            error={loanCalcDataErrors.payDay && loanCalcDataErrors.payDay}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            label=\"Loan Amount\" \n            type=\"number\" \n            nameAttr=\"loanAmt\"\n            value={loanCalcData.loanAmount}\n            changed={(val) => {\n              setLoanCalcDataErrors({ ...loanCalcDataErrors, loanAmount: null })\n              setLoanCalcData({ ...loanCalcData, loanAmount: val })\n            }}\n            error={loanCalcDataErrors.loanAmount && loanCalcDataErrors.loanAmount}\n          />\n          <p className={styles.inputHint}>\n            <span>min amt:</span> #50,000; <span>max amt:</span> #500,000\n          </p>\n        </Col>\n        <Col>\n          <InputField \n            label=\"Installment Period\"\n            type=\"select\"\n            options={['1 Month', '2 Months', '3 Months']}\n            nameAttr=\"installmentCycle\"\n            value={loanCalcData.installmentPeriod}\n            changed={(val) => {\n              setLoanCalcDataErrors({ ...loanCalcDataErrors, installmentPeriod: null })\n              setLoanCalcData({ ...loanCalcData, installmentPeriod: val })\n            }}\n            error={loanCalcDataErrors.installmentPeriod && loanCalcDataErrors.installmentPeriod}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            label=\"Loan Purpose\"\n            type=\"select\"\n            options={[\n              'Debt Consolidation',\n              'Home Remodelling',\n              'Moving Costs',\n              'Emergency Expenses',\n              'Medical Bills',\n              'Education',\n              'Appliance Purchase',\n              'Vehicle Financing',\n              'Vacation Costs',\n              'Wedding Expenses',\n              'Others'\n            ]}\n            nameAttr=\"loanPurpose\"\n            value={loanCalcData.loanPurpose}\n            changed={(val) => {\n              setLoanCalcDataErrors({ ...loanCalcDataErrors, loanPurpose: null })\n              setLoanCalcData({ ...loanCalcData, loanPurpose: val })\n            }}\n            error={loanCalcDataErrors.loanPurpose && loanCalcDataErrors.loanPurpose}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Estimated Monthly Payment\"\n            nameAttr=\"monthlyPayment\"\n            value={loanCalcData.estimatedMonthlyPayment}\n            disable={true}\n            changed={(val) => {\n              setLoanCalcDataErrors({ ...loanCalcDataErrors, estimatedMonthlyPayment: null })\n              setLoanCalcData({ ...loanCalcData, estimatedMonthlyPayment: val })\n            }}\n            error={loanCalcDataErrors.estimatedMonthlyPayment && loanCalcDataErrors.estimatedMonthlyPayment}\n          />\n          <p className={styles.inputHint}>\n            <span>Eventual repayment amount may differ after risk assessment.</span>\n          </p>\n          { limitError && <p className={styles.limitError}>{limitError}</p> }\n        </Col>\n      </Row>\n      <Button \n        className=\"mt-5\" \n        fullWidth \n        clicked={submitLoanCalcData} \n        bgColor=\"#741763\" \n        size=\"lg\" \n        color=\"#EBEBEB\"\n        disabled={loading}\n        loading={loading}\n      >\n        Continue\n      </Button>\n    </div>\n  )\n}\n\n\nexport default LoanCalculatorForm;","/home/tga/Desktop/gypsy-capital/src/components/LoanModal/LoanModal.jsx",[],"/home/tga/Desktop/gypsy-capital/src/components/BankInfoForm/BankInfoForm.jsx",["219","220","221"],"import React, { useState, useRef, useMemo, useContext, useEffect } from 'react';\nimport styles from './BankInfoForm.module.scss';\nimport { Row, Col } from 'react-bootstrap';\nimport InputField from '../InputField/InputField';\nimport FileUploadButton from '../FileUploadButton/FileUploadButton';\nimport { FaCloudUploadAlt } from 'react-icons/fa';\nimport Button from '../Button/Button';\nimport { Context as BankContext } from '../../context/BankCotext';\nimport { Context as LoanContext } from '../../context/LoanContext';\nimport { validateInput } from '../../utils/validateInput';\nimport { ToastContainer, toast } from 'react-toastify';\n\n\nconst BankInfoForm = ({ submitBankInfo }) => {\n\n  const { state: { loading } } = useContext(LoanContext);\n\n  const { \n    state: { bankList, userBankDetails }, \n    getBankList, \n    verifyBankInfo,\n  } = useContext(BankContext);\n\n  const [bankInfo, setBankInfo] = useState({\n    bankName: \"\",\n    accountType: \"\",\n    accountNumber: \"\",\n    accountName: \"\",\n  })\n\n  const [bankErrors, setBankErrors] = useState({\n    bankName: null,\n    accountType: null,\n    accountNumber: null,\n  })\n\n  useEffect(() => {\n    (async() => {\n      await getBankList();\n    })()\n  }, [])\n \n  const bankNames = useMemo(() => {\n    return bankList ? \n      bankList.map((bank) => bank.name) :\n      []\n  }, [bankList])\n\n  const acctStatementRef = useRef();\n\n  const uploadBankInfo = () => {\n    if(acctStatementRef.current.files.length > 0) {\n      const acctStatement = acctStatementRef.current.files[0];\n      const validated = validateInput(bankInfo, setBankErrors);\n      if(validated) {\n        // console.log('validated')\n        const data = new FormData();\n        data.append('bank_name', bankInfo.bankName);\n        data.append('bank_account_type', bankInfo.accountType);\n        data.append('bank_account_number', bankInfo.accountNumber);\n        data.append('bank_account_name', bankInfo.accountName);\n        data.append('image', acctStatement);\n\n        // addBankInfoForLoan(data, user.user_id);\n        submitBankInfo(data);\n      }\n    } else {\n      toast.error(\"You need to upload your account statement to be able to proceed\")\n    }\n  }\n\n  useEffect(() => {\n    if(bankInfo.accountNumber.length === 10 && bankInfo.bankName) {\n      const bank = bankList.find(bank => bank.name.toLowerCase() === bankInfo.bankName);\n      const bankCode = bank.code;\n      console.log(bankCode)\n      verifyBankInfo(bankInfo.accountNumber, bankCode)\n    }\n  }, [bankInfo.accountNumber, bankInfo.bankName])\n\n  useEffect(() => {\n    console.log(userBankDetails);\n    if(userBankDetails) {\n      setBankInfo({ ...bankInfo, accountName: userBankDetails.account_name })\n    }\n  }, [userBankDetails]);\n\n  return (\n    <div className={styles.bankInfo}>\n      <ToastContainer position=\"top-center\" />\n      <p className={styles.importantInfo}>Bank account provided must be your salary account</p>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            type=\"select\"\n            nameAttr=\"bankName\"\n            label=\"Bank Name\"\n            options={bankNames}\n            value={bankInfo.bankName}\n            changed={(val) => {\n              setBankErrors({ ...bankErrors, bankName: null })\n              setBankInfo({ ...bankInfo, bankName: val })\n            }}\n            error={bankErrors.bankName && bankErrors.bankName}\n          />\n        </Col>\n        <Col>\n          <InputField \n            type=\"select\"\n            nameAttr=\"accountType\"\n            label=\"Bank Account Type\"\n            options={['Savings', 'Current']}\n            value={bankInfo.accountType}\n            changed={(val) => {\n              setBankErrors({ ...bankErrors, accountType: null })\n              setBankInfo({ ...bankInfo, accountType: val })\n            }}\n            error={bankErrors.accountType && bankErrors.accountType}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            type=\"text\"\n            nameAttr=\"acctNumber\"\n            label=\"Account Number\"\n            value={bankInfo.accountNumber}\n            changed={(val) => {\n              setBankErrors({ ...bankErrors, accountNumber: null })\n              setBankInfo({ ...bankInfo, accountNumber: val })\n            }}\n            error={bankErrors.accountNumber && bankErrors.accountNumber}\n          />\n        </Col>\n        <Col>\n          <InputField \n            type=\"type\"\n            nameAttr=\"acctName\"\n            label=\"Account Name\"\n            value={bankInfo.accountName}\n            disable={true}\n            changed={(val) => setBankInfo({ ...bankInfo, accountName: val })}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <FileUploadButton \n            label=\"Choose file\"\n            icon={<FaCloudUploadAlt className=\"ml-3\" size=\"1.2em\" />}\n            id=\"acct-statement-upload\" \n            fileRef={acctStatementRef}\n            visibleLabel=\"Statement of Account\"\n            fullwidth\n          />\n          <p className={styles.inputHint}>Please provide your 6 months bank statement to us.</p>\n        </Col>\n      </Row>\n      <Button \n        className=\"mt-5\" \n        fullWidth \n        clicked={uploadBankInfo} \n        bgColor=\"#741763\" \n        size=\"lg\" \n        color=\"#EBEBEB\"\n        disabled={loading}\n        loading={loading}\n      >\n        Submit\n      </Button>\n    </div>\n  )\n}\n\nexport default BankInfoForm;","/home/tga/Desktop/gypsy-capital/src/routes/sidebarRoutes.js",["222"],"/home/tga/Desktop/gypsy-capital/src/routes/pageUrl.js",[],"/home/tga/Desktop/gypsy-capital/src/pages/ProcessorLoans/ProcessorLoans.jsx",["223"],"/home/tga/Desktop/gypsy-capital/src/pages/ProcessorClients/ProcessorClients.jsx",[],"/home/tga/Desktop/gypsy-capital/src/pages/ProcessorDashboard/ProcessorDashboard.jsx",[],"/home/tga/Desktop/gypsy-capital/src/index.js",[],"/home/tga/Desktop/gypsy-capital/src/routes/protectedroute/ProtectedRoute.js",["224"],"/home/tga/Desktop/gypsy-capital/src/utils/history.js",[],"/home/tga/Desktop/gypsy-capital/src/context/createPersistDataContext.js",["225"],"/home/tga/Desktop/gypsy-capital/src/pages/Overview/Overview.jsx",["226","227","228","229"],"/home/tga/Desktop/gypsy-capital/src/pages/ContactPage/ContactPage.jsx",["230","231"],"/home/tga/Desktop/gypsy-capital/src/pages/Faqs/Faqs.jsx",[],"/home/tga/Desktop/gypsy-capital/src/pages/LoanDetail/LoanDetail.jsx",[],"/home/tga/Desktop/gypsy-capital/src/pages/ClientListPage/ClientListPage.jsx",[],"/home/tga/Desktop/gypsy-capital/src/components/ProgressBar/ProgressBar.jsx",[],"/home/tga/Desktop/gypsy-capital/src/components/BvnForm/BvnForm.jsx",[],"/home/tga/Desktop/gypsy-capital/src/components/StatBox/StatBox.jsx",[],{"ruleId":"232","severity":1,"message":"233","line":4,"column":1,"nodeType":"234","endLine":22,"endColumn":2},{"ruleId":"235","severity":1,"message":"236","line":14,"column":25,"nodeType":"237","messageId":"238","endLine":14,"endColumn":29},{"ruleId":"235","severity":1,"message":"239","line":19,"column":11,"nodeType":"237","messageId":"238","endLine":19,"endColumn":14},{"ruleId":"240","severity":1,"message":"241","line":36,"column":6,"nodeType":"242","endLine":36,"endColumn":8,"suggestions":"243"},{"ruleId":"240","severity":1,"message":"244","line":56,"column":6,"nodeType":"242","endLine":56,"endColumn":13,"suggestions":"245"},{"ruleId":"240","severity":1,"message":"246","line":137,"column":8,"nodeType":"242","endLine":137,"endColumn":10,"suggestions":"247"},{"ruleId":"240","severity":1,"message":"248","line":160,"column":6,"nodeType":"242","endLine":160,"endColumn":18,"suggestions":"249"},{"ruleId":"240","severity":1,"message":"244","line":29,"column":6,"nodeType":"242","endLine":29,"endColumn":13,"suggestions":"250"},{"ruleId":"235","severity":1,"message":"251","line":1,"column":17,"nodeType":"237","messageId":"238","endLine":1,"endColumn":23},{"ruleId":"235","severity":1,"message":"252","line":1,"column":25,"nodeType":"237","messageId":"238","endLine":1,"endColumn":33},{"ruleId":"235","severity":1,"message":"236","line":13,"column":40,"nodeType":"237","messageId":"238","endLine":13,"endColumn":44},{"ruleId":"235","severity":1,"message":"239","line":22,"column":11,"nodeType":"237","messageId":"238","endLine":22,"endColumn":14},{"ruleId":"240","severity":1,"message":"253","line":47,"column":6,"nodeType":"242","endLine":47,"endColumn":8,"suggestions":"254"},{"ruleId":"240","severity":1,"message":"255","line":55,"column":6,"nodeType":"242","endLine":55,"endColumn":13,"suggestions":"256"},{"ruleId":"257","replacedBy":"258"},{"ruleId":"259","replacedBy":"260"},{"ruleId":"235","severity":1,"message":"236","line":15,"column":25,"nodeType":"237","messageId":"238","endLine":15,"endColumn":29},{"ruleId":"261","severity":1,"message":"262","line":42,"column":15,"nodeType":"263","endLine":42,"endColumn":26},{"ruleId":"261","severity":1,"message":"262","line":45,"column":15,"nodeType":"263","endLine":45,"endColumn":26},{"ruleId":"261","severity":1,"message":"262","line":48,"column":15,"nodeType":"263","endLine":48,"endColumn":26},{"ruleId":"235","severity":1,"message":"264","line":2,"column":8,"nodeType":"237","messageId":"238","endLine":2,"endColumn":14},{"ruleId":"235","severity":1,"message":"265","line":15,"column":10,"nodeType":"237","messageId":"238","endLine":15,"endColumn":17},{"ruleId":"235","severity":1,"message":"266","line":15,"column":19,"nodeType":"237","messageId":"238","endLine":15,"endColumn":29},{"ruleId":"235","severity":1,"message":"267","line":109,"column":10,"nodeType":"237","messageId":"238","endLine":109,"endColumn":19},{"ruleId":"235","severity":1,"message":"268","line":109,"column":21,"nodeType":"237","messageId":"238","endLine":109,"endColumn":33},{"ruleId":"235","severity":1,"message":"269","line":167,"column":10,"nodeType":"237","messageId":"238","endLine":167,"endColumn":22},{"ruleId":"235","severity":1,"message":"270","line":167,"column":24,"nodeType":"237","messageId":"238","endLine":167,"endColumn":39},{"ruleId":"235","severity":1,"message":"271","line":174,"column":10,"nodeType":"237","messageId":"238","endLine":174,"endColumn":20},{"ruleId":"235","severity":1,"message":"272","line":174,"column":22,"nodeType":"237","messageId":"238","endLine":174,"endColumn":35},{"ruleId":"232","severity":1,"message":"233","line":5,"column":1,"nodeType":"234","endLine":52,"endColumn":2},{"ruleId":"240","severity":1,"message":"273","line":16,"column":6,"nodeType":"242","endLine":16,"endColumn":41,"suggestions":"274"},{"ruleId":"275","severity":1,"message":"276","line":58,"column":19,"nodeType":"263","endLine":58,"endColumn":72},{"ruleId":"240","severity":1,"message":"241","line":37,"column":6,"nodeType":"242","endLine":37,"endColumn":8,"suggestions":"277"},{"ruleId":"275","severity":1,"message":"276","line":102,"column":29,"nodeType":"263","endLine":102,"endColumn":72},{"ruleId":"240","severity":1,"message":"278","line":464,"column":6,"nodeType":"242","endLine":464,"endColumn":8,"suggestions":"279"},{"ruleId":"240","severity":1,"message":"280","line":479,"column":6,"nodeType":"242","endLine":479,"endColumn":49,"suggestions":"281"},{"ruleId":"240","severity":1,"message":"282","line":487,"column":6,"nodeType":"242","endLine":487,"endColumn":23,"suggestions":"283"},{"ruleId":"235","severity":1,"message":"284","line":13,"column":21,"nodeType":"237","messageId":"238","endLine":13,"endColumn":32},{"ruleId":"235","severity":1,"message":"284","line":9,"column":21,"nodeType":"237","messageId":"238","endLine":9,"endColumn":32},{"ruleId":"235","severity":1,"message":"285","line":14,"column":31,"nodeType":"237","messageId":"238","endLine":14,"endColumn":40},{"ruleId":"240","severity":1,"message":"286","line":69,"column":6,"nodeType":"242","endLine":69,"endColumn":52,"suggestions":"287"},{"ruleId":"240","severity":1,"message":"278","line":41,"column":6,"nodeType":"242","endLine":41,"endColumn":8,"suggestions":"288"},{"ruleId":"240","severity":1,"message":"280","line":79,"column":6,"nodeType":"242","endLine":79,"endColumn":49,"suggestions":"289"},{"ruleId":"240","severity":1,"message":"282","line":86,"column":6,"nodeType":"242","endLine":86,"endColumn":23,"suggestions":"290"},{"ruleId":"235","severity":1,"message":"291","line":8,"column":10,"nodeType":"237","messageId":"238","endLine":8,"endColumn":21},{"ruleId":"235","severity":1,"message":"264","line":3,"column":8,"nodeType":"237","messageId":"238","endLine":3,"endColumn":14},{"ruleId":"235","severity":1,"message":"292","line":9,"column":30,"nodeType":"237","messageId":"238","endLine":9,"endColumn":34},{"ruleId":"232","severity":1,"message":"233","line":4,"column":1,"nodeType":"234","endLine":34,"endColumn":2},{"ruleId":"235","severity":1,"message":"236","line":12,"column":25,"nodeType":"237","messageId":"238","endLine":12,"endColumn":29},{"ruleId":"235","severity":1,"message":"239","line":17,"column":11,"nodeType":"237","messageId":"238","endLine":17,"endColumn":14},{"ruleId":"235","severity":1,"message":"293","line":17,"column":16,"nodeType":"237","messageId":"238","endLine":17,"endColumn":20},{"ruleId":"235","severity":1,"message":"294","line":20,"column":22,"nodeType":"237","messageId":"238","endLine":20,"endColumn":35},{"ruleId":"235","severity":1,"message":"236","line":9,"column":25,"nodeType":"237","messageId":"238","endLine":9,"endColumn":29},{"ruleId":"295","severity":1,"message":"296","line":33,"column":11,"nodeType":"263","endLine":40,"endColumn":14},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'url' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getClientDetails' and 'user.user_id'. Either include them or remove the dependency array.","ArrayExpression",["297"],"React Hook useEffect has a missing dependency: 'clearErrors'. Either include it or remove the dependency array.",["298"],"React Hook useEffect has a missing dependency: 'redirect'. Either include it or remove the dependency array. If 'redirect' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["299"],"React Hook useMemo has missing dependencies: 'submitBvn', 'submitIdentityInfo', and 'submitPersonalInfo'. Either include them or remove the dependency array.",["300"],["301"],"'useRef' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'retrieveClientLoans'. Either include it or remove the dependency array.",["302"],"React Hook useEffect has a missing dependency: 'clearError'. Either include it or remove the dependency array.",["303"],"no-native-reassign",["304"],"no-negated-in-lhs",["305"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'styles' is defined but never used.","'biodata' is assigned a value but never used.","'setBiodata' is assigned a value but never used.","'nextOfKin' is assigned a value but never used.","'setNextOfKin' is assigned a value but never used.","'disburseBank' is assigned a value but never used.","'setDisburseBank' is assigned a value but never used.","'salaryBank' is assigned a value but never used.","'setSalaryBank' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'list'. Either include it or remove the dependency array.",["306"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",["307"],"React Hook useEffect has a missing dependency: 'getBankList'. Either include it or remove the dependency array.",["308"],"React Hook useEffect has missing dependencies: 'bankList' and 'verifyBankInfo'. Either include them or remove the dependency array.",["309"],"React Hook useEffect has a missing dependency: 'bankInfo'. Either include it or remove the dependency array. You can also do a functional update 'setBankInfo(b => ...)' if you only need 'bankInfo' in the 'setBankInfo' call.",["310"],"'AuthContext' is defined but never used.","'loanApply' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loanCalcData'. Either include it or remove the dependency array. You can also do a functional update 'setLoanCalcData(l => ...)' if you only need 'loanCalcData' in the 'setLoanCalcData' call.",["311"],["312"],["313"],["314"],"'RiUser3Fill' is defined but never used.","'user' is assigned a value but never used.","'path' is assigned a value but never used.","'setLoanStatus' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.",{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"317","fix":"323"},{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},"no-global-assign","no-unsafe-negation",{"desc":"328","fix":"329"},{"desc":"315","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"331","fix":"339"},{"desc":"333","fix":"340"},{"desc":"335","fix":"341"},"Update the dependencies array to be: [getClientDetails, user.user_id]",{"range":"342","text":"343"},"Update the dependencies array to be: [clearErrors, error]",{"range":"344","text":"345"},"Update the dependencies array to be: [redirect]",{"range":"346","text":"347"},"Update the dependencies array to be: [setupStage, submitBvn, submitIdentityInfo, submitPersonalInfo]",{"range":"348","text":"349"},{"range":"350","text":"345"},"Update the dependencies array to be: [retrieveClientLoans]",{"range":"351","text":"352"},"Update the dependencies array to be: [clearError, error]",{"range":"353","text":"354"},"Update the dependencies array to be: [indexOfFirstItem, indexOfLastItem, list]",{"range":"355","text":"356"},{"range":"357","text":"343"},"Update the dependencies array to be: [getBankList]",{"range":"358","text":"359"},"Update the dependencies array to be: [bankInfo.accountNumber, bankInfo.bankName, bankList, verifyBankInfo]",{"range":"360","text":"361"},"Update the dependencies array to be: [bankInfo, userBankDetails]",{"range":"362","text":"363"},"Update the dependencies array to be: [monthlySalary, loanAmount, installmentPeriod, loanCalcData]",{"range":"364","text":"365"},{"range":"366","text":"359"},{"range":"367","text":"361"},{"range":"368","text":"363"},[1450,1452],"[getClientDetails, user.user_id]",[1864,1871],"[clearErrors, error]",[3809,3811],"[redirect]",[4470,4482],"[setupStage, submitBvn, submitIdentityInfo, submitPersonalInfo]",[868,875],[1789,1791],"[retrieveClientLoans]",[1888,1895],"[clearError, error]",[504,539],"[indexOfFirstItem, indexOfLastItem, list]",[1128,1130],[13355,13357],"[getBankList]",[13795,13838],"[bankInfo.accountNumber, bankInfo.bankName, bankList, verifyBankInfo]",[14011,14028],"[bankInfo, userBankDetails]",[2320,2366],"[monthlySalary, loanAmount, installmentPeriod, loanCalcData]",[1203,1205],[2480,2523],[2695,2712]]