[{"/home/tga/Desktop/gypsy-capital/src/index.js":"1","/home/tga/Desktop/gypsy-capital/src/context/LoanContext.js":"2","/home/tga/Desktop/gypsy-capital/src/context/UserContext.js":"3","/home/tga/Desktop/gypsy-capital/src/context/ApprovalContext.js":"4","/home/tga/Desktop/gypsy-capital/src/context/createPersistDataContext.js":"5","/home/tga/Desktop/gypsy-capital/src/pages/SignUp/SignUp.jsx":"6","/home/tga/Desktop/gypsy-capital/src/pages/HomePage/HomePage.jsx":"7","/home/tga/Desktop/gypsy-capital/src/pages/Faqs/Faqs.jsx":"8","/home/tga/Desktop/gypsy-capital/src/pages/AboutUs/AboutUs.jsx":"9","/home/tga/Desktop/gypsy-capital/src/pages/LoanCalculator/LoanCalculator.jsx":"10","/home/tga/Desktop/gypsy-capital/src/pages/LoanList/LoanList.jsx":"11","/home/tga/Desktop/gypsy-capital/src/pages/ProcessorLoans/ProcessorLoans.jsx":"12","/home/tga/Desktop/gypsy-capital/src/pages/ProcessorLoanDetails/ProcessorLoanDetails.jsx":"13","/home/tga/Desktop/gypsy-capital/src/pages/ProcessorClientDetails/ProcessorClientDetails.jsx":"14","/home/tga/Desktop/gypsy-capital/src/pages/AuthorizerLoanDetails/AuthorizerLoanDetails.jsx":"15","/home/tga/Desktop/gypsy-capital/src/components/InputField/InputField.js":"16","/home/tga/Desktop/gypsy-capital/src/components/NavBar/NavBar.jsx":"17","/home/tga/Desktop/gypsy-capital/src/components/LoanList/LoanList.jsx":"18","/home/tga/Desktop/gypsy-capital/src/components/StatBox/StatBox.jsx":"19","/home/tga/Desktop/gypsy-capital/src/components/OfferLetter/OfferLetter.jsx":"20","/home/tga/Desktop/gypsy-capital/src/components/Footer/Footer.jsx":"21","/home/tga/Desktop/gypsy-capital/src/components/LoanContactForm/LoanContactForm.jsx":"22","/home/tga/Desktop/gypsy-capital/src/components/EmployerInfoForm/EmployerInfoForm.jsx":"23","/home/tga/Desktop/gypsy-capital/src/components/ProfileView/ProfileView.jsx":"24","/home/tga/Desktop/gypsy-capital/src/components/BvnForm/BvnForm.jsx":"25","/home/tga/Desktop/gypsy-capital/src/components/ProgressBar/ProgressBar.jsx":"26","/home/tga/Desktop/gypsy-capital/src/components/MonoWidget/MonoWidget.jsx":"27","/home/tga/Desktop/gypsy-capital/src/components/AccountSetupModal/AccountSetupModal.jsx":"28","/home/tga/Desktop/gypsy-capital/src/api/gypsy-web.js":"29","/home/tga/Desktop/gypsy-capital/src/routes/pageUrl.js":"30","/home/tga/Desktop/gypsy-capital/src/context/BankCotext.js":"31","/home/tga/Desktop/gypsy-capital/src/context/RepaymentContext.js":"32","/home/tga/Desktop/gypsy-capital/src/pages/SignIn/SignIn.jsx":"33","/home/tga/Desktop/gypsy-capital/src/pages/OtpVerify/OtpVerify.jsx":"34","/home/tga/Desktop/gypsy-capital/src/pages/Profile/Profile.jsx":"35","/home/tga/Desktop/gypsy-capital/src/pages/ClientDetails/ClientDetails.jsx":"36","/home/tga/Desktop/gypsy-capital/src/pages/LoanDetail/LoanDetail.jsx":"37","/home/tga/Desktop/gypsy-capital/src/pages/ForgotPassword/ForgotPassword.jsx":"38","/home/tga/Desktop/gypsy-capital/src/pages/AuthorizerLoans/AuthorizerLoans.jsx":"39","/home/tga/Desktop/gypsy-capital/src/pages/ResetSuccess/ResetSuccess.jsx":"40","/home/tga/Desktop/gypsy-capital/src/routes/sidebarRoutes.js":"41","/home/tga/Desktop/gypsy-capital/src/hooks/useNavigateAfterAuth.js":"42","/home/tga/Desktop/gypsy-capital/src/components/Dashboard/Dashboard.jsx":"43","/home/tga/Desktop/gypsy-capital/src/components/Loader/Loader.jsx":"44","/home/tga/Desktop/gypsy-capital/src/utils/mappedLgas.js":"45","/home/tga/Desktop/gypsy-capital/src/components/IdentityForm/IdentityForm.jsx":"46","/home/tga/Desktop/gypsy-capital/src/reportWebVitals.js":"47","/home/tga/Desktop/gypsy-capital/src/context/MonoContext.js":"48","/home/tga/Desktop/gypsy-capital/src/pages/Overview/Overview.jsx":"49","/home/tga/Desktop/gypsy-capital/src/pages/ContactPage/ContactPage.jsx":"50","/home/tga/Desktop/gypsy-capital/src/pages/ResetPassword/ResetPassword.jsx":"51","/home/tga/Desktop/gypsy-capital/src/pages/AuthorizerOverview/AuthorizerOverview.jsx":"52","/home/tga/Desktop/gypsy-capital/src/utils/validateInput.js":"53","/home/tga/Desktop/gypsy-capital/src/components/NavTabs/NavTabs.jsx":"54","/home/tga/Desktop/gypsy-capital/src/components/OfferLetter/OfferLetterForm.jsx":"55","/home/tga/Desktop/gypsy-capital/src/hooks/usePagination.js":"56","/home/tga/Desktop/gypsy-capital/src/components/FaqSection/FaqSection.jsx":"57","/home/tga/Desktop/gypsy-capital/src/components/ModalForm/ModalForm.jsx":"58","/home/tga/Desktop/gypsy-capital/src/components/LoanCalculatorForm/LoanCalculatorForm.jsx":"59","/home/tga/Desktop/gypsy-capital/src/pages/pages.js":"60","/home/tga/Desktop/gypsy-capital/src/context/AuthContext.js":"61","/home/tga/Desktop/gypsy-capital/src/pages/ConsumerCredit/ConsumerCredit.jsx":"62","/home/tga/Desktop/gypsy-capital/src/components/ProcessOffer/ProcessOffer.jsx":"63","/home/tga/Desktop/gypsy-capital/src/pages/AuthorizerClientDetails/AuthorizerClientDetails.jsx":"64","/home/tga/Desktop/gypsy-capital/src/utils/convertInputType.js":"65","/home/tga/Desktop/gypsy-capital/src/App.js":"66","/home/tga/Desktop/gypsy-capital/src/pages/CreditReport/CreditReport.jsx":"67","/home/tga/Desktop/gypsy-capital/src/pages/Products/Products.jsx":"68","/home/tga/Desktop/gypsy-capital/src/pages/ProcessorDashboard/ProcessorDashboard.jsx":"69","/home/tga/Desktop/gypsy-capital/src/hooks/useLoanDetails.js":"70","/home/tga/Desktop/gypsy-capital/src/components/FileUploadButton/FileUploadButton.js":"71","/home/tga/Desktop/gypsy-capital/src/utils/history.js":"72","/home/tga/Desktop/gypsy-capital/src/context/createDataContext.js":"73","/home/tga/Desktop/gypsy-capital/src/pages/AgentOverview/AgentOverview.jsx":"74","/home/tga/Desktop/gypsy-capital/src/pages/Support/Support.jsx":"75","/home/tga/Desktop/gypsy-capital/src/utils/nigeriaStates.js":"76","/home/tga/Desktop/gypsy-capital/src/components/Button/Button.jsx":"77","/home/tga/Desktop/gypsy-capital/src/components/BankInfoForm/BankInfoForm.jsx":"78","/home/tga/Desktop/gypsy-capital/src/components/LoanModal/LoanModal.jsx":"79","/home/tga/Desktop/gypsy-capital/src/components/ScrollToTopOnMount/ScrollToTopOnMount.jsx":"80","/home/tga/Desktop/gypsy-capital/src/components/PersonalForm/PersonalForm.jsx":"81"},{"size":548,"mtime":1615186108001,"results":"82","hashOfConfig":"83"},{"size":7730,"mtime":1614756252067,"results":"84","hashOfConfig":"83"},{"size":8357,"mtime":1615172320352,"results":"85","hashOfConfig":"83"},{"size":2656,"mtime":1615411153492,"results":"86","hashOfConfig":"83"},{"size":821,"mtime":1612688150601,"results":"87","hashOfConfig":"83"},{"size":8013,"mtime":1615162061114,"results":"88","hashOfConfig":"83"},{"size":16172,"mtime":1615812029924,"results":"89","hashOfConfig":"83"},{"size":855,"mtime":1615773152498,"results":"90","hashOfConfig":"83"},{"size":7035,"mtime":1615773221180,"results":"91","hashOfConfig":"83"},{"size":7819,"mtime":1615773006188,"results":"92","hashOfConfig":"83"},{"size":4424,"mtime":1615230346385,"results":"93","hashOfConfig":"83"},{"size":1038,"mtime":1614577544983,"results":"94","hashOfConfig":"83"},{"size":21710,"mtime":1615785928548,"results":"95","hashOfConfig":"83"},{"size":4749,"mtime":1615230346385,"results":"96","hashOfConfig":"83"},{"size":3378,"mtime":1615715173854,"results":"97","hashOfConfig":"83"},{"size":2658,"mtime":1615717532586,"results":"98","hashOfConfig":"83"},{"size":3124,"mtime":1615771430254,"results":"99","hashOfConfig":"83"},{"size":3592,"mtime":1614577812286,"results":"100","hashOfConfig":"83"},{"size":359,"mtime":1613662172186,"results":"101","hashOfConfig":"83"},{"size":11966,"mtime":1615787694307,"results":"102","hashOfConfig":"83"},{"size":1498,"mtime":1615772293000,"results":"103","hashOfConfig":"83"},{"size":6013,"mtime":1614449713718,"results":"104","hashOfConfig":"83"},{"size":9416,"mtime":1614451042975,"results":"105","hashOfConfig":"83"},{"size":7350,"mtime":1615166227442,"results":"106","hashOfConfig":"83"},{"size":1331,"mtime":1612592363525,"results":"107","hashOfConfig":"83"},{"size":1565,"mtime":1611429643367,"results":"108","hashOfConfig":"83"},{"size":1633,"mtime":1615286487857,"results":"109","hashOfConfig":"83"},{"size":21688,"mtime":1614430258872,"results":"110","hashOfConfig":"83"},{"size":194,"mtime":1615603624257,"results":"111","hashOfConfig":"83"},{"size":2456,"mtime":1615165274533,"results":"112","hashOfConfig":"83"},{"size":1970,"mtime":1615411153492,"results":"113","hashOfConfig":"83"},{"size":1975,"mtime":1615477168585,"results":"114","hashOfConfig":"83"},{"size":3662,"mtime":1614846996299,"results":"115","hashOfConfig":"83"},{"size":2391,"mtime":1612574568451,"results":"116","hashOfConfig":"83"},{"size":5552,"mtime":1614520423023,"results":"117","hashOfConfig":"83"},{"size":18542,"mtime":1615230346361,"results":"118","hashOfConfig":"83"},{"size":9994,"mtime":1615603624269,"results":"119","hashOfConfig":"83"},{"size":1549,"mtime":1613844663739,"results":"120","hashOfConfig":"83"},{"size":1045,"mtime":1615363832954,"results":"121","hashOfConfig":"83"},{"size":606,"mtime":1613846570517,"results":"122","hashOfConfig":"83"},{"size":2677,"mtime":1614724878260,"results":"123","hashOfConfig":"83"},{"size":990,"mtime":1614729905905,"results":"124","hashOfConfig":"83"},{"size":4301,"mtime":1614470843592,"results":"125","hashOfConfig":"83"},{"size":244,"mtime":1614263157725,"results":"126","hashOfConfig":"83"},{"size":14356,"mtime":1614449747162,"results":"127","hashOfConfig":"83"},{"size":2430,"mtime":1613916529415,"results":"128","hashOfConfig":"83"},{"size":362,"mtime":1611009045300,"results":"129","hashOfConfig":"83"},{"size":3808,"mtime":1615411153492,"results":"130","hashOfConfig":"83"},{"size":5197,"mtime":1613938100761,"results":"131","hashOfConfig":"83"},{"size":5318,"mtime":1615812076148,"results":"132","hashOfConfig":"83"},{"size":3453,"mtime":1613889706632,"results":"133","hashOfConfig":"83"},{"size":5796,"mtime":1615450279629,"results":"134","hashOfConfig":"83"},{"size":1153,"mtime":1613889253169,"results":"135","hashOfConfig":"83"},{"size":504,"mtime":1613386895718,"results":"136","hashOfConfig":"83"},{"size":20201,"mtime":1615787671805,"results":"137","hashOfConfig":"83"},{"size":1386,"mtime":1615363832846,"results":"138","hashOfConfig":"83"},{"size":2165,"mtime":1615771548869,"results":"139","hashOfConfig":"83"},{"size":11735,"mtime":1614471117577,"results":"140","hashOfConfig":"83"},{"size":8352,"mtime":1615190374516,"results":"141","hashOfConfig":"83"},{"size":2387,"mtime":1615165250184,"results":"142","hashOfConfig":"83"},{"size":8060,"mtime":1615162900026,"results":"143","hashOfConfig":"83"},{"size":8165,"mtime":1613929899661,"results":"144","hashOfConfig":"83"},{"size":2173,"mtime":1615774314372,"results":"145","hashOfConfig":"83"},{"size":2997,"mtime":1615715213402,"results":"146","hashOfConfig":"83"},{"size":404,"mtime":1615740689958,"results":"147","hashOfConfig":"83"},{"size":4659,"mtime":1615286487857,"results":"148","hashOfConfig":"83"},{"size":498,"mtime":1613049821733,"results":"149","hashOfConfig":"83"},{"size":12257,"mtime":1615039376564,"results":"150","hashOfConfig":"83"},{"size":5721,"mtime":1615450279669,"results":"151","hashOfConfig":"83"},{"size":701,"mtime":1615230346353,"results":"152","hashOfConfig":"83"},{"size":665,"mtime":1611816481368,"results":"153","hashOfConfig":"83"},{"size":84,"mtime":1612764469627,"results":"154","hashOfConfig":"83"},{"size":533,"mtime":1612421501467,"results":"155","hashOfConfig":"83"},{"size":5044,"mtime":1615450279629,"results":"156","hashOfConfig":"83"},{"size":473,"mtime":1614546415965,"results":"157","hashOfConfig":"83"},{"size":6681,"mtime":1615332137598,"results":"158","hashOfConfig":"83"},{"size":917,"mtime":1614587267822,"results":"159","hashOfConfig":"83"},{"size":5659,"mtime":1613933105810,"results":"160","hashOfConfig":"83"},{"size":4849,"mtime":1614451456706,"results":"161","hashOfConfig":"83"},{"size":183,"mtime":1615772938496,"results":"162","hashOfConfig":"83"},{"size":14395,"mtime":1613915891204,"results":"163","hashOfConfig":"83"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},"t9s37o",{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"172"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"169"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"172"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"175"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"175"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"169"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"175"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"169"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"248","messages":"249","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"166"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"175"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"175"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"175"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"175"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"175"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"169"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"281","messages":"282","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"166"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"286","messages":"287","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"288","messages":"289","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"169"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"169"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"175"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"301","messages":"302","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"303","messages":"304","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"175"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"166"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"175"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"330","messages":"331","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"336","messages":"337","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"338","messages":"339","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"340","messages":"341","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"348","messages":"349","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"352","messages":"353","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/tga/Desktop/gypsy-capital/src/index.js",[],["354","355"],"/home/tga/Desktop/gypsy-capital/src/context/LoanContext.js",[],["356","357"],"/home/tga/Desktop/gypsy-capital/src/context/UserContext.js",[],["358","359"],"/home/tga/Desktop/gypsy-capital/src/context/ApprovalContext.js",[],["360","361"],"/home/tga/Desktop/gypsy-capital/src/context/createPersistDataContext.js",["362"],"import React, {createContext, useReducer, useEffect } from 'react';\n\n\nexport default (reducer, actions, initialState, persist, saveData) => {\n  const Context = createContext();\n\n  const Provider = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState, () => {\n      if(persist) {\n        const localData = localStorage.getItem('gypsy');\n        return localData ? JSON.parse(localData) : {}\n      }\n    });\n\n    useEffect(() => {\n      if(persist) {\n        saveData(state);\n        // console.log(state);\n      }\n    }, [state])\n\n    const boundActions = {}\n\n    for(let key in actions) {\n      boundActions[key] = actions[key](dispatch);\n    }\n\n    return (\n      <Context.Provider value={{ state, ...boundActions }}>{children}</Context.Provider>\n    )\n  }\n\n  return { Context, Provider }\n}","/home/tga/Desktop/gypsy-capital/src/pages/SignUp/SignUp.jsx",["363","364","365"],"import React, { useContext, useEffect, useState } from 'react';\nimport Logo from '../../assets/logo.png';\nimport InputField from '../../components/InputField/InputField';\nimport Button from '../../components/Button/Button';\nimport styles from './SignUp.module.scss';\nimport { Row, Col } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport pageUrl from '../../routes/pageUrl';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport { ToastContainer, toast } from 'react-toastify';\n\n\nconst SignUp = () => {\n\n  const { \n    state: { loading, error }, \n    registerUser, \n    getActiveUser, \n    clearErrors \n  } = useContext(AuthContext);\n\n  const [signUpValues, setSignUpvalues] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    mobileNumber: '',\n    password: '',\n    confirmPassword: '',\n    referralChoice: ''\n  });\n\n  const [validationErrors, setValidationErrors] = useState({\n    firstName: null,\n    lastName: null,\n    email: null,\n    mobileNumber: null,\n    password: null,\n    confirmPassword: null,\n    referralChoice: null\n  })\n\n  useEffect(() => {\n    if(error) {\n      toast.error(error);\n      clearErrors();\n    }\n  }, [error])\n\n  const referralOptions = [\n    'Search Engine', \n    'Google Ads', \n    'Email', \n    'Radio', \n    'TV', \n    'Newspaper', \n    'Word of mouth',\n    'Facebook',\n    'Instagram',\n    'Other'\n  ]\n\n  const validateInput = () => {\n\n    const validMail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    let validPhoneNumber = /^[0]\\d{10}$/;\n\n    const errorsInit = {};\n    let fields = { ...signUpValues }\n\n    for(const key in fields) {\n      if(!fields[key]) {\n        errorsInit[key] = \"This field is required\";\n      } \n      if(fields.email && !fields.email.match(validMail)) {\n        errorsInit.email = \"Please enter a valid email address\"\n      } \n      if(fields.mobileNumber && !fields.mobileNumber.match(validPhoneNumber)) {\n        errorsInit.mobileNumber = \"Please enter a valid phone number\"\n      } \n      if(fields.password && fields.password.length < 8) {\n        errorsInit.password = \"Password must be at least 8 characters\";\n      }\n      if(fields.confirmPassword && fields.confirmPassword !== fields.password) {\n        errorsInit.confirmPassword = \"Your password does not match\"\n      }\n    }\n\n    setValidationErrors(errorsInit);\n\n    if(Object.entries(errorsInit).length === 0) {\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n  const handleSubmit = () => {\n    const validated = validateInput();\n    const signUpData = {\n      email: signUpValues.email,\n      firstName: signUpValues.firstName,\n      lastName: signUpValues.lastName,\n      phoneNumber: signUpValues.mobileNumber.replace('0', '234'),\n      password: signUpValues.password,\n      hearAboutUs: signUpValues.referralChoice,\n    }\n    console.log(signUpData);\n    if(validated) {\n      registerUser(signUpData, getActiveUser);\n    }\n  }\n\n  return (\n    <div className={styles.container}>\n      <Link to={pageUrl.HOMEPAGE}><img src={Logo} alt=\"Gypsy Logo\" /></Link>\n      <h1>Create your account</h1>\n      <p className={styles.subtitle}>Hey there, let's setup your Gypsy Capital account</p>\n      <div className={styles.registerBox}>\n        <ToastContainer position=\"top-center\" />\n        <Row>\n          <Col sm={12} md={6} className=\"mb-4 mb-md-0\">\n            <InputField type=\"text\" \n              nameAttr=\"firstName\" \n              label=\"First Name\" \n              value={signUpValues.firstName} \n              changed={(val) => {\n                setValidationErrors({ ...validationErrors, firstName: null })\n                setSignUpvalues({...signUpValues, firstName: val})\n              }}\n              error={validationErrors.firstName && validationErrors.firstName}\n            />\n          </Col>\n          <Col sm={12} md={6} className=\"mb-4 mb-md-0\">\n            <InputField type=\"text\" \n              nameAttr=\"lastName\" \n              label=\"Last Name\" \n              value={signUpValues.lastName}\n              changed={(val) => {\n                setValidationErrors({ ...validationErrors, lastName: null })\n                setSignUpvalues({...signUpValues, lastName: val})\n              }}\n              error={validationErrors.lastName && validationErrors.lastName}\n            />\n          </Col>\n        </Row>\n        <Row className=\"mt-0 mt-md-4\">\n          <Col sm={12} md={6} className=\"mb-4 mb-md-0\">\n            <InputField type=\"email\" \n              nameAttr=\"email\" \n              label=\"Email\" \n              value={signUpValues.email}\n              changed={(val) => {\n                setValidationErrors({ ...validationErrors, email: null })\n                setSignUpvalues({...signUpValues, email: val})\n              }}\n              error={validationErrors.email && validationErrors.email}\n            />\n          </Col>\n          <Col sm={12} md={6} className=\"mb-4 mb-md-0\">\n            <InputField type=\"phone\" \n              nameAttr=\"mobileNo\" \n              label=\"Mobile Number\" \n              value={signUpValues.mobileNumber}\n              changed={(val) => {\n                setValidationErrors({...validationErrors, mobileNumber: null})\n                setSignUpvalues({...signUpValues, mobileNumber: val})\n              }}\n              error={validationErrors.mobileNumber && validationErrors.mobileNumber}\n            />\n          </Col>\n        </Row>\n        <Row className=\"mt-0 mt-md-4\">\n          <Col sm={12} md={6} className=\"mb-4 mb-md-0\">\n            <InputField type=\"password\" \n              nameAttr=\"password\" \n              label=\"Password\" \n              value={signUpValues.password}\n              changed={(val) => {\n                setValidationErrors({...validationErrors, password: null})\n                setSignUpvalues({...signUpValues, password: val})\n              }}\n              error={validationErrors.password && validationErrors.password}\n            />\n          </Col>\n          <Col sm={12} md={6} className=\"mb-4 mb-md-0\">\n            <InputField type=\"password\" \n              nameAttr=\"confirmPassword\" \n              label=\"Confirm Password\" \n              value={signUpValues.confirmPassword}\n              changed={(val) => {\n                setValidationErrors({...validationErrors, confirmPassword: null})\n                setSignUpvalues({...signUpValues, confirmPassword: val})\n              }}\n              error={validationErrors.confirmPassword && validationErrors.confirmPassword}\n            />\n          </Col>\n        </Row>\n        <Row className=\"mt-0 mt-md-4\">\n          <Col className=\"mb-4 mb-md-0\">\n            <InputField type=\"select\" \n              label=\"How did you hear about us?\" \n              options={referralOptions} \n              nameAttr=\"publicity\"\n              changed={(val) => {\n                setValidationErrors({...validationErrors, referralChoice: null})\n                setSignUpvalues({...signUpValues, referralChoice: val})\n              }}\n              error={validationErrors.referralChoice && validationErrors.referralChoice}\n            />\n          </Col>\n        </Row>\n        <Button \n          className={ loading ? [styles.loadingBtn, \"mt-5\"].join(' ') : \"mt-5\" } \n          fullWidth \n          clicked={handleSubmit} \n          bgColor=\"#741763\" \n          size=\"lg\" \n          color=\"#EBEBEB\"\n          disabled={loading}\n          loading={loading}\n        >\n          Sign Up\n        </Button>\n        <p className={[styles.authLink, 'mt-3'].join(' ')}>\n          Already have an account? <Link to={pageUrl.SIGNIN_PAGE}>Log in</Link>\n        </p>\n        <p className={styles.legalLink}>\n          By continuing, you agree to our <Link to={pageUrl.TERMS_CONDITIONS_PAGE}>Terms and Conditions</Link> of service and <Link to={pageUrl.PRIVACY_POLICY_PAGE}>Privacy Policy.</Link>\n        </p>\n      </div>\n    </div>\n  )\n}\n\n\nexport default SignUp;","/home/tga/Desktop/gypsy-capital/src/pages/HomePage/HomePage.jsx",[],"/home/tga/Desktop/gypsy-capital/src/pages/Faqs/Faqs.jsx",[],"/home/tga/Desktop/gypsy-capital/src/pages/AboutUs/AboutUs.jsx",["366","367","368"],"/home/tga/Desktop/gypsy-capital/src/pages/LoanCalculator/LoanCalculator.jsx",["369","370"],"/home/tga/Desktop/gypsy-capital/src/pages/LoanList/LoanList.jsx",["371"],"/home/tga/Desktop/gypsy-capital/src/pages/ProcessorLoans/ProcessorLoans.jsx",["372","373"],"import React, { useEffect, useContext } from 'react';\nimport Dashboard from '../../components/Dashboard/Dashboard';\nimport styles from './ProcessorLoans.module.scss';\nimport { routes } from '../../routes/sidebarRoutes';\nimport { useLocation } from 'react-router';\nimport LoanList from '../../components/LoanList/LoanList';\nimport { Context as LoanContext } from '../../context/LoanContext';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport Loader from '../../components/Loader/Loader';\n\n\nconst ProcessorLoans = () => {\n\n  const location = useLocation();\n  const processorRoutes = routes[2];\n\n  const { state: { user } } = useContext(AuthContext);\n  const { state: { loans, loading }, retrieveClientLoans } = useContext(LoanContext);\n\n  useEffect(() => {\n    retrieveClientLoans();\n  }, []);\n\n  return (\n    <Dashboard sidebarRoutes={processorRoutes} location={location}>\n       { !loading ? <LoanList loanList={loans} userRole={user.role} /> : <Loader /> }\n    </Dashboard>\n  )\n}\n\n\nexport default ProcessorLoans;","/home/tga/Desktop/gypsy-capital/src/pages/ProcessorLoanDetails/ProcessorLoanDetails.jsx",["374","375","376","377","378","379","380","381"],"import React, { useState, useContext, useEffect } from \"react\";\nimport Dashboard from \"../../components/Dashboard/Dashboard\";\nimport styles from \"./ProcessorLoanDetails.module.scss\";\nimport { routes } from \"../../routes/sidebarRoutes\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport NavTabs from \"../../components/NavTabs/NavTabs\";\nimport { BasicInfo, RepaymentSchedule } from \"../LoanDetail/LoanDetail\";\nimport { Context as LoanContext } from \"../../context/LoanContext\";\nimport { Context as AuthContext } from \"../../context/AuthContext\";\nimport { Context as ApprovalContext } from \"../../context/ApprovalContext\";\nimport { Context as RepaymentContext } from \"../../context/RepaymentContext\";\nimport { Context as MonoContext } from \"../../context/MonoContext\";\nimport { Context as BankContext } from \"../../context/BankCotext\";\nimport InputField from \"../../components/InputField/InputField\";\nimport Button from \"../../components/Button/Button\";\nimport { Row, Col, Modal } from \"react-bootstrap\";\nimport ProcessOffer from \"../../components/ProcessOffer/ProcessOffer\";\nimport { validateInput } from \"../../utils/validateInput\";\nimport _ from \"lodash\";\nimport { numberWithCommas } from \"../../utils/nigeriaStates\";\nimport { toast, ToastContainer } from \"react-toastify\";\n\nexport const DecisionApproval = ({\n  loanId,\n  loanData,\n  userRole,\n  disburseBank,\n}) => {\n  const {\n    state: { loading, error, approvedStatus },\n    decideApproval,\n    disburseLoan,\n    clearError,\n    resetApprovalStatus,\n  } = useContext(ApprovalContext);\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() => {\n    if (error) {\n      toast.error(error);\n      clearError();\n    }\n  }, [error]);\n\n  // useEffect(() => {\n  //   if(approvedStatus) {\n  //     resetApprovalStatus();\n  //     setShowModal(true);\n  //   }\n  // }, [approvedStatus])\n\n  const [approvalData, setApprovalData] = useState({\n    decision: \"\",\n    approvedRate: \"\",\n    approvedTenure: \"\",\n    repaymentDate: \"\",\n    decisionReason: \"\",\n    totalPay: \"\",\n    approvedAmount: \"\",\n  });\n\n  const [approvalErrors, setApprovalErrors] = useState({\n    decision: null,\n    approvedRate: null,\n    approvedTenure: null,\n    repaymentDate: null,\n    decisionReason: null,\n    totalPay: null,\n    approvedAmount: null,\n  });\n\n  const {\n    state: { bankList },\n    getBankList,\n  } = useContext(BankContext);\n\n  useEffect(() => {\n    (async () => {\n      await getBankList();\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (loanData && loanData.processorDecision) {\n      console.log(loanData);\n      setApprovalData({\n        ...approvalData,\n        decision: loanData.processorDecision,\n        approvedRate: loanData.approvedInterest,\n        approvedTenure: loanData.approvedTenure,\n        repaymentDate: loanData.determinedRepaymentDate,\n        approvedAmount: loanData.amount,\n        decisionReason: loanData.processorDecisionReason,\n      });\n    }\n  }, [loanData]);\n\n  const approveLoan = async () => {\n    if (userRole === \"processor\") {\n      const validated = validateInput(approvalData, setApprovalErrors);\n      console.log(validated);\n      if (validated) {\n        const data = {\n          decision: approvalData.decision,\n          approved_interest: approvalData.approvedRate,\n          approved_tenure: approvalData.approvedTenure,\n          determined_repayment_date: approvalData.repaymentDate,\n          decision_reason: approvalData.decisionReason,\n          total_pay: approvalData.totalPay,\n          approvedAmount: approvalData.approvedAmount,\n        };\n        decideApproval(loanId, data);\n      }\n    } else if (userRole === \"authorizer\") {\n      if (loanData && loanData?.processorDecision) {\n        await decideApproval(loanId, {\n          decision: loanData?.processorDecision,\n          approved_interest: loanData?.approvedInterest?.toString(),\n          approved_tenure: loanData?.approvedTenure?.toString(),\n          determined_repayment_date: loanData?.determinedRepaymentDate,\n          total_pay: loanData?.calculatedPayBack?.toString(),\n          decision_reason: loanData?.processorDecisionReason,\n          approvedAmount: loanData?.amount?.toString(),\n        });\n        setShowModal(true);\n      } else {\n        const validated = validateInput(approvalData, setApprovalErrors);\n        console.log(validated);\n        if (validated) {\n          const data = {\n            decision: approvalData.decision,\n            approved_interest: approvalData.approvedRate,\n            approved_tenure: approvalData.approvedTenure,\n            determined_repayment_date: approvalData.repaymentDate,\n            decision_reason: approvalData.decisionReason,\n            total_pay: approvalData.totalPay,\n          };\n          await decideApproval(loanId, data);\n        }\n      }\n    }\n  };\n\n  const transferPaymentToClient = () => {\n    const bankInfo = bankList.filter(\n      (bank) => bank.name.toLowerCase() === disburseBank.bank.toLowerCase()\n    );\n    // console.log(bankInfo[0].code);\n    const paymentData = {\n      account_bank: bankInfo[0].code,\n      account_number: disburseBank.accountNumber,\n      amount: loanData.amount,\n    };\n    disburseLoan(loanId, paymentData);\n  };\n\n  const DisburseModal = () => {\n    const handleClose = () => {\n      setShowModal(false);\n    };\n\n    const [clientBank, setClientBank] = useState({\n      bankName: \"\",\n      accountNumber: \"\",\n      amount: \"\",\n    });\n\n    useEffect(() => {\n      if (disburseBank && disburseBank.isDisbursement) {\n        setClientBank({\n          ...clientBank,\n          bankName: _.startCase(disburseBank.bank),\n          accountNumber: disburseBank.accountNumber,\n          amount: numberWithCommas(loanData.amount),\n        });\n      }\n    }, [disburseBank]);\n\n    return (\n      <Modal show={showModal} onHide={handleClose}>\n        <Modal.Body className={styles.disburseModal}>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField\n                type=\"text\"\n                label=\"Bank Name\"\n                nameAttr=\"bankName\"\n                value={clientBank.bankName}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField\n                type=\"text\"\n                label=\"Account Number\"\n                nameAttr=\"accNumber\"\n                value={clientBank.accountNumber}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField\n                type=\"text\"\n                label=\"Amount\"\n                nameAttr=\"amount\"\n                value={clientBank.amount}\n              />\n            </Col>\n          </Row>\n          <Button\n            className=\"mt-4\"\n            fullWidth\n            clicked={transferPaymentToClient}\n            bgColor=\"#741763\"\n            size=\"lg\"\n            color=\"#EBEBEB\"\n            disabled={loading}\n            loading={loading}\n          >\n            Disburse\n          </Button>\n        </Modal.Body>\n      </Modal>\n    );\n  };\n\n  return (\n    <>\n      <ToastContainer position=\"top-center\" />\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField\n            type=\"select\"\n            label=\"Decision\"\n            nameAttr=\"decision\"\n            options={[\"Approve\", \"Decline\"]}\n            value={approvalData.decision}\n            changed={(val) => {\n              setApprovalData({ ...approvalData, decision: val });\n              setApprovalErrors({ ...approvalErrors, decision: null });\n            }}\n            error={approvalErrors.decision && approvalErrors.decision}\n            disable={!!loanData?.processorDecision}\n          />\n        </Col>\n        <Col>\n          <InputField\n            type=\"text\"\n            label=\"Approved Interest Rate\"\n            nameAttr=\"interestRate\"\n            value={approvalData.approvedRate}\n            changed={(val) => {\n              setApprovalData({ ...approvalData, approvedRate: val });\n              setApprovalErrors({ ...approvalErrors, approvedRate: null });\n            }}\n            error={approvalErrors.approvedRate && approvalErrors.approvedRate}\n            disable={!!loanData?.processorDecision}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField\n            type=\"text\"\n            label=\"Approved Tenure\"\n            nameAttr=\"approvedTenure\"\n            value={approvalData.approvedTenure}\n            changed={(val) => {\n              setApprovalData({ ...approvalData, approvedTenure: val });\n              setApprovalErrors({ ...approvalErrors, approvedTenure: null });\n            }}\n            error={\n              approvalErrors.approvedTenure && approvalErrors.approvedTenure\n            }\n            disable={!!loanData?.processorDecision}\n          />\n        </Col>\n        <Col>\n          <InputField\n            type=\"text\"\n            label=\"Determined Repayment Date\"\n            nameAttr=\"repaymentDate\"\n            value={approvalData.repaymentDate}\n            changed={(val) => {\n              setApprovalData({ ...approvalData, repaymentDate: val });\n              setApprovalErrors({ ...approvalErrors, repaymentDate: null });\n            }}\n            error={approvalErrors.repaymentDate && approvalErrors.repaymentDate}\n            disable={!!loanData?.processorDecision}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField\n            type=\"text\"\n            label=\"Total Repayment\"\n            nameAttr=\"totalRepayment\"\n            value={approvalData.totalPay}\n            changed={(val) => {\n              setApprovalData({ ...approvalData, totalPay: val });\n              setApprovalErrors({ ...approvalErrors, totalPay: null });\n            }}\n            error={approvalErrors.totalPay && approvalErrors.totalPay}\n            disable={!!loanData?.processorDecision}\n          />\n        </Col>\n        <Col>\n          <InputField\n            type=\"text\"\n            label=\"Approved Loan Amount\"\n            nameAttr=\"approvedAmount\"\n            value={approvalData.approvedAmount}\n            changed={(val) => {\n              setApprovalData({ ...approvalData, approvedAmount: val });\n              setApprovalErrors({ ...approvalErrors, approvedAmount: null });\n            }}\n            error={\n              approvalErrors.approvedAmount && approvalErrors.approvedAmount\n            }\n            disable={!!loanData?.processorDecision}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField\n            type=\"textarea\"\n            label=\"Decision Reason\"\n            nameAttr=\"decisionReason\"\n            value={approvalData.decisionReason}\n            changed={(val) => {\n              setApprovalData({ ...approvalData, decisionReason: val });\n              setApprovalErrors({ ...approvalErrors, decisionReason: null });\n            }}\n            error={\n              approvalErrors.decisionReason && approvalErrors.decisionReason\n            }\n            disable={!!loanData?.processorDecision}\n          />\n        </Col>\n      </Row>\n      <Button\n        className=\"mt-4\"\n        fullWidth\n        clicked={approveLoan}\n        bgColor=\"#741763\"\n        size=\"lg\"\n        color=\"#EBEBEB\"\n        disabled={loading}\n        loading={loading}\n      >\n        {userRole === \"processor\" ? `Submit Decision` : `Submit & Disburse`}\n      </Button>\n      <DisburseModal />\n    </>\n  );\n};\n\nexport const RepaySetup = ({ loanId, loanData }) => {\n  const {\n    state: { loading },\n    setupRepayment,\n  } = useContext(RepaymentContext);\n\n  const [repayData, setRepayData] = useState({\n    repaymentApi: \"\",\n    totalRepay: \"\",\n    tenure: \"\",\n    payday: \"\",\n    startDate: \"\",\n    bankName: \"\",\n    accountNumber: \"\",\n  });\n\n  const [repayError, setRepayError] = useState({\n    repaymentApi: null,\n    totalRepay: null,\n    tenure: null,\n    payday: null,\n    startDate: null,\n    bankName: null,\n    accountNumber: null,\n  });\n\n  useEffect(() => {\n    if (loanData && loanData.rePaymentAPIstatus) {\n      setRepayData({\n        ...repayData,\n        repaymentApi: loanData.rePaymentAPIstatus,\n        tenure: loanData.approvedTenure,\n        payday: loanData.payDay,\n        startDate: loanData.determinedRepaymentDate,\n      });\n    }\n  }, [loanData]);\n\n  const startRepaymentSetup = () => {\n    const { repaymentApi, totalRepay, tenure, payday, startDate } = repayData;\n    const forPaystack = { repaymentApi, totalRepay, tenure, payday, startDate };\n    let validated;\n    if (repayData.repaymentApi === \"paystack\") {\n      validated = validateInput(forPaystack, setRepayError);\n    } else {\n      validated = validateInput(repayData, setRepayError);\n    }\n    console.log(validated);\n    const data = {\n      approved_tenure: repayData.tenure,\n      determined_repayment_date: repayData.startDate,\n      rePaymentAPI: \"paystack\",\n      total_pay: repayData.totalRepay,\n    };\n    if (validated) {\n      setupRepayment(loanId, data);\n    }\n  };\n\n  return (\n    <>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField\n            type=\"select\"\n            label=\"Repayment API\"\n            nameAttr=\"repayApi\"\n            value={repayData.repaymentApi}\n            options={[\"Paystack\", \"Remita\"]}\n            changed={(val) => {\n              setRepayError({ ...repayError, repaymentApi: null });\n              setRepayData({ ...repayData, repaymentApi: val });\n            }}\n            error={repayError.repaymentApi && repayError.repaymentApi}\n            disable={!!loanData.rePaymentAPIstatus}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField\n            type=\"text\"\n            label=\"Total Repayment\"\n            nameAttr=\"totalRepay\"\n            value={repayData.totalRepay}\n            changed={(val) => {\n              setRepayError({ ...repayError, totalRepay: null });\n              setRepayData({ ...repayData, totalRepay: val });\n            }}\n            error={repayError.totalRepay && repayError.totalRepay}\n            disable={!!loanData.rePaymentAPIstatus}\n          />\n        </Col>\n        <Col>\n          <InputField\n            type=\"text\"\n            label=\"Tenure\"\n            nameAttr=\"tenure\"\n            value={repayData.tenure}\n            changed={(val) => {\n              setRepayError({ ...repayError, tenure: null });\n              setRepayData({ ...repayData, tenure: val });\n            }}\n            error={repayError.tenure && repayError.tenure}\n            disable={!!loanData.rePaymentAPIstatus}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField\n            type=\"text\"\n            label=\"Pay day\"\n            nameAttr=\"payday\"\n            value={repayData.payday}\n            changed={(val) => {\n              setRepayError({ ...repayError, payday: null });\n              setRepayData({ ...repayData, payday: val });\n            }}\n            error={repayError.payday && repayError.payday}\n            disable={!!loanData.rePaymentAPIstatus}\n          />\n        </Col>\n        <Col>\n          <InputField\n            type=\"text\"\n            label=\"Repayment Start Date\"\n            nameAttr=\"startDate\"\n            value={repayData.startDate}\n            changed={(val) => {\n              setRepayError({ ...repayError, startDate: null });\n              setRepayData({ ...repayData, startDate: val });\n            }}\n            error={repayError.startDate && repayError.startDate}\n            disable={!!loanData.rePaymentAPIstatus}\n          />\n        </Col>\n      </Row>\n      {repayData.repaymentApi !== \"paystack\" && (\n        <Row className=\"mb-4\">\n          <Col>\n            <InputField\n              type=\"text\"\n              label=\"Bank Name\"\n              nameAttr=\"bankName\"\n              value={repayData.bankName}\n              changed={(val) => {\n                setRepayError({ ...repayError, bankName: null });\n                setRepayData({ ...repayData, bankName: val });\n              }}\n              error={repayError.bankName && repayError.bankName}\n            />\n          </Col>\n          <Col>\n            <InputField\n              type=\"text\"\n              label=\"Account Number\"\n              nameAttr=\"accountNumber\"\n              value={repayData.accountNumber}\n              changed={(val) => {\n                setRepayError({ ...repayError, accountNumber: null });\n                setRepayData({ ...repayData, accountNumber: val });\n              }}\n              error={repayError.accountNumber && repayError.accountNumber}\n            />\n          </Col>\n        </Row>\n      )}\n      <Button\n        className=\"mt-4\"\n        fullWidth\n        clicked={startRepaymentSetup}\n        bgColor=\"#741763\"\n        size=\"lg\"\n        color=\"#EBEBEB\"\n        disabled={loanData?.rePaymentAPIstatus ? true : loading}\n        loading={loading}\n      >\n        Continue\n      </Button>\n    </>\n  );\n};\n\nexport const MonoTab = ({ clientId }) => {\n  const {\n    state: { loading },\n    getAccountInfo,\n    getAccountStatement,\n  } = useContext(MonoContext);\n\n  const retrieveAccountInfo = () => {\n    console.log(clientId);\n    getAccountInfo(clientId);\n  };\n\n  const retrieveAccountStatement = () => {\n    console.log(clientId);\n    getAccountStatement(clientId, 3);\n  };\n\n  return (\n    <>\n      <div className={styles.status}>\n        <p>Status: Inactive</p>\n      </div>\n      <div className={styles.monoContainer}>\n        <Row>\n          <Col>\n            <Button\n              className=\"mt-4\"\n              fullWidth\n              clicked={retrieveAccountStatement}\n              bgColor=\"#741763\"\n              size=\"lg\"\n              color=\"#EBEBEB\"\n              disabled={loading}\n              loading={loading}\n            >\n              Get Account Statement\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Button\n              className=\"mt-4\"\n              fullWidth\n              // clicked={updateContactInfo}\n              bgColor=\"#741763\"\n              size=\"lg\"\n              color=\"#EBEBEB\"\n              // disabled={loading}\n              // loading={loading}\n            >\n              Get Transaction History\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Button\n              className=\"mt-4\"\n              fullWidth\n              clicked={retrieveAccountInfo}\n              bgColor=\"#741763\"\n              size=\"lg\"\n              color=\"#EBEBEB\"\n              disabled={loading}\n              loading={loading}\n            >\n              Get Account Info\n            </Button>\n          </Col>\n        </Row>\n      </div>\n    </>\n  );\n};\n\nconst ProcessorLoanDetails = () => {\n  const location = useLocation();\n  const processorRoute = routes[2];\n  const { loanId } = useParams();\n\n  const [visibleSection, setVisibleSection] = useState(\"basic\");\n\n  const navArray = [\n    {\n      title: \"Basic Info\",\n      shortlink: \"basic\",\n    },\n    {\n      title: \"Decision & Approval\",\n      shortlink: \"decision\",\n    },\n    {\n      title: \"Repayment Setup\",\n      shortlink: \"setup\",\n    },\n    {\n      title: \"Repayment Schedule\",\n      shortlink: \"repay\",\n    },\n    {\n      title: \"Offer Letter\",\n      shortlink: \"offer\",\n    },\n    {\n      title: \"Mono\",\n      shortlink: \"mono\",\n    },\n  ];\n\n  const setActiveTab = (link) => {\n    setVisibleSection(link);\n  };\n\n  const {\n    state: { loanDetails },\n    retrieveLoan,\n  } = useContext(LoanContext);\n  const {\n    state: { user },\n  } = useContext(AuthContext);\n\n  useEffect(() => {\n    retrieveLoan(loanId);\n  }, []);\n\n  console.log(loanDetails);\n\n  return (\n    <Dashboard sidebarRoutes={processorRoute} location={location}>\n      <NavTabs\n        navs={navArray}\n        setActive={setActiveTab}\n        currentTab={visibleSection}\n      />\n      <div className={styles.detailFields}>\n        {visibleSection === \"basic\" ? (\n          <BasicInfo\n            data={\n              loanDetails\n                ? {\n                    client: { ...loanDetails?.client[0]?.bioData },\n                    ...loanDetails?.loan,\n                  }\n                : null\n            }\n            userRole={user.role}\n          />\n        ) : null}\n        {visibleSection === \"decision\" ? (\n          <DecisionApproval\n            loanId={loanId}\n            loanData={loanDetails.loan}\n            userRole={user.role}\n          />\n        ) : null}\n        {visibleSection === \"setup\" ? (\n          <RepaySetup loanId={loanId} loanData={loanDetails.loan} />\n        ) : null}\n        {visibleSection === \"repay\" ? (\n          <RepaymentSchedule\n            data={\n              loanDetails\n                ? {\n                    ...loanDetails?.loan,\n                    payments: loanDetails?.payments,\n                  }\n                : null\n            }\n            loanId={loanId}\n            userRole={user.role}\n          />\n        ) : null}\n        {visibleSection === \"offer\" ? (\n          <ProcessOffer\n            data={\n              loanDetails\n                ? {\n                    client: { ...loanDetails?.client[0]?.bioData },\n                    ...loanDetails?.loan,\n                    residence: { ...loanDetails?.residence[0] },\n                    employment: { ...loanDetails?.employment[0] },\n                  }\n                : null\n            }\n          />\n        ) : null}\n        {visibleSection === \"mono\" ? (\n          <MonoTab clientId={loanDetails?.client[0]?.clientId} />\n        ) : null}\n      </div>\n    </Dashboard>\n  );\n};\n\nexport default ProcessorLoanDetails;\n","/home/tga/Desktop/gypsy-capital/src/pages/ProcessorClientDetails/ProcessorClientDetails.jsx",["382","383"],"import React, { useContext, useEffect, useState } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { routes } from '../../routes/sidebarRoutes';\nimport Dashboard from '../../components/Dashboard/Dashboard';\nimport styles from './ProcessorClientDetails.module.scss';\nimport NavTabs from '../../components/NavTabs/NavTabs';\nimport { Biodata, NextOfKin, Bank, Employer, ClientLoan } from '../ClientDetails/ClientDetails';\nimport { Row, Col, Modal } from 'react-bootstrap';\nimport { IoDocumentTextOutline } from 'react-icons/io5';\nimport { RiDeleteBin5Line } from 'react-icons/ri'\nimport { FiEye } from 'react-icons/fi';\nimport { Context as UserContext } from '../../context/UserContext';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport Loader from '../../components/Loader/Loader';\nimport useLoanDetails from '../../hooks/useLoanDetails';\n\n\nconst DocCard = ({ docTitle, docLink }) => {\n\n  const [show, setShow] = useState(false);\n\n  const openDoc = () => {\n    setShow(true);\n  }\n\n  const handleClose = () => {\n    setShow(false);\n  }\n\n  return (\n    <>\n      <div className={styles.documentCard}>\n        <div style={{ width: \"100%\", textAlign: \"center\"}}>\n          <IoDocumentTextOutline color=\"#741763\" size=\"5em\" />\n          <div className={styles.ctrlBtn}>\n            <RiDeleteBin5Line size=\"1.3em\" color=\"#741763\" />\n            <FiEye size=\"1.3em\" color=\"#741763\" onClick={openDoc} />\n          </div>\n        </div>\n      </div>\n      <h4 className={styles.docTitle}>{docTitle}</h4>\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Body className={styles.documentImg}>\n          <img width=\"100%\" src={docLink} />\n        </Modal.Body>\n      </Modal>\n    </>\n  )\n}\n\nexport const DocTab = ({ userId }) => {\n\n  const [ loanDeets ] = useLoanDetails(userId);\n\n  console.log(loanDeets); \n\n  return (\n    <>\n      <Row>\n        <Col>\n          <DocCard docTitle=\"Identification\" docLink={loanDeets?.client[0]?.identity?.identityImageUrl} />\n        </Col>\n        <Col>\n          <DocCard docTitle=\"Proof of Address\" docLink={loanDeets?.residence[0]?.residenceProof} />\n        </Col>\n        <Col>\n          <DocCard docTitle=\"Official Document\" docLink={loanDeets?.employment[0]?.officialDocumentUrl} />\n        </Col>\n        <Col>\n          <DocCard docTitle=\"Statement of Account\" docLink={loanDeets?.bank[0]?.accountStatementUrl} />\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nconst ProcessorClientDetails = () => {\n\n  const location = useLocation();\n  const processorRoute = routes[2];\n  const { clientId } = useParams();\n  console.log(clientId);\n\n  const { state: { userDetails, loading }, getClientDetails } = useContext(UserContext);\n  const { state: { user } } = useContext(AuthContext);\n\n  useEffect(() => {\n    getClientDetails(clientId);\n  }, []);\n\n  console.log(userDetails);\n\n  const [detailSection, setDetailSection] = useState('biodata');\n\n  const navArray = [\n    {\n      title: \"Biodata\",\n      shortlink: \"biodata\"\n    },\n    {\n      title: \"Next of Kin Info\",\n      shortlink: \"kin\"\n    },\n    {\n      title: \"Bank Info\",\n      shortlink: \"bank\"\n    },\n    {\n      title: \"Employment Info\",\n      shortlink: \"employ\"\n    },\n    {\n      title: \"Document\",\n      shortlink: \"doc\"\n    },\n    {\n      title: \"Loans\",\n      shortlink: \"loans\"\n    },\n  ]\n\n  const setActiveTab = (link) => {\n    setDetailSection(link);\n  }\n\n\n  return (\n    <>\n      <Dashboard sidebarRoutes={processorRoute} location={location}>\n        <NavTabs navs={navArray} setActive={setActiveTab} currentTab={detailSection } />\n        { !loading ? <div className={detailSection !== \"loans\" && styles.detailFields}>\n          { detailSection === \"biodata\" && \n            <Biodata \n              data={userDetails && {...userDetails.bioData, ...userDetails.residence}}\n              userId={userDetails?.clientId}\n            /> \n          }\n          { detailSection === \"kin\" && \n            <NextOfKin \n              data={userDetails && { ...userDetails.nextOfKin }}\n            /> \n          }\n          { detailSection === \"bank\" && \n            <Bank \n              data={userDetails && { ...userDetails.bank }}\n            /> \n          }\n          { detailSection === \"employ\" && \n            <Employer \n              data={userDetails.employer && { ...userDetails.employer }}\n            /> \n          }\n          { detailSection === \"doc\" && <DocTab userId={userDetails?.clientId} /> }\n          { detailSection === \"loans\" && \n            <ClientLoan \n              userRole={user.role}\n              userId={userDetails && userDetails.clientId}\n            /> \n          }\n        </div> : <Loader />}\n      </Dashboard>\n    </>\n  )\n}\n\n\nexport default ProcessorClientDetails;","/home/tga/Desktop/gypsy-capital/src/pages/AuthorizerLoanDetails/AuthorizerLoanDetails.jsx",["384"],"/home/tga/Desktop/gypsy-capital/src/components/InputField/InputField.js",[],"/home/tga/Desktop/gypsy-capital/src/components/NavBar/NavBar.jsx",["385"],"/home/tga/Desktop/gypsy-capital/src/components/LoanList/LoanList.jsx",[],"/home/tga/Desktop/gypsy-capital/src/components/StatBox/StatBox.jsx",[],"/home/tga/Desktop/gypsy-capital/src/components/OfferLetter/OfferLetter.jsx",[],"/home/tga/Desktop/gypsy-capital/src/components/Footer/Footer.jsx",["386"],"/home/tga/Desktop/gypsy-capital/src/components/LoanContactForm/LoanContactForm.jsx",["387"],"/home/tga/Desktop/gypsy-capital/src/components/EmployerInfoForm/EmployerInfoForm.jsx",[],"/home/tga/Desktop/gypsy-capital/src/components/ProfileView/ProfileView.jsx",["388","389"],"import React, { useState, useContext, useRef, useEffect } from 'react';\nimport styles from './ProfileView.module.scss';\nimport { Row, Col } from 'react-bootstrap';\nimport InputField from '../InputField/InputField';\nimport Button from '../Button/Button';\nimport { BiCreditCard, BiPlus } from 'react-icons/bi';\nimport { RiBankFill } from 'react-icons/ri';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport { Context as UserContext } from '../../context/UserContext';\nimport MonoWidget from '../../components/MonoWidget/MonoWidget';\n\n\nconst ProfileView = () => {\n\n  const [visibleSection, setVisibleSection] = useState('personalInfo');\n  const [profileImg, setProfileImg] = useState(null);\n  const [visiblePaymentSection, setVisiblePaymentSection] = useState('card');\n\n  const [profileData, setProfileData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phoneNo: \"\",\n    bvn: \"\",\n    residence: \"\"\n  })\n\n  const profilePicRef = useRef();\n\n  const { state: { user } } = useContext(AuthContext);\n  const { \n    state: { userDetails },\n    getClientDetails, \n  } = useContext(UserContext);\n\n  useEffect(() => {\n    getClientDetails(user.user_id);\n  }, [])\n\n  useEffect(() => {\n    if(userDetails) {\n      // setProfileData({\n      //   firstName\n      // })\n      console.log(userDetails)\n      const { bioData, identity, residence } = userDetails;\n      setProfileData({\n        firstName: bioData.firstName,\n        lastName: bioData.lastName,\n        email: bioData.email,\n        phoneNo: bioData.phoneNumber.replace('234', '0'),\n        bvn: bioData.BVN,\n        residence: residence.street\n      })\n      setProfileImg(identity.profilePhoto)\n    }\n  }, [userDetails])\n\n  const goToProfileSection = (section) => {\n    console.log('works');\n    setVisibleSection(section);\n  }\n\n  return (\n    <div className={styles.profileBox}>\n      <div className={styles.header}>\n        <Row>\n          <Col \n            onClick={() => goToProfileSection('personalInfo')} \n            className={[styles.borderStyle, styles.tabCol].join(' ')}\n          >\n            <p \n              className={[styles.tabMenu, visibleSection === \"personalInfo\" && styles.activeTab1].join(' ')}\n            >\n              Personal Information\n            </p>\n          </Col>\n          <Col \n            onClick={() => goToProfileSection('security')} \n            className={[styles.borderStyle, styles.tabCol].join(' ')}\n          >\n            <p\n              className={[styles.tabMenu, visibleSection === \"security\" && styles.activeTab2].join(' ')}\n            >\n              Security\n            </p>\n          </Col>\n          <Col\n            onClick={() => goToProfileSection('payment')} \n            className={styles.tabCol}\n          >\n            <p\n              className={[styles.tabMenu, visibleSection === \"payment\" && styles.activeTab3].join(' ')}\n            >\n              Payment\n            </p>\n          </Col>\n        </Row>\n      </div>\n      <div className={styles.body}>\n        {visibleSection === \"personalInfo\" && <div>\n          <div className={styles.profilePictureSection}>\n            { profileImg && <img src={profileImg} alt=\"profile image\"/> }\n          </div>\n          <div className={styles.uploadBtn}>\n            <input type=\"file\" id=\"profilePic\" hidden ref={profilePicRef} />\n            <label  \n              htmlFor=\"profilePic\"\n            >\n              Change Profile Picture\n            </label>\n          </div>\n          <Row className=\"mb-4\">\n          <Col>\n            <InputField \n              label=\"First Name\"\n              type=\"text\"\n              nameAttr=\"firstName\"\n              value={profileData.firstName}\n            />\n          </Col> \n          <Col>\n            <InputField \n              label=\"Last Name\"\n              type=\"text\"\n              nameAttr=\"lastName\"\n              value={profileData.lastName}\n            />\n          </Col> \n          </Row> \n          <Row className=\"mb-4\">\n          <Col>\n            <InputField \n              label=\"Email\"\n              type=\"email\"\n              nameAttr=\"email\"\n              value={profileData.email}\n            />\n          </Col> \n          <Col>\n            <InputField \n              label=\"Phone Number\"\n              type=\"text\"\n              nameAttr=\"phoneNumber\"\n              value={profileData.phoneNo}\n            />\n          </Col> \n          </Row> \n          <Row>\n          <Col>\n            <InputField \n              label=\"BVN\"\n              type=\"text\"\n              nameAttr=\"bvn\"\n              value={profileData.bvn}\n            />\n          </Col> \n          <Col>\n            <InputField \n              label=\"Residential Address\"\n              type=\"text\"\n              nameAttr=\"address\"\n              value={profileData.residence}\n            />\n          </Col> \n          </Row> \n          <Button className=\"mt-5\" fullWidth  bgColor=\"#741763\" size=\"lg\" color=\"#EBEBEB\">\n            Edit Info\n          </Button>\n        </div>}\n        { visibleSection === \"security\" &&\n          <div className={styles.security}>\n            <h2>CHANGE PASSWORD</h2>\n            <Row className=\"mb-4\">\n              <Col>\n                <InputField \n                  type=\"password\"\n                  label=\"Current Password\"\n                  nameAttr=\"currPassword\"\n                />\n              </Col>\n            </Row>\n            <Row className=\"mb-4\">\n              <Col>\n                <InputField \n                  type=\"password\"\n                  label=\"Current Password\"\n                  nameAttr=\"currPassword\"\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <InputField \n                  type=\"password\"\n                  label=\"Current Password\"\n                  nameAttr=\"currPassword\"\n                />\n              </Col>\n            </Row>\n          </div>\n        }\n        { visibleSection === \"payment\" && \n          <div className={styles.payment}>\n            <div className={styles.btnGroup}>\n              <button \n                className={ visiblePaymentSection === 'card' && styles.activeMenu }\n                onClick={() => setVisiblePaymentSection('card')}\n              >\n                <BiCreditCard className={styles.icon} />\n                Card\n              </button>\n              <button\n                className={ visiblePaymentSection === 'bank' && styles.activeMenu }\n                onClick={() => setVisiblePaymentSection('bank')}\n              >\n                <RiBankFill className={styles.icon} />\n                Bank\n              </button>\n            </div>\n            <div className={styles.content}>\n              { visiblePaymentSection === \"card\" && <div className={styles.addCard}>\n                <div className={styles.cardInner}>\n                  <BiPlus size=\"2em\" />\n                  <p>Add Card</p>\n                </div>\n              </div> }\n              { visiblePaymentSection === \"bank\" && <div className={styles.monoLink}>\n                <div>\n                  <h4>To completely setup your account, you need to link your bank</h4>\n                  <MonoWidget />\n                </div>\n              </div> }\n            </div>\n          </div>\n        }\n      </div>\n    </div>\n  )\n}\n\n\nexport default ProfileView;","/home/tga/Desktop/gypsy-capital/src/components/BvnForm/BvnForm.jsx",[],"/home/tga/Desktop/gypsy-capital/src/components/ProgressBar/ProgressBar.jsx",[],"/home/tga/Desktop/gypsy-capital/src/components/MonoWidget/MonoWidget.jsx",["390","391","392"],"import React, { useContext, useEffect } from 'react';\nimport MonoConnect from '@mono.co/connect.js';\nimport Button from '../Button/Button';\nimport { Context as MonoContext } from '../../context/MonoContext';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport { toast, ToastContainer } from 'react-toastify';\n\nexport default function Mono() {\n\n  const { \n    state : { linkSuccess, error }, \n    authenticateUser, \n    resetLinkSuccess,\n    clearErrors\n  } = useContext(MonoContext);\n  const { state: { user } } = useContext(AuthContext);\n\n  const monoConnect = React.useMemo(() => {\n    const monoInstance = new MonoConnect({\n      onClose: () => console.log('Widget closed'),\n      onLoad: () => console.log('Widget loaded successfully'),\n      onSuccess: ({ code }) => {\n        console.log(`Linked successfully: ${code}`);\n        authenticateUser(user.user_id, code)\n      },\n      // key: \"test_pk_4f5soJVmo31hCbKePbfo\",\n      key: \"live_pk_PvDfizVtAJPsoplNU8r2\"\n    })\n\n    monoInstance.setup()\n    \n    return monoInstance;\n  }, [])\n\n  useEffect(() => {\n    if(linkSuccess) {\n      toast.success(\"Your financial account has been successfully linked\")\n      // resetLinkSuccess();\n    }\n  }, [linkSuccess]);\n\n  useEffect(() => {\n    if(error) {\n      toast.error(error)\n      clearErrors();\n    }\n  }, [error])\n\n  return (\n    <>\n      <ToastContainer position=\"top-center\" />\n      <Button\n        className=\"mt-2\" \n        bgColor=\"#741763\" \n        size=\"lg\" \n        color=\"#EBEBEB\"\n        clicked={() => monoConnect.open()}\n      >\n        Link Your Financial Account\n      </Button>\n    </>\n  )\n}","/home/tga/Desktop/gypsy-capital/src/components/AccountSetupModal/AccountSetupModal.jsx",["393","394","395","396","397","398"],"import React, { useContext, useEffect, useMemo, useState, useRef } from 'react';\nimport styles from './AccountSetupModal.module.scss';\nimport { Modal, Row, Col } from 'react-bootstrap';\nimport InputField from '../../components/InputField/InputField';\nimport Button from '../../components/Button/Button';\nimport { validateInput } from '../../utils/validateInput';\nimport { nigeriaStates } from '../../utils/nigeriaStates';\nimport { Context as BankContext } from '../../context/BankCotext';\nimport { Context as UserContext } from '../../context/UserContext';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport FileUploadButton from '../FileUploadButton/FileUploadButton';\nimport { FaCloudUploadAlt } from 'react-icons/fa';\nimport { toast, ToastContainer } from 'react-toastify';\nimport Loader from '../Loader/Loader';\nimport { FaCheckCircle } from 'react-icons/fa';\nimport BeatLoader from 'react-spinners/BeatLoader';\n\n\nexport const VerifyBvn = ({ submit }) => {\n\n  const [bvn, setBvn] = useState('');\n  const { state: { loading } } = useContext(UserContext);\n\n  const submitBvn = () => {\n    if(bvn) {\n      submit(bvn);\n    }\n  }\n\n  return (\n    <>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <h2 className={styles.headerText}>Verify BVN</h2>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div className={styles.body}>\n          <Row>\n            <Col>\n              <InputField \n                type=\"text\"\n                nameAttr=\"otp\"\n                label=\"Enter Client's BVN\"\n                value={bvn}\n                changed={(val) => {\n                  setBvn(val)\n                }}\n              />\n            </Col>\n          </Row>\n        </div>\n      </Modal.Body>\n      <Modal.Footer className={styles.body}>\n        <Button\n          fullWidth\n          bgColor=\"#741763\" \n          size=\"lg\" \n          clicked={submitBvn}\n          color=\"#EBEBEB\"\n          loading={loading}\n          disabled={loading}\n        >\n          Verify\n        </Button>\n        <p className={styles.hint}>To get your BVN, Dial *565*0#</p>\n      </Modal.Footer>\n    </>\n  )\n}\n\n\nexport const PersonalInfo = ({ submit }) => {\n\n  const { state: { userDetails }, getClientDetails } = useContext(UserContext);\n  const { state: { currentAddedUser} } = useContext(AuthContext);\n\n\n  const [biodata, setBiodata] = useState({\n    fullName: '',\n    dateOfBirth: '',\n    bvnPhoneNo: '',\n    email: '',\n    phoneNo: '',\n    altPhone: '',\n    gender: ''\n  });\n\n  const [biodataErrors, setBiodataErrors] = useState({\n    fullName: null,\n    dateOfBirth: null,\n    bvnPhoneNo: null,\n    email: null,\n    phoneNo: null,\n    altPhone: null,\n    gender: null\n  });\n\n\n  useEffect(() => {\n    const { user_id } = currentAddedUser;\n    getClientDetails(user_id);\n  }, []);\n\n  useEffect(() => {\n    if(userDetails) {\n      const { bioData } = userDetails;\n      setBiodata({ ...biodata, \n        fullName: `${bioData.firstName} ${bioData.lastName}`,\n        email: bioData.email,\n        phoneNo: bioData.phoneNumber.replace('234', '0'),\n        dateOfBirth: bioData.DOB,\n        bvnPhoneNo: bioData.bvnPhoneNumber\n      })\n    }\n  }, [currentAddedUser, userDetails]);\n\n\n  const addPersonalInfo = () => {\n    const validated = validateInput(biodata, setBiodataErrors);\n    if(validated) {\n      submit(biodata);\n    }\n  }\n  if(!userDetails) {\n    return <Loader />\n  }\n  return (\n    <>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <h2 className={styles.headerText}>Personal Info</h2>\n        </Modal.Title>\n        {/* <p className={styles.subtitle}>Personal Info</p> */}\n      </Modal.Header>\n      <Modal.Body>\n        <div className={styles.body}>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                label=\"Full name\"\n                type=\"text\"\n                nameAttr=\"fullname\"\n                value={biodata.fullName}\n                changed={(val) => {\n                  setBiodataErrors({ ...biodataErrors, fullName: null })\n                  setBiodata({ ...biodata, fullName: val})\n                }}\n                error={biodataErrors.fullName && biodataErrors.fullName}\n              />\n            </Col>\n            <Col>\n              <InputField \n                label=\"Date of Birth\"\n                type=\"text\"\n                nameAttr=\"dob\"\n                value={biodata.dateOfBirth}\n                changed={(val) => {\n                  setBiodataErrors({ ...biodataErrors, dateOfBirth: null })\n                  setBiodata({ ...biodata, dateOfBirth: val})\n                }}\n                error={biodataErrors.dateOfBirth && biodataErrors.dateOfBirth}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                label=\"BVN-linked Phone Number\"\n                type=\"text\"\n                nameAttr=\"bvnPhoneNo\"\n                value={biodata.bvnPhoneNo}\n                changed={(val) => {\n                  setBiodataErrors({ ...biodataErrors, bvnPhoneNo: null })\n                  setBiodata({ ...biodata, bvnPhoneNo: val})\n                }}\n                error={biodataErrors.bvnPhoneNo && biodataErrors.bvnPhoneNo}\n              />\n            </Col>\n            <Col>\n              <InputField \n                label=\"Email\"\n                type=\"email\"\n                nameAttr=\"email\"\n                value={biodata.email}\n                changed={(val) => {\n                  setBiodataErrors({ ...biodataErrors, email: null })\n                  setBiodata({ ...biodata, email: val})\n                }}\n                error={biodataErrors.email && biodataErrors.email}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                label=\"Phone Number\"\n                type=\"text\"\n                nameAttr=\"PhoneNo\"\n                value={biodata.phoneNo}\n                changed={(val) => {\n                  setBiodataErrors({ ...biodataErrors, phoneNo: null })\n                  setBiodata({ ...biodata, phoneNo: val})\n                }}\n                error={biodataErrors.phoneNo && biodataErrors.phoneNo}\n              />\n            </Col>\n            <Col>\n              <InputField \n                label=\"Alternative Phone Number\"\n                type=\"text\"\n                nameAttr=\"altPhoneNo\"\n                value={biodata.altPhone}\n                changed={(val) => {\n                  setBiodataErrors({ ...biodataErrors, altPhone: null })\n                  setBiodata({ ...biodata, altPhone: val})\n                }}\n                error={biodataErrors.altPhone && biodataErrors.altPhone}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <InputField \n                label=\"Gender\"\n                type=\"select\"\n                options={['Female', 'Male', 'Other']}\n                nameAttr=\"gender\"\n                value={biodata.gender}\n                changed={(val) => {\n                  setBiodataErrors({ ...biodataErrors, gender: null })\n                  setBiodata({ ...biodata, gender: val})\n                }}\n                error={biodataErrors.gender && biodataErrors.gender}\n              />\n            </Col>\n          </Row>\n          <Modal.Footer>\n            <Button \n              className=\"mt-4\" \n              clicked={addPersonalInfo} \n              fullWidth \n              bgColor=\"#741763\" \n              size=\"lg\" \n              color=\"#EBEBEB\"\n            >\n              Save & Continue\n            </Button>\n          </Modal.Footer>\n        </div>\n      </Modal.Body>\n    </>\n  )\n}\n\n\nexport const Residence = ({ submit }) => {\n\n  const [residentialInfo, setResidentialInfo] = useState({\n    street: '',\n    city: '',\n    state: ''\n  });\n\n  const [residentialErrors, setResidentialErrors] = useState({\n    street: null,\n    city: null,\n    state: null\n  });\n\n  const addResidence = () => {\n    const validated = validateInput(residentialInfo, setResidentialErrors);\n    if(validated) {\n      submit(residentialInfo);\n    }\n  }\n\n  return (\n    <>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <h2 className={styles.headerText}>Residential Address</h2>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div className={styles.body}>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                label=\"Street\"\n                type=\"text\"\n                nameAttr=\"residentStreet\"\n                value={residentialInfo.street}\n                changed={(val) => {\n                  setResidentialErrors({ ...residentialErrors, street: null })\n                  setResidentialInfo({ ...residentialInfo, street: val})\n                }}\n                error={residentialErrors.street && residentialErrors.street}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                label=\"City\"\n                type=\"text\"\n                nameAttr=\"city\"\n                value={residentialInfo.city}\n                changed={(val) => {\n                  setResidentialErrors({ ...residentialErrors, city: null })\n                  setResidentialInfo({ ...residentialInfo, city: val})\n                }}\n                error={residentialErrors.city && residentialErrors.city}\n              />\n            </Col>\n            <Col>\n              <InputField \n                label=\"State\"\n                type=\"select\"\n                options={nigeriaStates}\n                nameAttr=\"state\"\n                value={residentialInfo.state}\n                changed={(val) => {\n                  setResidentialErrors({ ...residentialErrors, state: null })\n                  setResidentialInfo({ ...residentialInfo, state: val})\n                }}\n                error={residentialErrors.state && residentialErrors.state}\n              />\n            </Col>\n          </Row>\n        </div>\n      </Modal.Body>\n      <Modal.Footer className={styles.body}>\n        <Button \n          className=\"mt-4\" \n          clicked={addResidence} \n          fullWidth \n          bgColor=\"#741763\" \n          size=\"lg\" \n          color=\"#EBEBEB\"\n        >\n          Save & Continue\n        </Button>\n      </Modal.Footer>\n    </>\n  )\n}\n\n\nexport const NextOfKin = ({ submit }) => {\n\n  const [kinInfo, setKinInfo] = useState({\n    fullName: '',\n    relationship: '',\n    email: '',\n    phoneNo: '',\n    address: ''\n  });\n\n  const [kinErrors, setKinErrors] = useState({\n    fullName: null,\n    relationship: null,\n    email: null,\n    phoneNo: null,\n    address: null\n  });\n\n  const addNextOfKin = () => {\n    const validated = validateInput(kinInfo, setKinErrors);\n    if(validated) {\n      submit(kinInfo);\n    }\n  }\n\n  return (\n    <>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <h2 className={styles.headerText}>Next of Kin Info</h2>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div className={styles.body}>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                label=\"Full name\"\n                type=\"text\"\n                nameAttr=\"kinFullname\"\n                value={kinInfo.fullName}\n                changed={(val) => {\n                  setKinErrors({ ...kinErrors, fullName: null })\n                  setKinInfo({ ...kinInfo, fullName: val})\n                }}\n                error={kinErrors.fullName && kinErrors.fullName}\n              />\n            </Col>\n            <Col>\n              <InputField \n                label=\"Relationship\"\n                type=\"text\"\n                nameAttr=\"kinRelationship\"\n                value={kinInfo.relationship}\n                changed={(val) => {\n                  setKinErrors({ ...kinErrors, relationship: null })\n                  setKinInfo({ ...kinInfo, relationship: val})\n                }}\n                error={kinErrors.relationship && kinErrors.relationship}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                label=\"Email Address\"\n                type=\"email\"\n                nameAttr=\"kinEmail\"\n                value={kinInfo.email}\n                changed={(val) => {\n                  setKinErrors({ ...kinErrors, email: null })\n                  setKinInfo({ ...kinInfo, email: val})\n                }}\n                error={kinErrors.email && kinErrors.email}\n              />\n            </Col>\n            <Col>\n              <InputField \n                label=\"Phone Number\"\n                type=\"text\"\n                nameAttr=\"kinPhone\"\n                value={kinInfo.phoneNo}\n                changed={(val) => {\n                  setKinErrors({ ...kinErrors, phoneNo: null })\n                  setKinInfo({ ...kinInfo, phoneNo: val})\n                }}\n                error={kinErrors.phoneNo && kinErrors.phoneNo}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                label=\"Residential Address\"\n                type=\"text\"\n                nameAttr=\"kinAddress\"\n                placeholder=\"Street address to the nearest bus stop\"\n                value={kinInfo.address}\n                changed={(val) => {\n                  setKinErrors({ ...kinErrors, address: null })\n                  setKinInfo({ ...kinInfo, address: val})\n                }}  \n                error={kinErrors.address && kinErrors.address}\n              />\n            </Col>\n          </Row>\n        </div>\n      </Modal.Body>\n      <Modal.Footer className={styles.body}>\n        <Button \n          className=\"mt-4\" \n          clicked={addNextOfKin} \n          fullWidth \n          bgColor=\"#741763\" \n          size=\"lg\" \n          color=\"#EBEBEB\"\n        >\n          Save & Continue\n        </Button>\n      </Modal.Footer>\n    </>\n  )\n}\n\nexport const BankInfo = ({ submit }) => {\n\n  const { state: { loading } } = useContext(UserContext);\n\n  const [bankInfo, setBankInfo] = useState({\n    bankName: '',\n    accountType: '',\n    accountNumber: '',\n    accountName: ''\n  });\n\n  const [bankInfoErrors, setBankInfoErrors] = useState({\n    bankName: null,\n    accountType: null,\n    accountNumber: null,\n    accountName: null\n  });\n\n  const { \n    state: { bankList, userBankDetails, bankLoading }, \n    getBankList,\n    verifyBankInfo\n  } = useContext(BankContext);\n\n  useEffect(() => {\n      getBankList();\n  }, []);\n\n  const bankNames = useMemo(() => {\n    return bankList ? \n      bankList.map((bank) => bank.name) :\n      []\n  }, [bankList]);\n\n  useEffect(() => {\n    if(bankInfo.accountNumber.length === 10 && bankInfo.bankName) {\n      const bank = bankList.find(bank => bank.name.toLowerCase() === bankInfo.bankName);\n      const bankCode = bank.code;\n      console.log(bankCode)\n      verifyBankInfo(bankInfo.accountNumber, bankCode)\n    }\n  }, [bankInfo.accountNumber, bankInfo.bankName])\n\n\n  useEffect(() => {\n    console.log(userBankDetails);\n    if(userBankDetails) {\n      setBankInfo({ ...bankInfo, accountName: userBankDetails.account_name })\n    }\n  }, [userBankDetails]);\n\n  const addBankInfo = () => {\n    const validated = validateInput(bankInfo, setBankInfoErrors);\n    if(validated) {\n      submit(bankInfo);\n    }\n  }\n\n  return(\n    <>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <h2 className={styles.headerText}>Bank Info</h2>\n          <p className={styles.subtitle}>Add a bank account where we can send investment proceeds or loan requests to.</p>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div className={styles.body}>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                type=\"select\"\n                label=\"Bank\"\n                options={bankNames}\n                nameAttr=\"bank\"\n                value={bankInfo.bankName}\n                changed={(val) => {\n                  setBankInfoErrors({ ...bankInfoErrors, bankName: null })\n                  setBankInfo({ ...bankInfo, bankName: val})\n                }}\n                error={bankInfoErrors.bankName && bankInfoErrors.bankName}\n              />\n            </Col>\n            <Col>\n              <InputField \n                label=\"Account Type\"\n                type=\"select\"\n                options={[\"Savings\", \"Current\"]}\n                nameAttr=\"acountType\"\n                value={bankInfo.accountType}\n                changed={(val) => {\n                  setBankInfoErrors({ ...bankInfoErrors, accountType: null })\n                  setBankInfo({ ...bankInfo, accountType: val})\n                }}\n                error={bankInfoErrors.accountType && bankInfoErrors.accountType}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                type=\"text\"\n                label=\"Account Number\"\n                nameAttr=\"accountNo\"\n                value={bankInfo.accountNumber}\n                changed={(val) => {\n                  setBankInfoErrors({ ...bankInfoErrors, accountNumber: null })\n                  setBankInfo({ ...bankInfo, accountNumber: val})\n                }}\n                error={bankInfoErrors.accountNumber && bankInfoErrors.accountNumber}\n              />\n            </Col>\n            <Col>\n              { !bankLoading ? <InputField \n                label=\"Account Name\"\n                type=\"text\"\n                nameAttr=\"accountName\"\n                value={bankInfo.accountName}\n                changed={(val) => {\n                  setBankInfoErrors({ ...bankInfoErrors, accountName: null })\n                  setBankInfo({ ...bankInfo, accountName: val})\n                }}\n                error={bankInfoErrors.accountName && bankInfoErrors.accountName}\n              /> : \n              <div className={styles.loaderWrapper}>\n                <BeatLoader color=\"#741763\" size={10} />\n              </div>\n              }\n            </Col>\n          </Row>\n        </div>\n      </Modal.Body>\n      <Modal.Footer className={styles.body}>\n        <Button \n          className=\"mt-4\" \n          clicked={addBankInfo} \n          fullWidth \n          loading={loading}\n          disabled={loading}\n          bgColor=\"#741763\" \n          size=\"lg\" \n          color=\"#EBEBEB\"\n        >\n          Save & Continue\n        </Button>\n      </Modal.Footer>\n    </>\n  )\n}\n\nexport const IdentityForm = ({ submit }) => {\n\n  const { state: { loading } } = useContext(UserContext);\n  const idFileRef = useRef();\n  const passportFileRef= useRef();\n\n  const [idType, setIdType] = useState('');\n\n  const addIdentityInfo = () => {\n    if(idFileRef.current.files.length > 0) {\n      if(passportFileRef.current.files.length > 0) {\n        if(idType) {\n          const idFile = idFileRef.current.files[0];\n          const passportFile = passportFileRef.current.files[0];\n          submit(idFile, passportFile, idType);\n        }\n      } else {\n        toast.error(\"Please upload a passport photograph of yourself\")\n      }\n    } else {\n      toast.error(\"Please upload a verified identification card\")\n    }\n  }\n\n  return (\n    <>\n      <ToastContainer position=\"top-center\" />\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <h2 className={styles.headerText}>Identity</h2>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div className={styles.body}>\n          <div className={styles.validId}>\n            <p className={styles.validID}>Upload a valid government issued Identification</p>\n            <InputField \n              type=\"select\"\n              options={['International Passport', \"Driver's License\", 'Voters Card', 'National Identity Card']}\n              nameAttr=\"identityType\"\n              value={idType}\n              changed={(val) => setIdType(val)}\n            />\n            <FileUploadButton \n              label=\"Choose File\" \n              icon={<FaCloudUploadAlt className=\"ml-3\" size=\"1.1em\" />}\n              id=\"id-upload\" \n              className=\"mt-3\"\n              fileRef={idFileRef}\n              fullwidth\n            />\n          </div>\n          <div className={styles.passportVerify}>\n            <p className={styles.passportImg}>Please upload a clear and resent passport photograph.</p>\n            <FileUploadButton \n              label=\"Choose File\" \n              icon={<FaCloudUploadAlt className=\"ml-3\" size=\"1.1em\" />}\n              id=\"passport-upload\"  \n              fileRef={passportFileRef}\n              fullwidth\n            />\n          </div>\n        </div>\n      </Modal.Body>\n      <Modal.Footer className={styles.body}>\n        <Button \n          className=\"mt-4\" \n          clicked={addIdentityInfo} \n          fullWidth \n          loading={loading}\n          disabled={loading}\n          bgColor=\"#741763\" \n          size=\"lg\" \n          color=\"#EBEBEB\"\n        >\n          Save & Continue\n        </Button>\n      </Modal.Footer>\n    </>\n  )\n}\n\n\nexport const OnboardSuccess = ({ close }) => {\n\n  useEffect(() => {\n    setTimeout(() => {\n      close();\n    }, 3000);\n  }, []);\n\n  return (\n    <>\n      <Modal.Body>\n        <div className={styles.onboard}>\n          <FaCheckCircle size=\"4em\" color=\"#741763\" />\n          <h4>User successfully onboarded.</h4>\n          <Button\n            className=\"mt-4\" \n            clicked={close} \n            bgColor=\"#741763\" \n            size=\"sm\" \n            color=\"#EBEBEB\"\n          >\n            Continue\n          </Button>\n        </div>\n      </Modal.Body>\n    </>\n  )\n}","/home/tga/Desktop/gypsy-capital/src/api/gypsy-web.js",[],"/home/tga/Desktop/gypsy-capital/src/routes/pageUrl.js",[],"/home/tga/Desktop/gypsy-capital/src/context/BankCotext.js",[],"/home/tga/Desktop/gypsy-capital/src/context/RepaymentContext.js",[],"/home/tga/Desktop/gypsy-capital/src/pages/SignIn/SignIn.jsx",["399"],"import React, { useState, useContext, useEffect } from 'react';\nimport Logo from '../../assets/logo.png';\nimport styles from './SignIn.module.scss';\nimport { Row, Col } from 'react-bootstrap';\nimport InputField from '../../components/InputField/InputField';\nimport Button from '../../components/Button/Button';\nimport pageUrl from '../../routes/pageUrl';\nimport { Link } from 'react-router-dom';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { validateInput } from '../../utils/validateInput';\nimport useNavigateAfterAuth from '../../hooks/useNavigateAfterAuth';\n\n\nconst SignIn = () => {\n\n  const { \n      state: { loading, error }, \n      loginUser, \n      clearErrors \n  } = useContext(AuthContext);\n\n  useEffect(() => {\n    if(error) {\n      toast.error(error);\n      clearErrors();\n    }\n  }, [error])\n\n  const [signinValues, setSigninValues] = useState({\n    email: '',\n    password: ''\n  });\n\n  const [signinErrors, setSigninErrors] = useState({\n    email: null,\n    password: null\n  });\n\n  const [ signinAndNavigate ] = useNavigateAfterAuth(signinValues.email, signinValues.password);\n\n  const handleSubmit = () => {\n    // console.log(signinValues);\n    const validated = validateInput(signinValues, setSigninErrors);\n    // console.log(validated);\n    if(validated) {\n      signinAndNavigate(loginUser);\n    }\n  }\n\n  // useEffect(() => {\n  //   const listener = event => {\n  //     if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n  //       console.log(\"Enter key was pressed. Run your function.\");\n  //       handleSubmit();\n  //     }\n  //   };\n  //   document.addEventListener(\"keydown\", listener);\n  //   return () => {\n  //     document.removeEventListener(\"keydown\", listener);\n  //   };\n  // }, []);\n\n  return (\n    <div className={styles.container}>\n      <ToastContainer position=\"top-center\" />\n      <Link to={pageUrl.HOMEPAGE}><img src={Logo} alt=\"Gypsy Logo\" /></Link>\n      <h1>Login to your account</h1>\n      <div className={styles.loginBox}>\n        <Row>\n          <Col>\n            <InputField \n              type=\"email\"\n              label=\"Email\"\n              nameAttr=\"email\"\n              value={signinValues.email}\n              changed={(val) => {\n                setSigninErrors({ ...signinErrors, email: null })\n                setSigninValues({ ...signinValues, email: val })\n              }}\n              error={signinErrors.email && signinErrors.email}\n            />\n          </Col>\n        </Row>\n        <Row className=\"mt-3\">\n          <Col>\n            <InputField \n              type=\"password\"\n              label=\"Password\"\n              nameAttr=\"password\"\n              value={signinValues.password}\n              changed={(val) => {\n                setSigninErrors({ ...signinErrors, password: null })\n                setSigninValues({ ...signinValues, password: val })\n              }}\n              error={signinErrors.password && signinErrors.password}\n            />\n          </Col>\n        </Row>\n        <p className={styles.resetPassword}>\n          <Link to=\"/password/email\">Forgot password?</Link>\n        </p>\n        <Button \n          clicked={handleSubmit} \n          fullWidth \n          className=\"mt-4\" \n          bgColor=\"#741763\" \n          size=\"lg\" \n          color=\"#EBEBEB\"\n          disabled={loading}\n          loading={loading}\n        >\n          Login\n        </Button>\n        <p className={[styles.authLink, 'mt-3'].join(' ')}>\n          Don’t have an account? <Link to={pageUrl.SIGNUP_PAGE}>Register</Link>\n        </p>\n      </div>\n    </div>\n  );\n}\n\n\nexport default SignIn;","/home/tga/Desktop/gypsy-capital/src/pages/OtpVerify/OtpVerify.jsx",["400"],"import React, { useContext, useEffect, useState } from 'react';\nimport styles from './OtpVerify.module.scss';\nimport Logo from '../../assets/logo.png';\nimport { Row, Col } from 'react-bootstrap';\nimport InputField from '../../components/InputField/InputField';\nimport Button from '../../components/Button/Button';\nimport { Link } from 'react-router-dom';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport { ToastContainer, toast } from 'react-toastify';\n\nconst OtpVerify = () => {\n\n  const [otp, setOtp] = useState('');\n  const [validationErr, setValidationErr] = useState(null);\n\n  const { \n      state: { error, loading, message, user }, \n      verifyOtp, \n      getActiveUser, \n      resendOtp,\n      clearErrors \n  } = useContext(AuthContext);\n\n  useEffect(() => {\n    if(error) {\n      toast.error(error);\n      clearErrors();\n    }\n  }, [error])\n\n  useEffect(() => {\n    if(message) {\n      toast.success(message);\n    }\n  }, [message])\n\n  const handleSubmit = () => {\n    if(!otp) {\n      setValidationErr('You need to enter your otp to verify your account')\n    } else {\n      verifyOtp(otp, user.email, getActiveUser);\n    }\n  }\n\n  const resendCode = () => {\n    resendOtp(user.email);\n  }\n\n  return(\n    <div className={styles.container}>\n      <img src={Logo} alt=\"Gypsy Logo\" />\n      <h1>Verify Your Details</h1>\n      <p>Please enter the OTP sent to your email to continue</p>\n      <div className={styles.verifyBox}>\n        <ToastContainer position=\"top-center\" />\n        <Row>\n          <Col>\n            <InputField \n              type=\"text\"\n              label=\"One Time Password\"\n              nameAttr=\"otp\"\n              value={otp}\n              changed={(val) => {\n                setValidationErr(null)\n                setOtp(val)\n              }}\n              error={validationErr && validationErr}\n            />\n          </Col>\n        </Row>\n        <Button \n          clicked={handleSubmit} \n          fullWidth \n          className=\"mt-4\" \n          bgColor=\"#741763\" \n          size=\"lg\" \n          color=\"#EBEBEB\"\n          disabled={loading}\n          loading={loading}\n        >\n          Verify Code\n        </Button>\n        <p className={[styles.authLink, 'mt-3'].join(' ')}>\n          Didn’t receive code? <Link onClick={resendCode}>Resend OTP</Link>\n        </p>\n      </div>\n    </div>\n  )\n}\n\n\nexport default OtpVerify;","/home/tga/Desktop/gypsy-capital/src/pages/Profile/Profile.jsx",["401","402","403"],"/home/tga/Desktop/gypsy-capital/src/pages/ClientDetails/ClientDetails.jsx",["404","405","406","407","408","409","410"],"import React, { useContext, useEffect, useState, useMemo } from 'react';\nimport styles from './ClientDetails.module.scss';\nimport Dashboard from '../../components/Dashboard/Dashboard';\nimport { routes } from '../../routes/sidebarRoutes';\nimport { useLocation, useParams, Link } from 'react-router-dom';\nimport InputField from '../../components/InputField/InputField';\nimport { Row, Col, Table, Pagination } from 'react-bootstrap';\nimport NavTabs from '../../components/NavTabs/NavTabs';\nimport Button from '../../components/Button/Button';\nimport LoanModal from '../../components/LoanModal/LoanModal';\nimport { Context as UserContext } from '../../context/UserContext';\nimport { Context as LoanContext } from '../../context/LoanContext';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport Loader from '../../components/Loader/Loader';\nimport usePagination from '../../hooks/usePagination';\nimport { numberWithCommas } from '../../utils/nigeriaStates';\nimport { TiCancelOutline } from 'react-icons/ti';\nimport useLoanDetails from '../../hooks/useLoanDetails';\nimport _ from 'lodash';\n\n\nexport const Biodata = ({ data, userId }) => {\n\n  const [ loanDeets ] = useLoanDetails(userId);\n\n  const [biodata, setBiodata] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    gender: \"\",\n    dateOfBirth: \"\",\n    emailAddress: \"\",\n    phoneNumber: \"\",\n    altPhoneNumber: \"\",\n    residentialAddress: \"\",\n  });\n\n  const [residentialStatus, setResidentialStatus] = useState('');\n\n  useEffect(() => {\n    if(data) {\n      setBiodata({\n        ...biodata,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        gender: _.capitalize(data.gender),\n        dateOfBirth: data.DOB,\n        emailAddress: data.email,\n        phoneNumber: data.phoneNumber.replace('234', '0'),\n        altPhoneNumber: data.alternativePhoneNumber,\n        residentialAddress: `${data.street}, ${_.capitalize(data.state)}`,\n        // residentialStatus: data\n      })\n    }\n  }, [data]);\n\n  useEffect(() => {\n    if(loanDeets) {\n      setResidentialStatus(_.capitalize(loanDeets?.residence[0]?.residentialStatus))\n    }\n  }, [loanDeets])\n\n  return (\n    <>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"First Name\"\n            nameAttr=\"firstName\"\n            value={biodata.firstName}\n            disable={true}\n          />\n        </Col>\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Last Name\"\n            nameAttr=\"lastName\"\n            value={biodata.lastName}\n            disable={true}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Gender\"\n            nameAttr=\"gender\"\n            value={biodata.gender}\n            disable={true}\n          />\n        </Col>\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Date of Birth\"\n            nameAttr=\"dob\"\n            value={biodata.dateOfBirth}\n            disable={true}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            type=\"email\"\n            label=\"Email Address\"\n            nameAttr=\"emailAddress\"\n            value={biodata.emailAddress}\n            disable={true}\n          />\n        </Col>\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Phone Number\"\n            nameAttr=\"phoneNo\"\n            value={biodata.phoneNumber}\n            disable={true}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Residential Status\"\n            nameAttr=\"residentStatus\"\n            value={   residentialStatus}\n            disable={true}\n          />\n        </Col>\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Alternative Phone Number\"\n            nameAttr=\"altPhoneNo\"\n            value={biodata.altPhoneNumber}\n            disable={true}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Residential Address\"\n            nameAttr=\"homeAddress\"\n            value={biodata.residentialAddress}\n            disable={true}\n          />\n        </Col>\n      </Row>\n    </>\n  )\n}\n\n\nexport const NextOfKin = ({ data }) => {\n\n  const [nextOfKin, setNextOfKin] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    relationship: \"\" ,\n    phoneNumber: \"\",\n    residentialAddress: \"\"\n  });\n\n  useEffect(() => {\n\n    if(data) {\n      const names = data.fullName?.split(' ');\n\n      setNextOfKin({\n        ...nextOfKin,\n        firstName: names[0],\n        lastName: names[names.length - 1],\n        relationship: data.relationship,\n        phoneNumber: data.phoneNumber,\n        residentialAddress: data.residentialAddress\n      })\n    }\n  }, [data])\n\n  return (\n    <>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"First Name\"\n            nameAttr=\"firstName\"\n            value={nextOfKin.firstName}\n            disable={true}\n          />\n        </Col>\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Last Name\"\n            nameAttr=\"lastName\"\n            value={nextOfKin.lastName}\n            disable={true}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Relationship\"\n            nameAttr=\"relationship\"\n            value={nextOfKin.relationship}\n            disable={true}\n          />\n        </Col>\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Phone Number\"\n            nameAttr=\"phoneNo\"\n            value={nextOfKin.phoneNumber}\n            disable={true}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Residential Address\"\n            nameAttr=\"kinAddress\"\n            value={nextOfKin.residentialAddress}\n            disable={true}\n          />\n        </Col>\n      </Row>\n    </>\n  )\n}\n\n\nexport const Bank = ({ data, userId }) => {\n\n  const [disburseBank, setDisburseBank] = useState({\n    bankName: \"\",\n    accountType: \"\",\n    accountNumber: \"\",\n    accountName: \"\"\n  });\n\n  const [salaryBank, setSalaryBank] = useState({\n    bankName: \"\",\n    accountType: \"\",\n    accountNumber: \"\",\n    accountName: \"\"\n  });\n\n  const [ loanDeets ] = useLoanDetails(userId);\n\n  useEffect(() => {\n    if(data) {\n      console.log(data);\n      setDisburseBank({\n        ...disburseBank,\n        bankName: _.startCase(data.bankName),\n        accountType: _.capitalize(data.accountType),\n        accountNumber: data.accountNumber,\n        accountName: data.accountName\n      })\n    }\n  }, [data])\n\n  useEffect(() => {\n    if(loanDeets) {\n      setSalaryBank({\n        ...salaryBank,\n        bankName: _.startCase(loanDeets?.bank[0]?.bank),\n        accountType: _.capitalize(loanDeets?.bank[0]?.accountType),\n        accountNumber: loanDeets?.bank[0]?.accountNumber,\n        accountName: loanDeets?.bank[0]?.accountName\n      })\n    }\n  }, [loanDeets])\n\n  return (\n    <>\n      <div className={styles.disburse}>\n        <h3>Disbursement Account</h3>\n        <Row className=\"mb-4\">\n          <Col>\n            <InputField \n              type=\"text\"\n              label=\"Bank Name\"\n              nameAttr=\"bankName\"\n              value={disburseBank.bankName}\n              disable={true}\n            />\n          </Col>\n          <Col>\n            <InputField \n              type=\"text\"\n              label=\"Account Type\"\n              nameAttr=\"accountType\"\n              value={disburseBank.accountType}\n              disable={true}\n            />\n          </Col>\n        </Row>\n        <Row className=\"mb-4\">\n          <Col>\n            <InputField \n              type=\"text\"\n              label=\"Account Number\"\n              nameAttr=\"accountNumber\"\n              value={disburseBank.accountNumber}\n              disable={true}\n            />\n          </Col>\n          <Col>\n            <InputField \n              type=\"text\"\n              label=\"Account Name\"\n              nameAttr=\"accountName\"\n              value={disburseBank.accountName}\n              disable={true}\n            />\n          </Col>\n        </Row>\n      </div>\n      <div className={styles.salary}>\n        <h3>Salary Account</h3>\n        <Row className=\"mb-4\">\n          <Col>\n            <InputField \n              type=\"text\"\n              label=\"Bank Name\"\n              nameAttr=\"salaryBank\"\n              value={salaryBank.bankName}\n              disable={true}\n            />\n          </Col>\n          <Col>\n            <InputField \n              type=\"text\"\n              label=\"Account Type\"\n              nameAttr=\"salaryAcctType\"\n              value={salaryBank.accountType}\n              disable={true}\n            />\n          </Col>\n        </Row>\n        <Row className=\"mb-4\">\n          <Col>\n            <InputField \n              type=\"text\"\n              label=\"Account Number\"\n              nameAttr=\"salaryAcctNum\"\n              value={salaryBank.accountNumber}\n              disable={true}\n            />\n          </Col>\n          <Col>\n            <InputField \n              type=\"text\"\n              label=\"Account Name\"\n              nameAttr=\"salaryAcctName\"\n              value={salaryBank.accountName}\n              disable={true}\n            />\n          </Col>\n        </Row>\n      </div>\n    </>\n  )\n}\n\n\nexport const Employer = ({ userId }) => {\n\n  const [employerInfo, setEmployerInfo] = useState({\n    employerName: '',\n    employmentDate: '',\n    employmentSector: '',\n    employmentType: '',\n    officialEmail: ''\n  });\n\n  const [OfficeAddress, setOfficeAddress] = useState({\n    street: '',\n    city: '',\n    state: '',\n    lga: ''\n  })\n\n  const [ loanDeets ] = useLoanDetails(userId)\n\n  useEffect(() => {\n    if(loanDeets) {\n      setEmployerInfo({\n        ...employerInfo,\n        employerName: loanDeets?.employment[0]?.employerName,\n        employmentDate: loanDeets?.employment[0]?.resumptionDate,\n        employmentSector: _.capitalize(loanDeets?.employment[0]?.sector),\n        employmentType: _.capitalize(loanDeets?.employment[0]?.employmentType),\n        officialEmail: loanDeets?.employment[0]?.officialEmail\n      })\n      setOfficeAddress({\n        ...OfficeAddress,\n        street: loanDeets?.employment[0]?.street,\n        city: loanDeets?.employment[0]?.city,\n        state: _.capitalize(loanDeets?.employment[0]?.state),\n        lga: _.capitalize(loanDeets?.employment[0]?.city),\n      })\n    }\n  }, [loanDeets])\n\n  return (\n    <>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Employer Name\"\n            nameAttr=\"employerName\"\n            disable={true}\n            value={employerInfo.employerName}\n          />\n        </Col>\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Employment Date\"\n            nameAttr=\"employmentDate\"\n            disable={true}\n            value={employerInfo.employmentDate}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Employment Sector\"\n            nameAttr=\"employmentSector\"\n            disable={true}\n            value={employerInfo.employmentSector}\n          />\n        </Col>\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Employment Type\"\n            nameAttr=\"employmentType\"\n            disable={true}\n            value={employerInfo.employmentType}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Office Email Address\"\n            nameAttr=\"officeEmail\"\n            disable={true}\n            value={employerInfo.officialEmail}\n          />\n        </Col>\n      </Row>\n      <div className={styles.officeAddress}>\n        <h3>Office Address</h3>\n        <Row className=\"mb-4\">\n          <Col>\n            <InputField \n              type=\"text\"\n              label=\"Street Address\"\n              nameAttr=\"streetAddress\"\n              disable={true}\n              value={OfficeAddress.street}\n            />\n          </Col>\n        </Row>\n        <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"City\"\n            nameAttr=\"city\"\n            disable={true}\n            value={OfficeAddress.city}\n          />\n        </Col>\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"State\"\n            nameAttr=\"state\"\n            disable={true}\n            value={OfficeAddress.state}\n          />\n        </Col>\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Local Government Area\"\n            nameAttr=\"lga\"\n            disable={true}\n            value={OfficeAddress.lga}\n          />\n        </Col>\n      </Row>\n      </div>\n    </>\n  )\n}\n\n\nexport const ClientLoan = ({ userId, canApply, userRole }) => {\n\n  const [modalOpen, setModalOpen] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(5);\n\n  const closeModal = () => {\n    setModalOpen(false);\n  }\n\n  const { state: { loans }, retrieveClientLoans } = useContext(LoanContext);\n\n  useEffect(() => {\n    retrieveClientLoans();\n  }, []);\n\n  const clientLoans = useMemo(() => {\n    return loans.filter((loan) => loan.userId === userId)\n  }, [loans, userId]);\n\n  useEffect(() => {\n    console.log(loans);\n  }, [loans])\n\n  const { \n    currentList, \n    items, \n    goToNextPage, \n    goToPrevPage \n  } = usePagination(currentPage, postsPerPage, clientLoans, setCurrentPage, styles)\n\n  const startApply = () => {\n    setModalOpen(true);\n  }\n\n  return (\n    <div className={styles.loanTable}>\n      { canApply && <Button\n        size=\"sm\" \n        clicked={startApply}\n        bgColor=\"#741763\" \n        color=\"#fff\"\n        className={styles.btn}\n      >\n        Apply for a Loan\n      </Button>}\n      <div className={styles.tableCard}>\n        <Table className={styles.table}>\n          <thead>\n            <tr>\n              <th>Loan ID</th>\n              <th>Monthly Repayment</th>\n              <th>Tenure</th>\n              <th>Status</th>\n              <th>Repayment Source</th>\n              <th>Loan Amount</th>\n              <th>Balance</th>\n            </tr>\n          </thead>\n          { currentList && currentList.length > 0 ? <tbody>\n            { currentList && currentList.map((loan) => {\n              return (\n                <tr>\n                  <td className={styles.loanId}>\n                    <Link to={`/${userRole}/loan/${loan._id}`}>\n                      {loan._id.slice(0, 6)}\n                    </Link>\n                  </td>\n                  <td>{`N${numberWithCommas(loan.monthlyRepayment)}`}</td>\n                  <td>{loan.paymentPeriod}</td>\n                  <td>{_.capitalize(loan.status)}</td>\n                  <td>Salary</td>\n                  <td>{`N${numberWithCommas(loan.amount)}`}</td>\n                  <td>_____</td>\n                </tr>\n              )\n            })}\n          </tbody> : null }\n        </Table>\n        { currentList && currentList.length === 0 ? <div className={styles.nullList}>\n            <TiCancelOutline size=\"6em\" color=\"rgba(116, 23, 99, 0.6)\" />\n          </div> : null }\n        { currentList && currentList.length > 0 ? <div className={styles.tableFooter}>\n          <div className={styles.rowsInput}>\n            <p>Rows per page: </p>\n            <select onChange={(e) => setPostsPerPage(Number(e.currentTarget.value))}>\n              <option value={5} selected>5</option>\n              <option value={10}>10</option>\n              <option value={15}>15</option>\n              <option value={20}>20</option>\n              <option value={10}>25</option>\n              <option value={30}>30</option>\n            </select>\n          </div>\n          <Pagination className={styles.pagination}>\n            <Pagination.Prev onClick={goToPrevPage}/>\n            {items}\n            <Pagination.Next onClick={goToNextPage} />\n          </Pagination>\n        </div> : null }\n      </div>\n      <LoanModal userId={userId} openState={modalOpen} closeHandler={closeModal} />\n    </div>\n  )\n}\n\n\nconst ClientDetails = () => {\n\n  const salesRoute = routes[1];\n  const location = useLocation();\n  const { clientId } = useParams();\n\n  const { \n    state: { userDetails, detailStatus }, \n    getClientDetails,\n    clearErrors\n  } = useContext(UserContext);\n\n  const { state: { user } } = useContext(AuthContext);\n  useEffect(() => {\n    getClientDetails(clientId);\n\n    return () => {\n      console.log('cleanup')\n      clearErrors();\n    }\n  }, [])\n\n  // console.log(userDetails)\n\n\n  const [detailSection, setDetailSection] = useState('biodata');\n\n  const navArray = [\n    {\n      title: \"Biodata\",\n      shortlink: \"biodata\"\n    },\n    {\n      title: \"Next of Kin Info\",\n      shortlink: \"kin\"\n    },\n    {\n      title: \"Bank Info\",\n      shortlink: \"bank\"\n    },\n    {\n      title: \"Employment Info\",\n      shortlink: \"employ\"\n    },\n    {\n      title: \"Loans\",\n      shortlink: \"loans\"\n    },\n  ]\n\n  const setActiveTab = (link) => {\n    setDetailSection(link);\n  }\n\n  return (\n    <Dashboard sidebarRoutes={salesRoute} location={location}>\n      <NavTabs navs={navArray} setActive={setActiveTab} currentTab={detailSection} />\n      { userDetails || !detailStatus  ? \n        <div className={detailSection !== \"loans\" && styles.detailFields}>\n          { detailSection === \"biodata\" && <Biodata data={userDetails && {...userDetails.bioData, ...userDetails.residence}} userId={userDetails?.clientId} /> }\n          { detailSection === \"kin\" && <NextOfKin data={userDetails && { ...userDetails.nextOfKin }} /> }\n          { detailSection === \"bank\" && <Bank data={userDetails && { ...userDetails.bank }} userId={userDetails?.clientId} /> }\n          { detailSection === \"employ\" && <Employer userId={userDetails?.clientId} /> }\n          { detailSection === \"loans\" && <ClientLoan userId={userDetails && userDetails.clientId} canApply={true} userRole={`${user.role}-agent`} /> }\n        </div> :\n        <Loader />\n      }\n    </Dashboard>\n  )\n}\n\n\nexport default ClientDetails;","/home/tga/Desktop/gypsy-capital/src/pages/LoanDetail/LoanDetail.jsx",["411","412","413","414"],"import React, { useContext, useEffect, useState, useMemo } from 'react';\nimport styles from './LoanDetail.module.scss';\nimport { useLocation, useParams, Link } from 'react-router-dom';\nimport { routes } from '../../routes/sidebarRoutes';\nimport Dashboard from '../../components/Dashboard/Dashboard';\nimport NavTabs from '../../components/NavTabs/NavTabs';\nimport { Row, Col, Table } from 'react-bootstrap';\nimport { Context as LoanContext } from '../../context/LoanContext';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport { Context as RepaymentContext } from '../../context/RepaymentContext';\nimport Loader from '../../components/Loader/Loader';\nimport { numberWithCommas } from '../../utils/nigeriaStates';\nimport moment from 'moment';\nimport _ from 'lodash';\n\n\nexport const BasicInfo = ({ data, userRole }) => {\n\n  const [basicInfo, setBasicInfo] = useState({\n    fullName: '',\n    clientID: '',\n    loanAmount: '',\n    loanID: '',\n    loanTenure: '',\n    monthlyRepayment: '',\n    applicationDate: '',\n    monthlySalary: '',\n    dti: '',\n  });\n\n  useEffect(() => {\n    if(data) {\n      console.log(data)\n      setBasicInfo({\n        ...basicInfo,\n        fullName: `${_.capitalize(data.client.firstName)} ${_.capitalize(data.client.lastName)}`,\n        clientID: data.userId,\n        loanAmount: `N${numberWithCommas(data.amount)}`,\n        loanID: `#${data._id}`,\n        loanTenure: data.paymentPeriod,\n        monthlyRepayment: `N${numberWithCommas(data.monthlyRepayment)}`,\n        applicationDate: moment(data.createdAt).format('lll'),\n        monthlySalary: `N${numberWithCommas(data.monthlySalary)}`,\n        dti: `${data?.DTI || '33'}%`\n      })\n    }\n  }, [data])\n\n  const detailRoutePrefix = useMemo(() => {\n    if(userRole === \"sales\") {\n      return \"sales-agent\"\n    } else {\n      return userRole\n    }\n  }, [userRole])\n\n  if(!data) {\n    return <Loader />\n  }\n\n  return (\n    <div className={styles.basicInfo}>\n      <Row className=\"mb-5\">\n        <Col>\n          <h6>Client Name</h6>\n          <h4>{basicInfo.fullName}</h4>\n        </Col>\n        <Col>\n          <h6>Client ID</h6>\n          <h4>\n            <Link to={`/${detailRoutePrefix}/client/${basicInfo.clientID}`}>\n              {basicInfo.clientID.slice(0,6)}\n            </Link>\n          </h4>\n        </Col>\n        <Col>\n          <h6>Loan Amount</h6>\n          <h4>{basicInfo.loanAmount}</h4>\n        </Col>\n      </Row>\n      <Row className=\"mb-5\">\n        <Col>\n          <h6>Loan ID</h6>\n          <h4>{basicInfo.loanID.slice(0,6)}</h4>\n        </Col>\n        <Col>\n          <h6>Tenure</h6>\n          <h4>{basicInfo.loanTenure}</h4>\n        </Col>\n        <Col>\n          <h6>Monthly Repayment</h6>\n          <h4>{basicInfo.monthlyRepayment}</h4>\n        </Col>\n      </Row>\n      <Row className=\"mb-5\">\n        <Col>\n          <h6>Application Date</h6>\n          <h4>{basicInfo.applicationDate}</h4>\n        </Col>\n        <Col>\n          <h6>Repayment Source</h6>\n          <h4>Salary</h4>\n        </Col>\n        <Col>\n          <h6>Monthly Salary</h6>\n          <h4>{basicInfo.monthlySalary}</h4>\n        </Col>\n      </Row>\n      <Row className=\"mb-5\">\n        <Col>\n          <h6>DTI</h6>\n          <h4>{basicInfo.dti}</h4>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\n\nconst LoanStatus = ({ data }) => {\n\n  const[loanStatus, setLoanStatus] = useState({\n    status: '',\n    processorDecision: '',\n    processorDecReason: '',\n    processorInCharge: '',\n    processorDecTime: '',\n    adminDecision: '',\n    adminDecReason: '',\n    adminInCharge: '',\n    adminDecTime: ''\n  })\n\n  useEffect(() => {\n    if(data) {\n      setLoanStatus({\n        status: _.capitalize(data.status),\n        processorDecision: data.processorDecision || 'Pending',\n        processorDecReason: data.processorDecisionReason || '_____',\n        processorInCharge: data.processorOfficerInCharge || 'None',\n        processorDecTime: moment.unix(Number(data.processorDecisionTime) / 1000).format('llll') || '_____',\n        adminDecision: data.adminDecision || \"Pending\",\n        adminDecReason: data.adminDecisionReason || '_____',\n        adminInCharge: data.adminOfficerInCharge || 'None',\n        adminDecTime: data.adminDecisionTime || \"______\"\n      })\n    }\n  }, [data]);\n\n  return (\n    <div className={styles.status}>\n      <p>Status: {loanStatus.status}</p>\n      <div className={styles.approvalCard}>\n        <h4>Level 1 Approval</h4>\n        <Table>\n          <thead>\n            <tr>\n              <th>Decision</th>\n              <th>Decision Reason</th>\n              <th>Officer Incharge</th>\n              <th>Decision Time</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{loanStatus.processorDecision}</td>\n              <td>{loanStatus.processorDecReason}</td>\n              <td>{loanStatus.processorInCharge}</td>\n              <td>{loanStatus.processorDecTime}</td>\n            </tr>\n          </tbody>\n        </Table>\n      </div>\n      <div className={styles.approvalCard}>\n        <h4>Level 2 Approval</h4>\n        <Table>\n          <thead>\n            <tr>\n              <th>Decision</th>\n              <th>Decision Reason</th>\n              <th>Officer Incharge</th>\n              <th>Decision Time</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{loanStatus.adminDecision}</td>\n              <td>{loanStatus.adminDecReason}</td>\n              <td>{loanStatus.adminInCharge}</td>\n              <td>{loanStatus.adminDecTime}</td>\n            </tr>\n          </tbody>\n        </Table>\n      </div>\n    </div>\n  )\n}\n\nexport const RepaymentSchedule = ({ data, userRole, loanId }) => {\n\n  const [repaymentArr, setRepaymentArr] = useState(null);\n\n  console.log(userRole);\n  const { state: { loading }, verifyRepaymentStatus } = useContext(RepaymentContext);\n\n  useEffect(() => {\n    verifyRepaymentStatus(loanId);\n  }, [])\n\n  useEffect(() => {\n    if(data) {\n      const paymentPeriod = Number(data.paymentPeriod.split(' ')[0]);\n      // console.log(paymentPeriod);\n      let repaymentTrack = [];\n      let instance = {\n        month: 1,\n        dueDate: 'undecided',\n        status: 'pending',\n        overdueAmount: 0\n      }\n      for(let i=0; i < paymentPeriod; i++) {\n        repaymentTrack.push(instance);\n        instance = {\n          month: instance.month + 1,\n          dueDate: 'undecided',\n          status: 'pending',\n          overdueAmount: 0\n        }\n      }\n      console.log(repaymentTrack);\n      if(data.payments.length === 0) {\n        setRepaymentArr(repaymentTrack);\n      } else {\n        console.log(data)\n        // console.log(data?.payments)\n        setRepaymentArr(data?.payments);\n      }\n    }\n  }, [data]);\n\n  console.log(repaymentArr)\n\n  return (\n    <>\n      { userRole === \"processor\" || userRole === \"authorizer\"  ? <div className={[styles.repayment, \"mb-5\"].join(' ')}>\n        <Table>\n          <thead>\n            <th>Repayment API</th>\n            <th>Monthly Repayment</th>\n            <th>Start Date</th>\n            <th>Status</th>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{_.capitalize(data?.rePaymentAPI)}</td>\n              <td>{`N ${numberWithCommas(data?.monthlyRepayment)}`}</td>\n              <td>{data?.determinedRepaymentDate}</td>\n              <td>{data?.rePaymentAPIstatus ? 'Active' : 'Inactive'}</td>\n            </tr>\n          </tbody>\n        </Table>\n      </div> : null }\n      <div className={styles.repayment}>\n        <Table>\n          <thead> \n            <tr>\n              <th>Months</th>\n              <th>Due Date</th>\n              <th>Status</th>\n              <th>Overdue Amount</th>\n            </tr>\n          </thead>\n          <tbody>\n            { repaymentArr && repaymentArr.map((track, idx) => (\n              <tr key={idx}>\n                <td>{`Month ${track?.month || idx + 1}`}</td>\n                <td>{track?.dueDate || moment(track?.scheduledDate).format('lll')}</td>\n                <td>{track?.status || 'false'}</td>\n                <td>{track?.overdueAmount || `N ${numberWithCommas(track?.scheduledAmount)}`}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </div>\n    </>\n  )\n}\n\nconst LoanDetail = () => {\n\n  const [visibleSection, setVisibleSection] = useState('basic');\n\n  const salesRoute = routes[1];\n  const location = useLocation();\n  const { loanId } = useParams();\n\n  const { state: { loanDetails }, retrieveLoan } = useContext(LoanContext);\n  const { state: { user } } = useContext(AuthContext);\n\n  useEffect(() => {\n    retrieveLoan(loanId);\n  }, []);\n\n\n  const navArray = [\n    {\n      title: \"Basic Info\",\n      shortlink: \"basic\"\n    },\n    {\n      title: \"Status and Underwriting\",\n      shortlink: \"status\"\n    },\n    {\n      title: \"Repayment Schedule\",\n      shortlink: \"repayment\"\n    }\n  ]\n\n  const setActiveTab = (link) => {\n    setVisibleSection(link);\n  }\n\n  return (\n    <Dashboard sidebarRoutes={salesRoute} location={location}>\n      <NavTabs navs={navArray} setActive={setActiveTab} currentTab={visibleSection} />\n      { loanDetails ? <div className={styles.detailFields}>\n        { visibleSection === \"basic\" && \n          <BasicInfo \n            data={ loanDetails ? { \n              client: {...loanDetails.client[0]?.bioData},\n              ...loanDetails.loan, dti: loanDetails[0]?.DTI\n            } : null } \n            userRole={user.role}\n          /> \n        }\n        { visibleSection === \"status\" && \n          <LoanStatus \n            data={ loanDetails ? {\n              ...loanDetails.loan\n            } : null }\n          /> \n        }\n        { visibleSection === \"repayment\" && \n          <RepaymentSchedule \n            data={ loanDetails ? {\n              ...loanDetails.loan,\n              payments: loanDetails.payments\n            } : null }\n            userRole={user.role}\n          /> \n        }\n      </div> : <Loader /> } \n    </Dashboard>\n  )\n}\n\n\nexport default LoanDetail;","/home/tga/Desktop/gypsy-capital/src/pages/ForgotPassword/ForgotPassword.jsx",["415"],"import React, { useContext, useEffect, useState } from 'react';\nimport styles from './ForgotPassword.module.scss';\nimport Logo from '../../assets/logo.png';\nimport InputField from '../../components/InputField/InputField';\nimport Button from '../../components/Button/Button';\nimport { Context as UserContext } from '../../context/UserContext';\nimport { ToastContainer, toast  } from 'react-toastify';\n\n\nconst ForgotPassword = () => {\n\n  const [email, setEmail] = useState('');\n  const { state: { loading, error }, resetPassword, clearErrors } = useContext(UserContext);\n\n  useEffect(() => {\n    if(error) {\n      toast.error(error);\n      clearErrors();\n    }\n  }, [error])\n\n  const initiatePasswordReset = () => {\n    resetPassword(email);\n  }\n\n  return (\n    <div className={styles.container}>\n      <ToastContainer position=\"top-center\" />\n      <img src={Logo} alt=\"Gypsy Logo\" />\n      <h1>Forgot Password?</h1>\n      <p>Enter the email address associated with your account</p>\n      <div className={styles.formBox}>\n        <InputField \n          type=\"email\"\n          label=\"Email\"\n          nameAttr=\"email\"\n          value={email}\n          changed={(val) => setEmail(val)}\n        />\n        <Button\n          fullWidth \n          clicked={initiatePasswordReset}\n          className=\"mt-4\" \n          bgColor=\"#741763\" \n          size=\"lg\" \n          color=\"#EBEBEB\"\n          loading={loading}\n          disabled={loading}\n        >\n          Reset Password\n        </Button>\n      </div>\n    </div>\n  )\n}\n\n\nexport default ForgotPassword;","/home/tga/Desktop/gypsy-capital/src/pages/AuthorizerLoans/AuthorizerLoans.jsx",["416","417"],"import React, { useContext, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Dashboard from '../../components/Dashboard/Dashboard';\nimport LoanList from '../../components/LoanList/LoanList';\nimport { routes } from '../../routes/sidebarRoutes';\nimport styles from './AuthorizerLoans.module.scss';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport { Context as LoanContext } from '../../context/LoanContext';\nimport Loader from '../../components/Loader/Loader';\n\n\nconst AuthorizerLoans = () => {\n\n  const authorizerRoutes = routes[3];\n  const location = useLocation();\n\n  const { state: { user } } = useContext(AuthContext);\n  const { state: { loading, loans }, retrieveClientLoans } = useContext(LoanContext);\n\n  useEffect(() => {\n    retrieveClientLoans();\n  }, [])\n\n  return (\n    <Dashboard sidebarRoutes={authorizerRoutes} location={location}>\n      { !loading ? <LoanList loanList={loans} userRole={user.role} /> : <Loader /> }\n    </Dashboard>\n  )\n}\n\n\nexport default AuthorizerLoans;","/home/tga/Desktop/gypsy-capital/src/pages/ResetSuccess/ResetSuccess.jsx",[],"/home/tga/Desktop/gypsy-capital/src/routes/sidebarRoutes.js",["418"],"import pageUrl from './pageUrl';\nimport { FiLayers } from 'react-icons/fi';\nimport { BiCreditCard } from 'react-icons/bi';\nimport { AiOutlineUser } from 'react-icons/ai';\nimport { GiTakeMyMoney, GiMoneyStack } from 'react-icons/gi';\nimport { FaUser } from 'react-icons/fa';\nimport { BiSupport } from 'react-icons/bi';\nimport { RiUser3Fill } from 'react-icons/ri';\n\n\nexport const clientRoutes = [\n  {\n      label: \"Dashboard\",\n      link: pageUrl.DASHBOARD_HOMEPAGE,\n      rootLink: pageUrl.DASHBOARD_HOMEPAGE,\n      icon: FiLayers\n    },\n    {\n      label: \"Consumer Credit\",\n      link: '/dashboard/consumer-credit/history',\n      rootLink: pageUrl.CONSUMER_CREDIT_PAGE,\n      icon: GiTakeMyMoney\n    },\n    {\n      label: \"Credit Report\",\n      link: pageUrl.CREDIT_REPORT_PAGE,\n      rootLink: pageUrl.CREDIT_REPORT_PAGE,\n      icon: BiCreditCard\n    },\n    {\n      label: \"Profile\",\n      link: pageUrl.PROFILE_PAGE,\n      rootLink: pageUrl.PROFILE_PAGE,\n      icon: AiOutlineUser\n    },\n]\n\n\nconst salesRoutes = [\n  {\n    label: \"Dashboard\",\n    link: pageUrl.SALES_AGENT_OVERVIEW,\n    rootLink: pageUrl.SALES_AGENT_OVERVIEW,\n    icon: FiLayers\n  },\n  {\n    label: \"Clients\",\n    link: pageUrl.CLIENT_LIST_PAGE,\n    rootLink: '/sales-agent/client',\n    icon: FaUser\n  },\n  {\n    label: \"Loans\",\n    link: pageUrl.LOAN_LIST_PAGE,\n    rootLink: '/sales-agent/loan',\n    icon: GiMoneyStack\n  }, \n  {\n    label: \"Support\",\n    link: pageUrl.SUPPORT_PAGE,\n    rootLink: pageUrl.SUPPORT_PAGE,\n    icon: BiSupport\n  }\n]\n\n\nconst processorRoutes = [\n  {\n    label: \"Dashboard\",\n    link: pageUrl.PROCESSORS_DASHBOARD,\n    rootLink: pageUrl.PROCESSORS_DASHBOARD,\n    icon: FiLayers\n  },\n  {\n    label: \"Clients\",\n    link: pageUrl.PROCESSORS_CLIENTS_PAGE,\n    rootLink: '/processor/client',\n    icon: FaUser\n  },\n  {\n    label: \"Loans\",\n    link: pageUrl.PROCESSORS_LOANS_PAGE,\n    rootLink: '/processor/loan',\n    icon: GiMoneyStack\n  }, \n  {\n    label: \"Support\",\n    link: pageUrl.SUPPORT_PAGE,\n    rootLink: pageUrl.SUPPORT_PAGE,\n    icon: BiSupport\n  }\n]\n\nconst authorizerRoutes = [\n  {\n    label: \"Dashboard\",\n    link: pageUrl.AUTHORIZER_OVERVIEW,\n    rootLink: pageUrl.AUTHORIZER_OVERVIEW,\n    icon: FiLayers\n  },\n  {\n    label: \"Clients\",\n    link: pageUrl.AUTHORIZER_CLIENTS,\n    rootLink: '/authorizer/client',\n    icon: FaUser\n  },\n  {\n    label: \"Loans\",\n    link: pageUrl.AUTHORIZER_LOANS,\n    rootLink: '/authorizer/loan',\n    icon: GiMoneyStack\n  }, \n  {\n    label: \"Support\",\n    link: pageUrl.SUPPORT_PAGE,\n    rootLink: pageUrl.SUPPORT_PAGE,\n    icon: BiSupport\n  }\n]\n\n\nexport const routes = [\n  clientRoutes,\n  salesRoutes,\n  processorRoutes,\n  authorizerRoutes\n]","/home/tga/Desktop/gypsy-capital/src/hooks/useNavigateAfterAuth.js",["419"],"import { useContext, useEffect } from 'react';\nimport { Context as AuthContext } from '../context/AuthContext';\nimport history from '../utils/history';\nimport pageUrl from '../routes/pageUrl';\n\n\nexport default (email, password) => {\n  const { state: { user }, getActiveUser } = useContext(AuthContext);\n\n  useEffect(() => {\n    if(user?.role && user.role === \"client\") {\n      history.push(pageUrl.DASHBOARD_HOMEPAGE)\n    } else if(user?.role && user.role === \"admin\") {\n      history.push(pageUrl.PROCESSORS_DASHBOARD)\n    } else if(user?.role && user.role === \"sales\") {\n      history.push(pageUrl.SALES_AGENT_OVERVIEW)\n    } else if(user?.role && user.role === \"processor\") {\n      history.push(pageUrl.PROCESSORS_DASHBOARD)\n    } else if(user?.role && user.role === \"authorizer\") {\n      history.push(pageUrl.AUTHORIZER_OVERVIEW) \n    }\n  }, [user])\n\n  const signinAndNavigate = (signinFunc) => {\n    signinFunc({ email, password }, getActiveUser)\n  }\n\n  return [ signinAndNavigate ];\n}","/home/tga/Desktop/gypsy-capital/src/components/Dashboard/Dashboard.jsx",["420"],"import React, { useContext, useState } from 'react';\nimport styles from './Dashboard.module.scss';\nimport { Row, Col } from 'react-bootstrap';\nimport Logo from '../../assets/logo-white.png';\nimport Button from '../../components/Button/Button';\nimport { FaSearch, FaUser } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\nimport { MdNotificationsNone } from 'react-icons/md';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport placeholderAvatar from '../../assets/placeholder.png';\nimport { FiLogOut } from 'react-icons/fi';\nimport _ from 'lodash';\n\n\nconst Dashboard = ({ children, sidebarRoutes, location }) => {\n\n  // console.log(location)\n\n  const { state: { user }, logout } = useContext(AuthContext);\n  const signout = () => {\n    logout();\n  }\n\n  // const role = \"sales\";\n\n  const [searchTerm, setSearchTerm] = useState('');\n\n  if(!user){\n    return null;\n  }\n\n  return(\n    <div className={styles.container}>\n      <Row className={styles.header}>\n        <Col className={styles.logoGrid} sm={3}>\n          <img src={Logo} alt=\"Gypsy Logo\" width={150} />\n        </Col>\n        <Col className={ user.role === \"client\" ? styles.navGrid : styles.altNavGrid} sm={9}>\n          { user.role && user.role === \"client\" ? \n          <>\n            <MdNotificationsNone size=\"2em\" className=\"mr-5\" color=\"#741763\" />\n            <Button clicked={signout} size=\"sm\" bgColor=\"#A0208931\" color=\"#212121\">Log out</Button>\n          </> : null\n          }\n          {\n            user.role && user.role !== \"client\" ?\n            <>\n              <div className={styles.searchBar}>\n                <FaSearch className={styles.searchIcon} />\n                <input \n                  type=\"text\"\n                  name=\"searchTerm\"\n                  placeholder=\"Search for customer by  name, number or BVN\"\n                  className={styles.searchTerm}\n                  value={searchTerm}\n                  onChange={(e) => {\n                    setSearchTerm(e.currentTarget.value)\n                  }}\n                />\n              </div>\n              <div className={styles.profileGroup}>\n                <MdNotificationsNone style={{ display: \"block\" }} size=\"2em\" className=\"mr-5\" color=\"#741763\" />\n                <div className={styles.profileAvi}>\n                  { user.profilePhoto.length === 0 ? \n                    <div className={styles.avatarWrapper}><FaUser size=\"1.4em\" color=\"gray\" /></div> :\n                    <img src={placeholderAvatar} alt=\"Profile Picture\" />\n                  }\n                  <div className={styles.userInfo}>\n                    <p>{user.firstName} {user.lastName}</p>\n                    <p>{_.capitalize(user.role)} { user.role === \"sales\" && 'agent'}</p>\n                  </div>\n                </div>\n              </div>\n            </> : null\n          }\n        </Col>\n      </Row>\n      <Row>\n        <Col className={styles.menuPanel} sm={3}>\n          <div className={styles.menuList}>\n            <ul>\n              { sidebarRoutes.map(route => {\n                if(location.pathname.includes(route.rootLink)) {\n                  return (\n                    <li className={[styles.activeMenu, \"mb-4\"].join(' ')}>\n                      <route.icon size=\"1.3em\" color=\"#741763\" />\n                      <Link className={styles.activeLink} to={route.link}>{route.label}</Link>\n                    </li>\n                  )\n                } else {\n                  return (\n                    <li className=\"mb-4\">\n                      <route.icon size=\"1.3em\" color=\"#fff\" />\n                      <Link to={route.link}>{route.label}</Link>\n                    </li>\n                  )\n                }\n              })}\n            </ul>\n            { user.role && user.role !== \"client\" ? \n              <ul className={styles.authGroup}>\n                <li onClick={signout}>\n                  <FiLogOut className=\"mr-3\" size=\"1.3em\" color=\"#fff\" />\n                  Log out\n                </li>\n              </ul> :\n              null\n            }\n          </div>\n        </Col>\n        <Col sm={9} className={styles.mainPanel}>\n          <div className={styles.mainContent}>\n            {children}\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\n\nexport default Dashboard;","/home/tga/Desktop/gypsy-capital/src/components/Loader/Loader.jsx",[],"/home/tga/Desktop/gypsy-capital/src/utils/mappedLgas.js",[],"/home/tga/Desktop/gypsy-capital/src/components/IdentityForm/IdentityForm.jsx",[],"/home/tga/Desktop/gypsy-capital/src/reportWebVitals.js",[],"/home/tga/Desktop/gypsy-capital/src/context/MonoContext.js",["421","422","423","424"],"/home/tga/Desktop/gypsy-capital/src/pages/Overview/Overview.jsx",["425","426"],"import React, { useContext, useEffect, useState } from 'react';\nimport styles from './Overview.module.scss';\nimport { clientRoutes } from '../../routes/sidebarRoutes';\nimport Dashboard from '../../components/Dashboard/Dashboard';\nimport Button from '../../components/Button/Button';\nimport gypsyNote from '../../assets/icons/gypsyNotes.svg';\nimport altInvestment from '../../assets/icons/alternative.svg';\nimport { Col, Row } from 'react-bootstrap';\nimport noLoan from '../../assets/no-loan.png';\nimport moment from 'moment';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport { Context as LoanContext } from '../../context/LoanContext';\nimport { useRouteMatch, useHistory, useLocation } from 'react-router-dom';\n\n\nconst Overview = () => {\n\n  const { path } = useRouteMatch();\n  const history = useHistory();\n  const location = useLocation();\n  const [activeLoan, setActiveLoan] = useState(null);\n\n  const { state: { user } } = useContext(AuthContext);\n  const { state: { loans }, retrieveClientLoans } = useContext(LoanContext)\n\n  useEffect(() => {\n    retrieveClientLoans()\n  }, []);\n\n  useEffect(() => {\n    const statusToDisplay = loans.filter(loan => loan.status.toLowerCase() === 'pending' || 'active');\n    console.log(statusToDisplay[0]);\n    setActiveLoan(statusToDisplay[0]);\n  }, [loans]);\n\n  useEffect(() => {\n    console.log(user);\n  }, [user]);\n\n  const numberWithCommas = (x) => {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n\n  if(!user) {\n    return null\n  }\n\n  return (\n    <Dashboard sidebarRoutes={clientRoutes} location={location}>\n      <div className={styles.welcomeGroup}>\n        <h2>Hey, {user.firstName}</h2>\n        <p className={styles.currentDate}>Today is {moment().format('dddd Do[,] MMMM')}.</p>\n      </div>\n      <div className={styles.loanStatus} style={{padding: '30px 40px'}}>\n        { !activeLoan && <div className={styles.innerContainer}>\n          <div className={styles.mainContent}>\n            <h3>Active Loan</h3>\n            <p>Sorry you currently have no active loan</p>\n            <Button\n              bgColor=\"#741763\"\n              size=\"sm\"\n              color=\"#fff\"\n              className=\"mt-4\"\n              clicked={() => history.push('/dashboard/consumer-credit/apply/calculator')}\n            >\n              Apply for loan\n            </Button>\n          </div>\n          <img src={noLoan} alt=\"No active loan\" height=\"280\" />\n        </div> } \n        { activeLoan && <div className={styles.activeStyle}>\n          <div className={styles.mainContent}>\n            <h3>Active Loan <span>{activeLoan.status}</span></h3>\n            <div className={styles.statusBoard}>\n              <Row>\n                <Col className={styles.borderClass}>\n                  <div className={styles.loanData}>\n                    <div>\n                      <h6>Loan amount</h6>\n                      <h1>{`N${numberWithCommas(activeLoan.amount)}`}</h1>\n                    </div>\n                  </div>\n                </Col>\n                <Col className={styles.borderClass}>\n                  <div className={styles.loanData}>\n                    <div>\n                      <h6>Monthly Repayment</h6>\n                      <h1>{`N${numberWithCommas(activeLoan.monthlyRepayment)}`}</h1>\n                    </div>\n                  </div>\n                </Col>\n                <Col>\n                  <div className={styles.loanData}>\n                    <div>\n                      <h6>Tenure</h6>\n                      <h1>{activeLoan.paymentPeriod}</h1>\n                    </div>\n                  </div>\n                </Col>\n              </Row>\n            </div>\n          </div>\n        </div>}\n      </div>\n      <div className={styles.otherProducts}>\n        <Row>\n          <Col sm={12} md={6}>\n            <div className={[styles.product, styles.borderClass].join(' ')}>\n              <div className={styles.productIcon}>\n                <img src={gypsyNote} alt=\"Gypsy Notes\" width=\"25\" />\n              </div>\n              <h3 className={styles.productTitle}>Gypsy Notes</h3>\n              <p className=\"mt-2\">Let your money work for you and enjoy high interest rates on your money. Start a Gypsy Fixed Income Note today and earn more.</p>\n              <button className={[styles.productBtn, \"mt-3\"].join(' ')}>\n                Be the first to know when we launch\n              </button>\n            </div>\n          </Col>\n          <Col sm={12} md={6}>\n            <div className={[styles.product, styles.border2Class].join(' ')}>\n              <div className={styles.productIcon}>\n                <img src={altInvestment} alt=\"Alternative Investment\" width=\"40\" />\n              </div>\n              <h3 className={styles.productTitle}>Alternative Investment</h3>\n              <p className=\"mt-2\">Are you an investor who seek greater rewards? Our Alternative Investment service is here to help you earn more.</p>\n              <button className={[styles.productBtn, \"mt-3\"].join(' ')}>\n                Be the first to know when we launch\n              </button>\n            </div>\n          </Col>\n        </Row>\n      </div>\n    </Dashboard>\n  )\n}\n\n\nexport default Overview;","/home/tga/Desktop/gypsy-capital/src/pages/ContactPage/ContactPage.jsx",["427"],"/home/tga/Desktop/gypsy-capital/src/pages/ResetPassword/ResetPassword.jsx",["428"],"/home/tga/Desktop/gypsy-capital/src/pages/AuthorizerOverview/AuthorizerOverview.jsx",["429"],"import React, { useContext, useMemo, useEffect } from 'react';\nimport styles from './AuthorizerOverview.module.scss';\nimport { routes } from '../../routes/sidebarRoutes';\nimport { useLocation, useHistory, Link } from 'react-router-dom';\nimport Dashboard from '../../components/Dashboard/Dashboard';\nimport moment from 'moment';\nimport { AiOutlineCalendar } from 'react-icons/ai';\nimport { TiCancelOutline } from 'react-icons/ti';\nimport StatBox from '../../components/StatBox/StatBox';\nimport ClientStat from '../../assets/salesDashboard/clientstat.png';\nimport DisburseStat from '../../assets/salesDashboard/loanstat.png';\nimport LoanStat from '../../assets/salesDashboard/loanchange.png';\nimport PendingStat from '../../assets/salesDashboard/pending.png';\nimport RepaymentStat from '../../assets/salesDashboard/repayment.png';\nimport TotalStat from '../../assets/salesDashboard/total.png';\nimport { Row, Col, Table } from 'react-bootstrap';\nimport Button from '../../components/Button/Button';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport { Context as UserContext } from '../../context/UserContext';\nimport { Context as LoanContext } from '../../context/LoanContext';\nimport Loader from '../../components/Loader/Loader';\nimport { numberWithCommas } from '../../utils/nigeriaStates';\nimport _ from 'lodash';\n\n\nconst AuthorizerOverview = () => {\n\n  const authorizerRoutes = routes[3];\n  const location = useLocation();\n  const history = useHistory();\n\n  const { state: { user } } = useContext(AuthContext);\n  const { state: { clientsForRole, loading }, getClientListForRole } = useContext(UserContext);\n  const { state: { loans, loading: listLoading }, retrieveClientLoans } = useContext(LoanContext);\n\n  useEffect(() => {\n    getClientListForRole();\n    retrieveClientLoans();\n  }, [])\n\n  const totalDisbursedLoans = useMemo(() => {\n    return loans.filter((loan) => loan.status.toLowerCase() === \"approved\")\n      .reduce((acc, loan) => (loan.amount + acc), 0)\n  }, [loans]);\n\n  const noOfActiveLoans = useMemo(() => {\n    return loans.filter((loan) => loan.status.toLowerCase() === \"approved\").length; \n  }, [loans]);\n\n  const noOfPendingLoans = useMemo(() => {\n    return loans.filter((loan) => loan.status.toLowerCase() === \"pending\").length; \n  }, [loans]);\n\n  const recentLoans = useMemo(() => {\n    return loans.slice(0, 5);\n  }, [loans]);\n\n  console.log(recentLoans);\n\n  return (\n    <Dashboard sidebarRoutes={authorizerRoutes} location={location}>\n      <div className={styles.welcomeGroup}>\n        <div>\n          <h2>Hey, {user.firstName}</h2>\n          <p className={styles.currentDate}>Today is {moment().format('dddd Do[,] MMMM')}.</p>\n        </div>\n        <button>\n          <AiOutlineCalendar className={styles.icon} />\n          Last 7 days\n        </button>\n      </div>\n      { !listLoading && !loading ? <>\n        <div className={styles.stats}>\n          <Row>\n            <Col>\n              <StatBox icon={ClientStat} title=\"Total Clients\" statData={clientsForRole.length} />\n            </Col>\n            <Col>\n              <StatBox icon={DisburseStat} title=\"Total Disbursed Loans\" statData={numberWithCommas(totalDisbursedLoans)} />\n            </Col>\n            <Col>\n              <StatBox icon={LoanStat} title=\"Total Active Loans\" statData={noOfActiveLoans} />\n            </Col>\n          </Row>\n          <Row className=\"mt-4\">\n            <Col>\n              <StatBox icon={RepaymentStat} title=\"Total Repayment Received\" statData=\"3.75M\" />\n            </Col>\n            <Col>\n              <StatBox icon={TotalStat} title=\"Total Loans\" statData={loans.length} />\n            </Col>\n            <Col>\n              <StatBox icon={PendingStat} title=\"Total Pending Loans\" statData={noOfPendingLoans} />\n            </Col>\n          </Row>\n        </div>\n        <div className={styles.recentLoans}>\n          <div className={styles.header}>\n            <h3>Recent Loans</h3>\n            <Button\n              size=\"sm\" \n              bgColor=\"#741763\" \n              color=\"#fff\"\n              clicked={() => history.push('/authorizer/loans')}\n            >\n              View All\n            </Button>\n          </div>\n          <div className={styles.recentCard}>\n            <Table className={styles.table} striped>\n              <thead>\n                <tr>\n                  <th>Client Name</th>\n                  <th>Loan ID</th>\n                  <th>Loan Amount</th>\n                  <th>Status</th>\n                  <th>Tenure</th>\n                  <th>Monthly Repayment</th>\n                </tr>\n              </thead>\n              { recentLoans && recentLoans.length > 0 ? <tbody>\n                { recentLoans.map((loan, idx) => (\n                  <tr key={idx}>\n                    <td>\n                      {`${_.capitalize(loan.clientInfo[0]?.firstName)} ${_.capitalize(loan.clientInfo[0]?.lastName)}`}\n                    </td>\n                    <td className={styles.loanId}>\n                      <Link to={`/authorizer/loan/${loan._id}`}>\n                        {loan._id.slice(0, 6)}\n                      </Link>\n                    </td>\n                    <td>{`N${numberWithCommas(loan.amount)}`}</td>\n                    <td>{_.capitalize(loan.status)}</td>\n                    <td>{loan.paymentPeriod}</td>\n                    <td>{`N${numberWithCommas(loan.monthlyRepayment)}`}</td>\n                  </tr>\n                ))}\n              </tbody> : null }\n            </Table>\n            { recentLoans && recentLoans.length === 0 ? <div className={styles.nullList}>\n              <TiCancelOutline size=\"6em\" color=\"rgba(116, 23, 99, 0.6)\" />\n            </div> : null }\n          </div>\n        </div>\n      </> : <Loader />}\n    </Dashboard>\n\t)\n}\n\nexport default AuthorizerOverview;","/home/tga/Desktop/gypsy-capital/src/utils/validateInput.js",["430","431"],"export const validateInput = (inputValues, errorSetter) => {\n\n  const validMail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  let validPhoneNumber = /^[0]\\d{10}$/;\n\n  const errorsInit = {};\n  let fields = { ...inputValues }\n\n  for(const key in fields) {\n    if(!fields[key]) {\n      errorsInit[key] = \"This field is required\";\n    } \n    if(fields.email && !fields.email.match(validMail)) {\n      errorsInit.email = \"Please enter a valid email address\"\n    } \n    if(fields.phoneNo && !fields.phoneNo.match(validPhoneNumber)) {\n      errorsInit.phoneNo = \"Please enter a valid phone number\"\n    }\n    if(fields.password && fields.password.length < 8) {\n      errorsInit.password = \"Password must be at least 8 characters\";\n    }\n    if(fields.confirmPassword && fields.confirmPassword !== fields.password) {\n      errorsInit.confirmPassword = \"Your password does not match\"\n    }\n  }\n\n  errorSetter(errorsInit);\n  console.log(errorsInit);\n  if(Object.entries(errorsInit).length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n\n}","/home/tga/Desktop/gypsy-capital/src/components/NavTabs/NavTabs.jsx",[],"/home/tga/Desktop/gypsy-capital/src/components/OfferLetter/OfferLetterForm.jsx",["432"],"import React, { useEffect, useState } from \"react\";\nimport styles from \"./OfferLetterForm.module.scss\";\nimport WhiteLogo from \"../../assets/logo-white.png\";\nimport OfferLetterPdf from \"./OfferLetter\";\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\nimport { Row, Col } from \"react-bootstrap\";\nimport Button from \"../Button/Button\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport { numberWithCommas } from \"../../utils/nigeriaStates\";\nimport { convertInput } from \"../../utils/convertInputType\";\n\nconst OfferLetterForm = ({ setState, loanData }) => {\n  console.log(loanData);\n  const [offerFormData, setOfferFormData] = useState({\n    date: \"\",\n    fullName: \"\",\n    clientAddress: \"\",\n    loanAmount: \"\",\n    borrowerName: \"\",\n    natureofBusiness: \"\",\n    loanFacility: \"\",\n    loanPurpose: \"\",\n    monthlyRepayment: \"\",\n    repaymentSource: \"\",\n    headCreditSign: \"\",\n    headRiskSign: \"\",\n    memoFullName: \"\",\n    memoAddress: \"\",\n    memoName: \"\",\n    memoSign: \"\",\n  });\n\n  const [btnState, setBtnState] = useState(false);\n\n  useEffect(() => {\n    setOfferFormData({\n      ...offerFormData,\n      date: moment().format(\"DD-MM-YYYY\"),\n      fullName: `${_.capitalize(loanData?.client?.firstName)}`,\n      clientAddress: loanData?.residence?.street,\n      loanAmount: `N${numberWithCommas(loanData?.approvedAmount)}`,\n      borrowerName: `${_.capitalize(\n        loanData?.client?.firstName\n      )} ${_.capitalize(loanData?.client?.lastName)}`,\n      natureofBusiness: _.startCase(loanData?.employment?.sector),\n      loanFacility: numberWithCommas(loanData?.approvedAmount),\n      loanPurpose: _.startCase(loanData?.loanPurpose),\n      monthlyRepayment: numberWithCommas(loanData?.monthlyRepayment),\n      repaymentSource: \"Salary\",\n    });\n  }, []);\n\n  const sendOffer = () => {\n    setState(true);\n  };\n\n  return (\n    <>\n      <div className={styles.formWrapper}>\n        <div className={styles.formHeader}>\n          <img src={WhiteLogo} alt=\"logo\" />\n          <hr />\n          <div className={styles.approvedDate}>\n            <p>Loan Approved</p>\n            <div className={styles.dateGroup}>\n              <p>Date: </p>\n              <input\n                type=\"text\"\n                placeholder=\"DD/MM/YYYY\"\n                name=\"date\"\n                value={offerFormData.date}\n                onChange={(e) =>\n                  setOfferFormData({\n                    ...offerFormData,\n                    date: e.currentTarget.value,\n                  })\n                }\n              />\n            </div>\n          </div>\n        </div>\n        <div className={styles.formBody}>\n          <div className={styles.addressGroup}>\n            <div className={styles.greet}>\n              <p>Dear,</p>\n              <input\n                type=\"text\"\n                name=\"clientName\"\n                placeholder=\"Full Name\"\n                value={offerFormData.fullName}\n                onChange={(e) =>\n                  setOfferFormData({\n                    ...offerFormData,\n                    fullName: e.currentTarget.value,\n                  })\n                }\n              />\n            </div>\n            <input\n              type=\"text\"\n              name=\"clientAddress\"\n              placeholder=\"Client Address\"\n              className={styles.address}\n              value={offerFormData.clientAddress}\n              onChange={(e) =>\n                setOfferFormData({\n                  ...offerFormData,\n                  clientAddress: e.currentTarget.value,\n                })\n              }\n            />\n          </div>\n          <div className={styles.mainContent}>\n            <p className={styles.letterHead}>\n              OFFER FOR PERSONAL LOAN FACILITY\n            </p>\n            <p>\n              We are pleased to advise that the Management of Gypsy Capital\n              Limited has approved the loan facility requested, hence, this\n              offer made to you. This letter outlines the major terms and\n              conditions under which we are willing to make available to you,\n              the sum of\n              <span>\n                <input\n                  type=\"text\"\n                  name=\"additional\"\n                  placeholder=\"₦xxx,xxx (Loans amount in words)\"\n                  value={offerFormData.loanAmount}\n                  onChange={(e) =>\n                    setOfferFormData({\n                      ...offerFormData,\n                      loanAmount: e.currentTarget.value,\n                    })\n                  }\n                />\n              </span>\n            </p>\n            <div className={styles.loanData}>\n              <Row className=\"mb-4\">\n                <Col md={4}>\n                  <p>Lender:</p>\n                </Col>\n                <Col md={8}>\n                  <p style={{ color: \"gray\" }}>Gypsy Capital</p>\n                </Col>\n              </Row>\n              <Row className=\"mb-4 align-items-center\">\n                <Col md={4}>\n                  <p>Borrower:</p>\n                </Col>\n                <Col md={8}>\n                  <input\n                    type=\"text\"\n                    name=\"clientname\"\n                    placeholder=\"Client Name\"\n                    value={offerFormData.borrowerName}\n                    onChange={(e) =>\n                      setOfferFormData({\n                        ...offerFormData,\n                        borrowerName: e.currentTarget.value,\n                      })\n                    }\n                  />\n                </Col>\n              </Row>\n              <Row className=\"mb-4 align-items-center\">\n                <Col md={4}>\n                  <p>Nature of Business:</p>\n                </Col>\n                <Col md={8}>\n                  <input\n                    type=\"text\"\n                    name=\"business\"\n                    value={offerFormData.natureofBusiness}\n                    onChange={(e) =>\n                      setOfferFormData({\n                        ...offerFormData,\n                        natureofBusiness: e.currentTarget.value,\n                      })\n                    }\n                  />\n                </Col>\n              </Row>\n              <Row className=\"mb-4 align-items-center\">\n                <Col md={4}>\n                  <p>Amount of Loan Facility:</p>\n                </Col>\n                <Col md={8}>\n                  <input\n                    type=\"text\"\n                    name=\"loanAmount\"\n                    value={offerFormData.loanFacility}\n                    onChange={(e) => {\n                      const {\n                        includesAlphabet,\n                        convertedToNumber,\n                      } = convertInput(e.currentTarget.value);\n                      if (!includesAlphabet) {\n                        setOfferFormData({\n                          ...offerFormData,\n                          loanFacility: convertedToNumber.toLocaleString(),\n                        });\n                      }\n                    }}\n                  />\n                </Col>\n              </Row>\n              <Row className=\"mb-4 align-items-center\">\n                <Col md={4}>\n                  <p>Purpose:</p>\n                </Col>\n                <Col md={8}>\n                  <input\n                    type=\"text\"\n                    name=\"purpose\"\n                    value={offerFormData.loanPurpose}\n                    onChange={(e) =>\n                      setOfferFormData({\n                        ...offerFormData,\n                        loanPurpose: e.currentTarget.value,\n                      })\n                    }\n                  />\n                </Col>\n              </Row>\n              <Row className=\"mb-4 align-items-center\">\n                <Col md={4}>\n                  <p>Monthly Repayment:</p>\n                </Col>\n                <Col md={8}>\n                  <input\n                    type=\"text\"\n                    name=\"monthlyRepay\"\n                    value={offerFormData.monthlyRepayment}\n                    onChange={(e) => {\n                      const {\n                        includesAlphabet,\n                        convertedToNumber,\n                      } = convertInput(e.currentTarget.value);\n                      if (!includesAlphabet) {\n                        setOfferFormData({\n                          ...offerFormData,\n                          monthlyRepayment: convertedToNumber.toLocaleString(),\n                        });\n                      }\n                    }}\n                  />\n                </Col>\n              </Row>\n              <Row className=\"mb-4 align-items-center\">\n                <Col md={4}>\n                  <p>Repayment Source/Method:</p>\n                </Col>\n                <Col md={8}>\n                  <input\n                    type=\"text\"\n                    name=\"source\"\n                    value={offerFormData.repaymentSource}\n                    onChange={(e) =>\n                      setOfferFormData({\n                        ...offerFormData,\n                        repaymentSource: e.currentTarget.value,\n                      })\n                    }\n                  />\n                </Col>\n              </Row>\n            </div>\n            <div className={styles.terms}>\n              <p className={styles.title}>TERMS OF THE OFFER:</p>\n              <ol>\n                <li>\n                  Disbursement is subject to the availability of funds and\n                  statutory regulations.\n                </li>\n                <li>\n                  The Borrower will reimburse Gypsy Capital Limited on-demand,\n                  all expenses (including but not limited to legal and insurance\n                  expenses and all taxes Where-so applicable) thereon incurred\n                  by Gypsy Capital Limited in Processing this facility and in\n                  suing for or recovering any sum due hereunder or otherwise in\n                  enforcing or protecting its rights and interests hereunder.\n                </li>\n                <li>\n                  Gypsy Capital reserves the right to refuse and/or withhold\n                  disbursement without notice.\n                </li>\n                <li>\n                  The facility is expected to run its full course and there\n                  non-cancellable Otherwise a non-cancellable fee shall apply.\n                  This fee shall be equivalent to the interest for the month of\n                  Cancellation/Pre liquidation and an additional one month.\n                </li>\n                <li>\n                  This Offer is subject to external confirmation and\n                  authenticity of all documents submitted for the loan\n                  application.\n                </li>\n                <li>\n                  Where any document submitted by the Borrower is found to be\n                  ingenuine or unreliable this offer will automatically\n                  terminate.\n                </li>\n              </ol>\n            </div>\n            <div className={styles.terms}>\n              <p className={styles.title}>EVENTS OF DEFAULT:</p>\n              <p>\n                The occurrence of any of the following shall cause all\n                outstanding sums under this facility to become immediately\n                repayable:\n              </p>\n              <ol>\n                <li>\n                  If the Borrower fails to settle when due, any outstanding\n                  amount owed to and advised by Gypsy Capital Limited;\n                </li>\n                <li>\n                  If the Borrower defaults in the performance or the observance\n                  of any terms or/and conditions here-above stated;\n                </li>\n                <li>\n                  Where Gypsy Capital Limited gives notice of said\n                  breach/default to the borrower and said Breach/default\n                  continues and remains unalleviated after (7) days' notice had\n                  been given to it; or\n                </li>\n                <li>\n                  Where the repayment of the facility is not discharged as at\n                  when due (with reference to the monthly installment payment\n                  and other outstanding amounts applicable to the facility),\n                  Gypsy Capital Limited has the right to upload customer's data\n                  as delinquent on the Credit bureau.\n                </li>\n                <li>\n                  Should any of the rentals remain un-paid, for any reason\n                  whatsoever, a penalty equal to 1.67% of the amount of the\n                  rental shall be payable for each day of the period that the\n                  rental remained unpaid.\n                </li>\n              </ol>\n            </div>\n            <div className={styles.terms}>\n              <p className={styles.title}>General</p>\n              <ol>\n                <li>\n                  All cheques must be made in the name of Gypsy Capital Limited\n                  to the express exclusion of any known staff of the company.\n                </li>\n                <li>\n                  The Borrower hereby irrevocably and unconditionally consents\n                  to Gypsy Capital Limited providing any and all information on\n                  the Borrower's dealings with it to the credit\n                  Bureaus/Registries as it may deem necessary.\n                </li>\n                <li>\n                  Gypsy Capital reserves the right to refuse and/or withhold\n                  disbursement without notice.\n                </li>\n              </ol>\n            </div>\n            <hr />\n            <div className={styles.terms}>\n              <p className={styles.title}>Important Notice</p>\n              <p>\n                Please note that where this offer is not accepted within 7\n                (Seven) days, it shall be subjected to review against the\n                prevailing market values.\n              </p>\n              <p>\n                We hope that our offer meets your needs. if so, kindly indicate\n                your acceptance of the conditions outlined above by executing\n                the Memorandum of acceptance attached to this letter.\n              </p>\n              <p>\n                Upon acceptance of this offer, kindly find the Personal Loan\n                Agreement attached, for your execution.\n              </p>\n              <p>We thank you for this opportunity to be of service to you.</p>\n            </div>\n            <div className={styles.importantNotice}>\n              <p>\n                **The parties acknowledge and agree that this agreement (offer\n                letter) may execute by electronic signature, which shall be\n                considered as an original signature for all purposes and shall\n                include faxed versions of the parties original signature, copied\n                and pasted image of the parties handwritten signature on the\n                agreement, parties written name or signature using a stylus,\n                keypad or keyboard or electronically scanned and transmitted\n                versions (e.g., via pdf) of an original signature.**\n              </p>\n              <p>For Gypsy Capital</p>\n            </div>\n            <div className={styles.signatureGroup}>\n              <div>\n                <p>HEAD, CREDIT</p>\n                <textarea\n                  name=\"headCredit\"\n                  style={{ padding: \"15px 18px\" }}\n                  value={offerFormData.headCreditSign}\n                  onChange={(e) =>\n                    setOfferFormData({\n                      ...offerFormData,\n                      headCreditSign: e.currentTarget.value,\n                    })\n                  }\n                />\n              </div>\n              <div>\n                <p>HEAD, CREDIT & RISK MANAGEMENT</p>\n                <textarea\n                  name=\"headRisk\"\n                  style={{ padding: \"15px 18px\" }}\n                  value={offerFormData.headRiskSign}\n                  onChange={(e) =>\n                    setOfferFormData({\n                      ...offerFormData,\n                      headRiskSign: e.currentTarget.value,\n                    })\n                  }\n                />\n              </div>\n            </div>\n            <div className={styles.memorandum}>\n              <p className={styles.title}>Memorandum of Acceptance</p>\n              <p style={{ lineHeight: \"1.8rem\" }}>\n                I{\" \"}\n                <span style={{ marginLeft: \"10px\" }}>\n                  <input\n                    style={{ width: \"250px\" }}\n                    type=\"text\"\n                    name=\"client\"\n                    placeholder=\"Full Name\"\n                    value={offerFormData.memoFullName}\n                    onChange={(e) =>\n                      setOfferFormData({\n                        ...offerFormData,\n                        memoFullName: e.currentTarget.value,\n                      })\n                    }\n                  />\n                </span>\n                , OF{\" \"}\n                <span style={{ marginLeft: \"10px\" }}>\n                  <input\n                    type=\"text\"\n                    name=\"address\"\n                    placeholder=\"Address goes here\"\n                    value={offerFormData.memoAddress}\n                    onChange={(e) =>\n                      setOfferFormData({\n                        ...offerFormData,\n                        memoAddress: e.currentTarget.value,\n                      })\n                    }\n                  />\n                </span>{\" \"}\n                have read and have fully understood the terms and conditions of\n                the offer. Therefore I agree to the terms and conditions of the\n                offer and have accordingly affirmed same;\n              </p>\n              <div className={styles.clientSign}>\n                <Row>\n                  <Col sm={6}>\n                    Name:{\" \"}\n                    <input\n                      type=\"text\"\n                      name=\"name\"\n                      value={offerFormData.memoName}\n                      onChange={(e) =>\n                        setOfferFormData({\n                          ...offerFormData,\n                          memoName: e.currentTarget.value,\n                        })\n                      }\n                    />\n                  </Col>\n                  <Col sm={6}>\n                    Signature:{\" \"}\n                    <input\n                      type=\"text\"\n                      name=\"name\"\n                      value={offerFormData.memoSign}\n                      onChange={(e) =>\n                        setOfferFormData({\n                          ...offerFormData,\n                          memoSign: e.currentTarget.value,\n                        })\n                      }\n                    />\n                  </Col>\n                </Row>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className={styles.offerBtn}>\n        <>\n          {btnState ? (\n            <PDFDownloadLink\n              className={styles.downloadBtn}\n              document={<OfferLetterPdf dynamicData={{ ...offerFormData }} />}\n              fileName=\"offerLetter.pdf\"\n            >\n              {({ blob, url, loading, error }) =>\n                loading ? \"Loading document...\" : \"Download Offer Letter\"\n              }\n            </PDFDownloadLink>\n          ) : (\n            <Button\n              clicked={() => setBtnState(true)}\n              bgColor=\"#741763\"\n              size=\"lg\"\n              color=\"#EBEBEB\"\n              // disabled={loading}\n              // loading={loading}\n            >\n              Create Offer PDF\n            </Button>\n          )}\n        </>\n        <Button\n          clicked={sendOffer}\n          bgColor=\"#741763\"\n          size=\"lg\"\n          color=\"#EBEBEB\"\n          // disabled={loading}\n          // loading={loading}\n        >\n          Send Offer Letter\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default OfferLetterForm;\n","/home/tga/Desktop/gypsy-capital/src/hooks/usePagination.js",["433"],"/home/tga/Desktop/gypsy-capital/src/components/FaqSection/FaqSection.jsx",["434"],"/home/tga/Desktop/gypsy-capital/src/components/ModalForm/ModalForm.jsx",["435","436","437"],"import React, { useContext, useEffect, useState } from 'react';\nimport styles from './ModalForm.module.scss';\nimport InputField from '../../components/InputField/InputField';\nimport { Row, Col, Modal } from 'react-bootstrap';\nimport Button from '../../components/Button/Button';\nimport { validateInput } from '../../utils/validateInput';\nimport { \n  VerifyBvn, \n  PersonalInfo, \n  Residence,\n  NextOfKin,\n  BankInfo,\n  IdentityForm,\n  OnboardSuccess\n} from '../../components/AccountSetupModal/AccountSetupModal';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport { Context as UserContext } from '../../context/UserContext';\nimport { toast, ToastContainer } from 'react-toastify';\n\nconst VerifyOtp = ({ submit }) => {\n\n  const { state: { loading } } = useContext(AuthContext);\n  const [otp, setOtp] = useState('');\n\n  const submitOtp = () => {\n    if(otp) {\n      submit(otp);\n    }\n  }\n\n  return (\n    <>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <h2 className={styles.headerText}>Verify OTP</h2>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div className={styles.otpBody}>\n          <Row>\n            <Col>\n              <InputField \n                type=\"text\"\n                nameAttr=\"otp\"\n                label=\"One Time Password\"\n                value={otp}\n                changed={(val) => {\n                  setOtp(val)\n                }}\n              />\n            </Col>\n          </Row>\n        </div>\n      </Modal.Body>\n      <Modal.Footer className={styles.otpBody}>\n        <Button\n          fullWidth\n          bgColor=\"#741763\" \n          size=\"lg\" \n          clicked={submitOtp}\n          color=\"#EBEBEB\"\n          loading={loading}\n          disabled={loading}\n        >\n          Verify\n        </Button>\n      </Modal.Footer>\n    </>\n  )\n}\n\n\nconst RegisterForm = ({ submit }) => {\n\n  const { state: { loading } } = useContext(AuthContext);\n\n  const emptyState = {\n    firstName: null,\n    lastName: null,\n    email: null,\n    phoneNo: null,\n    password: null,\n    confirmPassword: null,\n    referralChoice: null\n  };\n\n  const [registerData, setRegisterData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phoneNo: '',\n    password: '',\n    confirmPassword: '',\n    referralChoice: ''\n  });\n\n  const [registerError, setRegisterError] = useState({\n    firstName: null,\n    lastName: null,\n    email: null,\n    phoneNo: null,\n    password: null,\n    confirmPassword: null,\n    referralChoice: null\n  });\n\n  const referralOptions = [\n    'Search Engine', \n    'Google Ads', \n    'Email', \n    'Radio', \n    'TV', \n    'Newspaper', \n    'Word of mouth',\n    'Facebook',\n    'Instagram',\n    'Other'\n  ]\n\n  const { firstName, lastName, email, phoneNo, password, confirmPassword, referralChoice } = registerData;\n\n  const register = () => {\n    const validated = validateInput(registerData, setRegisterError);\n    console.log(validated);\n    if(validated) {\n      submit({\n        firstName,\n        lastName,\n        email,\n        phoneNumber: phoneNo.replace('0', '234'),\n        password,\n        hearAboutUs: referralChoice\n      });\n    }\n  }\n\n  return (\n    <>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <h2 className={styles.headerText}>Create Account</h2>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div className={styles.modalBody}>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                type=\"text\"\n                nameAttr=\"firstName\"\n                label=\"First Name\"\n                value={firstName}\n                changed={(val) => {\n                  setRegisterError({ ...registerError, firstName: null })\n                  setRegisterData({...registerData, firstName: val})\n                }}\n                error={registerError.firstName && registerError.firstName}\n              />\n            </Col>\n            <Col>\n              <InputField \n                type=\"text\"\n                nameAttr=\"lastName\"\n                label=\"Last Name\"\n                value={lastName}\n                changed={(val) => {\n                  setRegisterError({ ...registerError, lastName: null })\n                  setRegisterData({...registerData, lastName: val})\n                }}\n                error={registerError.lastName && registerError.lastName}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                type=\"email\"\n                nameAttr=\"email\"\n                label=\"Email\"\n                value={email}\n                changed={(val) => {\n                  setRegisterError({ ...registerError, email: null })\n                  setRegisterData({...registerData, email: val})\n                }}\n                error={registerError.email && registerError.email}\n              />\n            </Col>\n            <Col>\n              <InputField \n                type=\"text\"\n                nameAttr=\"phoneNo\"\n                label=\"Mobile Number\"\n                value={phoneNo}\n                changed={(val) => {\n                  setRegisterError({ ...registerError, phoneNo: null })\n                  setRegisterData({...registerData, phoneNo: val})\n                }}\n                error={registerError.phoneNo && registerError.phoneNo}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                type=\"password\"\n                nameAttr=\"password\"\n                label=\"Password\"\n                value={password}\n                changed={(val) => {\n                  setRegisterError({ ...registerError, password: null })\n                  setRegisterData({...registerData, password: val})\n                }}\n                error={registerError.password && registerError.password}\n              />\n            </Col>\n            <Col>\n              <InputField \n                type=\"password\"\n                nameAttr=\"confirmPassword\"\n                label=\"Confirm Password\"\n                value={confirmPassword}\n                changed={(val) => {\n                  setRegisterError({ ...registerError, confirmPassword: null })\n                  setRegisterData({...registerData, confirmPassword: val})\n                }}\n                error={registerError.confirmPassword && registerError.confirmPassword}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-4\">\n            <Col>\n              <InputField \n                type=\"select\"\n                label=\"How did you hear about us?\"\n                options={referralOptions}\n                nameAttr=\"referral\"\n                value={referralChoice}\n                changed={(val) => {\n                  setRegisterError({ ...registerError, referralChoice: null })\n                  setRegisterData({...registerData, referralChoice: val})\n                }}\n                error={registerError.referralChoice && registerError.referralChoice}\n              />\n            </Col>\n          </Row>\n          <Modal.Footer>\n            <Button\n              fullWidth\n              bgColor=\"#741763\" \n              size=\"lg\" \n              clicked={register}\n              color=\"#EBEBEB\"\n              loading={loading}\n              disabled={loading}\n            >\n              Sign Up\n            </Button>\n          </Modal.Footer>\n        </div>\n      </Modal.Body>\n    </>\n  )\n}\n\n\nconst ModalForm = ({ openState, closeHandler }) => {\n\n  const [stage, setStage] = useState(0);\n  const [infoData, setInfoData] = useState({\n    personalInfo: null,\n    residenceInfo: null,\n    kinInfo: null,\n    bankInfo: null\n  });\n  const { \n    state: { registerStatus, currentAddedUser, error }, \n    addUserByAgent, \n    verifyOtp,\n    getCurrentlyAddedUser,\n    clearErrors \n  } = useContext(AuthContext);\n  const { \n    state: { setupStage, error: userError }, \n    verifyBvn, \n    updatePersonalInfo,\n    updateIdentityInfo,\n    clearErrors: clearErr\n  } = useContext(UserContext);\n\n  const startUserRegistration = (data) => {\n    console.log('works');\n    addUserByAgent(data, getCurrentlyAddedUser);\n  }\n\n  const verifyUserNo = (otp) => {\n    const { email } = currentAddedUser;\n    verifyOtp(otp, email, null, true);\n  }\n\n  const addBvn = (bvn) => {\n    const { user_id } = currentAddedUser;\n    verifyBvn(user_id, bvn, null, true);\n  }\n\n  const goToResidence = (data) => {\n    setInfoData({\n      ...infoData,\n      personalInfo: data\n    });\n    setStage(4)\n  }\n\n  const goToNextOfKin = (data) => {\n    setInfoData({\n      ...infoData,\n      residenceInfo: data\n    });\n    setStage(5)\n  }\n\n  const goToBankInfo = (data) => {\n    setInfoData({\n      ...infoData,\n      kinInfo: data\n    });\n    setStage(6)\n  }\n\n  const addPersonalInfo = (data) => {\n    const { user_id } = currentAddedUser;\n    const { personalInfo, residenceInfo, kinInfo } = infoData;\n    const reqData = {\n      alternativePhoneNumber: personalInfo.altPhone,\n      gender: personalInfo.gender,\n      residence_street: residenceInfo.street,\n      residence_city: residenceInfo.city,\n      residence_state: residenceInfo.state,\n      nextOfKin_fullName: kinInfo.fullName,\n      nextOfKin_relationship: kinInfo.relationship,\n      nextOfKin_email: kinInfo.email,\n      nextOfKin_phoneNumber: kinInfo.phoneNo,\n      nextOfKin_residentialAddress: kinInfo.address,\n      bank_name: data.bankName,\n      bank_accountType: data.accountType,\n      bank_accountNumber: data.accountNumber,\n      bank_accountName: data.accountName,\n      identity_type: null,\n      identity_imageUrl: null,\n      identity_profilePhoto: null\n    }\n    console.log(reqData);\n    updatePersonalInfo(user_id, reqData, true);\n  }\n\n  const addIdentityInfo = (id, passport, type) => {\n    const { user_id } = currentAddedUser;\n    const data = new FormData();\n    data.append('identification', id);\n    data.append('passport', passport);\n    data.append('identity_type', type)\n    updateIdentityInfo(user_id, data, true);\n  }\n\n\n  useEffect(() => {\n    if(error) {\n      toast.error(error);\n      clearErrors();\n    }\n\n    return () => {\n      clearErrors();\n    }\n\n  }, [error])\n\n  useEffect(() => {\n    if(userError) {\n      toast.error(userError);\n      clearErr();\n    }\n\n    return () => {\n      clearErr();\n    }\n\n  }, [userError])\n\n  useEffect(() => {\n    if(registerStatus === \"unverified\") {\n      setStage(1);\n    }\n    if(registerStatus === \"verified\") {\n      setStage(2);\n    }\n  }, [registerStatus])\n\n  useEffect(() => {\n    if(setupStage === \"bvn_verified\") {\n      setStage(3);\n    }\n    if(setupStage === \"personal_info_added\") {\n      setStage(7);\n    }\n    if(setupStage === \"identity_added\") {\n      setStage(8);\n    }\n  }, [setupStage])\n\n  return (\n    <>\n      <ToastContainer position=\"top-center\" />\n      <Modal \n        show={openState}\n        size={ stage === 8 ? \"sm\" : \"lg\" }\n        onHide={() => {\n          // setRegisterData(emptyState);\n          setStage(0);\n          closeHandler();\n        }}\n      > \n        { stage === 8 && <OnboardSuccess close={closeHandler} /> }\n        { stage === 7 && <IdentityForm submit={addIdentityInfo} /> }\n        { stage === 6 && <BankInfo submit={addPersonalInfo} /> }\n        { stage === 5 && <NextOfKin submit={goToBankInfo} /> }\n        { stage === 4 && <Residence submit={goToNextOfKin} /> }\n        { stage === 3 && <PersonalInfo submit={goToResidence} /> }\n        { stage === 2 && <VerifyBvn submit={addBvn} /> }\n        { stage === 1 && <VerifyOtp submit={verifyUserNo} /> }\n        { stage === 0 && <RegisterForm  submit={startUserRegistration} /> }\n      </Modal>\n    </>\n  )\n}\n\n\nexport default ModalForm;","/home/tga/Desktop/gypsy-capital/src/components/LoanCalculatorForm/LoanCalculatorForm.jsx",["438","439"],"import React, { useState, useEffect, useContext } from 'react';\nimport styles from './LoanCalculatorForm.module.scss';\nimport InputField from '../InputField/InputField';\nimport Button from '../Button/Button';\nimport { Row, Col } from 'react-bootstrap';\nimport Slider from 'react-rangeslider';\nimport { validateInput } from '../../utils/validateInput';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Context as LoanContext } from '../../context/LoanContext';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport 'react-rangeslider/lib/index.css'\n\n\nconst DtiRangeSlider = ({ dtiVal, setVal }) => {\n\n  const handleChange = (val) => {\n    setVal(val)\n  }\n\n  return (  \n    <div>\n      <p>DTI: {`${dtiVal}%`}</p>\n      <Slider \n        min={33}\n        max={50}\n        value={dtiVal}\n        onChange={handleChange}\n      />\n    </div>\n  )\n}\n\n\nconst LoanCalculatorForm = ({ delegateApply }) => {\n\n  const { state: { loading }, loanApply } = useContext(LoanContext);\n  const { state: { user } } = useContext(AuthContext);\n\n  // const [dti, setDti] = useState(33);\n  const [daysOfMonth, setDaysOfMonth] = useState([]);\n  const [limitError, setLimitError] = useState(null);\n  const [loanCalcData, setLoanCalcData] = useState({\n    monthlySalary: \"\",\n    payDay: \"\",\n    loanAmount: \"\",\n    installmentPeriod: \"\",\n    loanPurpose: \"\",\n    estimatedMonthlyPayment: \"\",\n    dti: 33\n  });\n\n  const [loanCalcDataErrors, setLoanCalcDataErrors] = useState({\n    monthlySalary: null,\n    payDay: null,\n    loanAmount: null,\n    installmentPeriod: null,\n    loanPurpose: null\n  });\n\n  useEffect(() => {\n    setDaysOfMonth(fillUpDaysArray);\n  }, [])\n\n  const fillUpDaysArray = () => {\n    let daysArray = [];\n    for(let i=0; i < 31; i++) {\n      daysArray.push(i+1)\n    }\n    return daysArray;\n  }\n\n  const { monthlySalary, loanAmount, installmentPeriod, payDay, loanPurpose } = loanCalcData;\n\n  useEffect(() => {\n    if(monthlySalary && loanAmount && installmentPeriod) {\n      // console.log(typeof monthlySalary, typeof loanAmount, installmentPeriod);\n      const tenor = Number(installmentPeriod.split(' ')[0]);\n      let initRate = Number(loanAmount);\n      let toRepay = initRate + (initRate * 0.04);\n      toRepay = toRepay + (toRepay * 0.04 * tenor)\n      // for(let i=0; i < tenor; i++) {\n      //   toRepay = initRate + (initRate * 0.04);\n      //   initRate = toRepay;\n      // }\n      const monthlyRepay = toRepay / tenor;\n      const percentDti = (loanCalcData.dti / 100).toFixed(3);\n      console.log(percentDti);\n      if(monthlyRepay > (percentDti * Number(monthlySalary))) {\n        setLimitError('You are not eligible for this amount, kindly enter a lower loan amount');\n      } else {\n        setLimitError(null)\n      }\n      setLoanCalcData({ ...loanCalcData, estimatedMonthlyPayment: Math.floor(monthlyRepay) })\n    }\n  }, [monthlySalary, loanAmount, installmentPeriod, loanCalcData.dti])\n\n  const submitLoanCalcData = () => {\n    console.log('works');\n    const fieldsTovalidate = { monthlySalary, payDay, loanAmount, installmentPeriod, loanPurpose }\n    const validated = validateInput(fieldsTovalidate, setLoanCalcDataErrors);\n    if(validated) {\n      const applyData = {\n        monthlySalary,\n        payDay,\n        amount: loanAmount,\n        paymentPeriod: installmentPeriod,\n        loanPurpose,\n        monthlyRepayment: loanCalcData.estimatedMonthlyPayment,\n        DTI: loanCalcData.dti\n      }\n      console.log(applyData);\n      limitError ? toast.error(limitError) : delegateApply(applyData);\n    }\n  }\n\n  if(daysOfMonth.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={styles.calculatorForm}>\n      <ToastContainer position=\"top-center\" />\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            label=\"Monthly Salary\" \n            type=\"number\" \n            nameAttr=\"salary\"\n            value={loanCalcData.monthlySalary}\n            changed={(val) => {\n              setLoanCalcDataErrors({ ...loanCalcDataErrors, monthlySalary: null })\n              setLoanCalcData({ ...loanCalcData, monthlySalary: val })\n            }}\n            error={loanCalcDataErrors.monthlySalary && loanCalcDataErrors.monthlySalary}\n          />\n        </Col>\n        <Col>\n          <InputField \n            label=\"Pay Day\"\n            type=\"select\"\n            options={daysOfMonth}\n            nameAttr=\"payday\"\n            value={loanCalcData.payDay}\n            changed={(val) => {\n              setLoanCalcDataErrors({ ...loanCalcDataErrors, payDay: null })\n              setLoanCalcData({ ...loanCalcData, payDay: val })\n            }}\n            error={loanCalcDataErrors.payDay && loanCalcDataErrors.payDay}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            label=\"Loan Amount\" \n            type=\"number\" \n            nameAttr=\"loanAmt\"\n            value={loanCalcData.loanAmount}\n            changed={(val) => {\n              setLoanCalcDataErrors({ ...loanCalcDataErrors, loanAmount: null })\n              setLoanCalcData({ ...loanCalcData, loanAmount: val })\n            }}\n            error={loanCalcDataErrors.loanAmount && loanCalcDataErrors.loanAmount}\n          />\n          <p className={styles.inputHint}>\n            <span>min amt:</span> #100,000; <span>max amt:</span> #2,000,000\n          </p>\n        </Col>\n        <Col>\n          <InputField \n            label=\"Installment Period\"\n            type=\"select\"\n            options={['1 Month', '2 Months', '3 Months', '4 Months', '5 Months', '6 Months']}\n            nameAttr=\"installmentCycle\"\n            value={loanCalcData.installmentPeriod}\n            changed={(val) => {\n              setLoanCalcDataErrors({ ...loanCalcDataErrors, installmentPeriod: null })\n              setLoanCalcData({ ...loanCalcData, installmentPeriod: val })\n            }}\n            error={loanCalcDataErrors.installmentPeriod && loanCalcDataErrors.installmentPeriod}\n          />\n        </Col>\n      </Row>\n      {user?.role === \"sales\" && <Row className=\"mb-4\">\n        <Col>\n          <DtiRangeSlider \n            dtiVal={loanCalcData.dti} \n            setVal={(val) => setLoanCalcData({...loanCalcData, dti: val })} \n            />\n        </Col>\n      </Row>}\n      <Row className=\"mb-4\">\n        <Col>\n          <InputField \n            label=\"Loan Purpose\"\n            type=\"select\"\n            options={[\n              'Debt Consolidation',\n              'Home Remodelling',\n              'Moving Costs',\n              'Emergency Expenses',\n              'Medical Bills',\n              'Education',\n              'Appliance Purchase',\n              'Vehicle Financing',\n              'Vacation Costs',\n              'Wedding Expenses',\n              'Others'\n            ]}\n            nameAttr=\"loanPurpose\"\n            value={loanCalcData.loanPurpose}\n            changed={(val) => {\n              setLoanCalcDataErrors({ ...loanCalcDataErrors, loanPurpose: null })\n              setLoanCalcData({ ...loanCalcData, loanPurpose: val })\n            }}\n            error={loanCalcDataErrors.loanPurpose && loanCalcDataErrors.loanPurpose}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <InputField \n            type=\"text\"\n            label=\"Estimated Monthly Payment\"\n            nameAttr=\"monthlyPayment\"\n            value={loanCalcData.estimatedMonthlyPayment}\n            disable={true}\n            changed={(val) => {\n              setLoanCalcDataErrors({ ...loanCalcDataErrors, estimatedMonthlyPayment: null })\n              setLoanCalcData({ ...loanCalcData, estimatedMonthlyPayment: val })\n            }}\n            error={loanCalcDataErrors.estimatedMonthlyPayment && loanCalcDataErrors.estimatedMonthlyPayment}\n          />\n          <p className={styles.inputHint}>\n            <span>Eventual repayment amount may differ after risk assessment.</span>\n          </p>\n          { limitError && <p className={styles.limitError}>{limitError}</p> }\n        </Col>\n      </Row>\n      <Button \n        className=\"mt-5\" \n        fullWidth \n        clicked={submitLoanCalcData} \n        bgColor=\"#741763\" \n        size=\"lg\" \n        color=\"#EBEBEB\"\n        disabled={loading}\n        loading={loading}\n      >\n        Continue\n      </Button>\n    </div>\n  )\n}\n\n\nexport default LoanCalculatorForm;","/home/tga/Desktop/gypsy-capital/src/pages/pages.js",[],"/home/tga/Desktop/gypsy-capital/src/context/AuthContext.js",[],"/home/tga/Desktop/gypsy-capital/src/pages/ConsumerCredit/ConsumerCredit.jsx",["440","441"],"import React, { useContext, useEffect } from 'react';\nimport styles from './ConsumerCredit.module.scss';\nimport Dashboard from '../../components/Dashboard/Dashboard';\nimport Button from '../../components/Button/Button';\nimport { Table } from 'react-bootstrap';\nimport noLoan from '../../assets/no-loan.png';\nimport { Row, Col, Modal } from 'react-bootstrap';\nimport { FaCheckCircle } from 'react-icons/fa';\nimport LoanCalculatorForm from '../../components/LoanCalculatorForm/LoanCalculatorForm';\nimport LoanContactForm from '../../components/LoanContactForm/LoanContactForm';\nimport EmployerInfoForm from '../../components/EmployerInfoForm/EmployerInfoForm';\nimport BankInfoForm from '../../components/BankInfoForm/BankInfoForm';\nimport { Route, useRouteMatch, Switch, useLocation, useHistory } from 'react-router-dom';\nimport { Context as LoanContext } from '../../context/LoanContext';\nimport { Context as AuthContext } from '../../context/AuthContext';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { clientRoutes } from '../../routes/sidebarRoutes';\n\n\nconst ConsumerCredit = () => {\n\n  const { path } = useRouteMatch();\n  const location = useLocation();\n  const history = useHistory();\n\n  const applyStageArray = {\n    '/dashboard/consumer-credit/apply/calculator': 0,\n    '/dashboard/consumer-credit/apply/contact-info': 1,\n    '/dashboard/consumer-credit/apply/employer-info': 2,\n    '/dashboard/consumer-credit/apply/bank-info': 3\n  }\n\n\n  const { \n    state: { loans, error, currentLoanId, incomplete, loanApplicationStage }, \n    retrieveClientLoans,\n    clearError,\n    loanApply,\n    addAddressForLoan,\n    addWorkInfoForLoan,\n    addBankInfoForLoan,\n    clearCompleteState\n  } = useContext(LoanContext);\n  const { state: { user } } = useContext(AuthContext);\n\n  useEffect(() => {\n    retrieveClientLoans();\n  }, [])\n\n\n  useEffect(() => {\n    if(error) {\n      toast.error(error);\n      clearError();\n    }\n  }, [error])\n\n\n  const numberWithCommas = (x) => {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n\n  const calculateLoan = (data) => {\n    loanApply(data, user.user_id)\n  }\n\n  const updateAddress = (data) => {\n    addAddressForLoan(data, currentLoanId)\n  }\n\n  const updateEmployerInfo = (data) => {\n    addWorkInfoForLoan(data, currentLoanId)\n  }\n\n  const updateBankInfo = (data) => {\n    addBankInfoForLoan(data, currentLoanId)\n  }\n\n  const resumeApplication = () => {\n    clearCompleteState();\n    if(loanApplicationStage === 'calculated') {\n      history.push('/dashboard/consumer-credit/apply/contact-info')\n    }\n    if(loanApplicationStage === 'address_added') {\n      history.push('/dashboard/consumer-credit/apply/employer-info')\n    }\n    if(loanApplicationStage === 'employer_added') {\n      history.push('/dashboard/consumer-credit/apply/bank-info')\n    }\n  }\n\n  return (\n    <>\n      <Dashboard sidebarRoutes={clientRoutes} location={location}>\n        <ToastContainer position=\"top-center\" />\n        <div className={styles.heading}>\n          <div>\n            <h2>Consumer Credit</h2>\n            <p>Get a loan with ease</p>\n          </div>\n          { location.pathname === '/dashboard/consumer-credit/history' && <Button\n              bgColor=\"#741763\"\n              size=\"sm\"\n              color=\"#fff\"\n              className=\"mt-4\"\n              clicked={() => history.push('/dashboard/consumer-credit/apply/calculator')}\n            >\n              Apply for a loan\n            </Button>}\n        </div>\n        <Switch>\n          <Route path={`${path}/history`}>\n            <div className={styles.creditTable}>\n              <Table striped hover className={styles.tableStyles}>\n                <thead>\n                  <tr>\n                    <th>Loan ID</th>\n                    <th>Monthly Repayment</th>\n                    <th>Tenor</th>\n                    <th>Status</th>\n                    <th>Repayment Source</th>\n                    <th>Loan Amount</th>\n                    <th>Balance</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {loans.map((loanInstance, idx) => {\n                    return (\n                      <tr>\n                        <td>{loanInstance._id.substring(0, 5)}</td>\n                        <td>{`N ${numberWithCommas(loanInstance.monthlyRepayment)}`}</td>\n                        <td>{!loanInstance.approvedTenure ? loanInstance.paymentPeriod : loanInstance.approvedTenure}</td>\n                        <td>{loanInstance.status}</td>\n                        <td>Salary</td>\n                        <td>{`N ${numberWithCommas(loanInstance.amount)}`}</td>\n                        <td>______</td>\n                      </tr>\n                    )\n                  })}\n                </tbody>\n              </Table>\n              { (!loans || loans.length === 0) && <div className={styles.noLoanMessage}>\n                <p>Sorry you currently have no loan</p>\n                <img src={noLoan} alt=\"No loan history\" height=\"250\" />\n              </div>}\n            </div>\n          </Route>\n          <Route path={`${path}/apply`}>\n            <div className={styles.applyContainer}>\n              <Row>\n                <Col md={4}>\n                  <ul className={styles.joinedBullets}>\n                    <li className={styles.active}>\n                      Loan Calculator\n                    </li>\n                    <li \n                      className={applyStageArray[location.pathname] > 0 && styles.active}\n                    >\n                      Contact Address\n                    </li>\n                    <li\n                      className={applyStageArray[location.pathname] > 1 && styles.active}\n                    >\n                      Employment Information\n                    </li>\n                    <li\n                      className={applyStageArray[location.pathname] > 2 && styles.active}\n                    >\n                      Bank Details\n                    </li>\n                  </ul>\n                </Col>\n                <Col md={8}>\n                  <div className={styles.applyForm}>\n                    <Switch>\n                      <Route path={`${path}/apply/calculator`}>\n                        <LoanCalculatorForm delegateApply={calculateLoan} />\n                      </Route>\n                      <Route path={`${path}/apply/contact-info`}>\n                        <LoanContactForm submitContact={updateAddress} />\n                      </Route>\n                      <Route path={`${path}/apply/employer-info`}>\n                        <EmployerInfoForm submitEmployerInfo={updateEmployerInfo} />\n                      </Route>\n                      <Route path={`${path}/apply/bank-info`}>\n                        <BankInfoForm submitBankInfo={updateBankInfo} />\n                      </Route>\n                    </Switch>\n                  </div>\n                </Col>\n              </Row>\n            </div>\n          </Route>\n          <Route path={`${path}/success`}>\n            <div className={styles.applicationComplete}>\n              <FaCheckCircle size=\"4em\" color=\"#741763\" />\n              <h2>Congratulations!</h2>\n              <p>Your loan application has been submitted and is being processed</p>\n              <p>Look out for an email from us within the next 24 hours</p>\n            </div>\n          </Route>\n        </Switch>\n      </Dashboard>\n      <Modal \n        className={styles.continueModal} \n        size=\"sm\" \n        show={incomplete}\n        onHide={() => {\n          clearCompleteState();\n        }}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>\n            <h3>Continue Application</h3>\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>You have an incomplete loan request, please continue where you left off</p>\n          <Button\n            clicked={resumeApplication} \n            fullWidth\n            className=\"mt-4\" \n            bgColor=\"#741763\" \n            size=\"sm\" \n            color=\"#EBEBEB\"\n          >\n            Continue\n          </Button>\n        </Modal.Body>\n      </Modal>\n    </>\n  )\n}\n\n\nexport default ConsumerCredit;","/home/tga/Desktop/gypsy-capital/src/components/ProcessOffer/ProcessOffer.jsx",[],"/home/tga/Desktop/gypsy-capital/src/pages/AuthorizerClientDetails/AuthorizerClientDetails.jsx",["442"],"/home/tga/Desktop/gypsy-capital/src/utils/convertInputType.js",[],"/home/tga/Desktop/gypsy-capital/src/App.js",[],"/home/tga/Desktop/gypsy-capital/src/pages/CreditReport/CreditReport.jsx",["443","444","445"],"/home/tga/Desktop/gypsy-capital/src/pages/Products/Products.jsx",[],"/home/tga/Desktop/gypsy-capital/src/pages/ProcessorDashboard/ProcessorDashboard.jsx",["446"],"/home/tga/Desktop/gypsy-capital/src/hooks/useLoanDetails.js",["447","448","449","450"],"/home/tga/Desktop/gypsy-capital/src/components/FileUploadButton/FileUploadButton.js",[],"/home/tga/Desktop/gypsy-capital/src/utils/history.js",[],"/home/tga/Desktop/gypsy-capital/src/context/createDataContext.js",["451"],"/home/tga/Desktop/gypsy-capital/src/pages/AgentOverview/AgentOverview.jsx",["452"],"/home/tga/Desktop/gypsy-capital/src/pages/Support/Support.jsx",["453"],"/home/tga/Desktop/gypsy-capital/src/utils/nigeriaStates.js",[],"/home/tga/Desktop/gypsy-capital/src/components/Button/Button.jsx",[],"/home/tga/Desktop/gypsy-capital/src/components/BankInfoForm/BankInfoForm.jsx",["454","455","456"],"/home/tga/Desktop/gypsy-capital/src/components/LoanModal/LoanModal.jsx",["457","458"],"/home/tga/Desktop/gypsy-capital/src/components/ScrollToTopOnMount/ScrollToTopOnMount.jsx",[],"/home/tga/Desktop/gypsy-capital/src/components/PersonalForm/PersonalForm.jsx",["459","460","461","462"],{"ruleId":"463","replacedBy":"464"},{"ruleId":"465","replacedBy":"466"},{"ruleId":"463","replacedBy":"467"},{"ruleId":"465","replacedBy":"468"},{"ruleId":"463","replacedBy":"469"},{"ruleId":"465","replacedBy":"470"},{"ruleId":"463","replacedBy":"471"},{"ruleId":"465","replacedBy":"472"},{"ruleId":"473","severity":1,"message":"474","line":4,"column":1,"nodeType":"475","endLine":34,"endColumn":2},{"ruleId":"476","severity":1,"message":"477","line":47,"column":6,"nodeType":"478","endLine":47,"endColumn":13,"suggestions":"479"},{"ruleId":"480","severity":1,"message":"481","line":64,"column":33,"nodeType":"482","messageId":"483","endLine":64,"endColumn":34,"suggestions":"484"},{"ruleId":"480","severity":1,"message":"481","line":64,"column":58,"nodeType":"482","messageId":"483","endLine":64,"endColumn":59,"suggestions":"485"},{"ruleId":"486","severity":1,"message":"487","line":56,"column":15,"nodeType":"488","endLine":56,"endColumn":26},{"ruleId":"486","severity":1,"message":"487","line":59,"column":15,"nodeType":"488","endLine":59,"endColumn":26},{"ruleId":"486","severity":1,"message":"487","line":62,"column":15,"nodeType":"488","endLine":62,"endColumn":26},{"ruleId":"476","severity":1,"message":"489","line":43,"column":6,"nodeType":"478","endLine":43,"endColumn":16,"suggestions":"490"},{"ruleId":"476","severity":1,"message":"489","line":69,"column":6,"nodeType":"478","endLine":69,"endColumn":55,"suggestions":"491"},{"ruleId":"476","severity":1,"message":"492","line":23,"column":6,"nodeType":"478","endLine":23,"endColumn":8,"suggestions":"493"},{"ruleId":"494","severity":1,"message":"495","line":3,"column":8,"nodeType":"496","messageId":"497","endLine":3,"endColumn":14},{"ruleId":"476","severity":1,"message":"492","line":22,"column":6,"nodeType":"478","endLine":22,"endColumn":8,"suggestions":"498"},{"ruleId":"494","severity":1,"message":"499","line":30,"column":30,"nodeType":"496","messageId":"497","endLine":30,"endColumn":44},{"ruleId":"494","severity":1,"message":"500","line":34,"column":5,"nodeType":"496","messageId":"497","endLine":34,"endColumn":24},{"ruleId":"476","severity":1,"message":"501","line":43,"column":6,"nodeType":"478","endLine":43,"endColumn":13,"suggestions":"502"},{"ruleId":"476","severity":1,"message":"503","line":81,"column":6,"nodeType":"478","endLine":81,"endColumn":8,"suggestions":"504"},{"ruleId":"476","severity":1,"message":"505","line":96,"column":6,"nodeType":"478","endLine":96,"endColumn":16,"suggestions":"506"},{"ruleId":"476","severity":1,"message":"507","line":177,"column":8,"nodeType":"478","endLine":177,"endColumn":22,"suggestions":"508"},{"ruleId":"476","severity":1,"message":"509","line":398,"column":6,"nodeType":"478","endLine":398,"endColumn":16,"suggestions":"510"},{"ruleId":"476","severity":1,"message":"511","line":670,"column":6,"nodeType":"478","endLine":670,"endColumn":8,"suggestions":"512"},{"ruleId":"513","severity":1,"message":"514","line":44,"column":11,"nodeType":"488","endLine":44,"endColumn":45},{"ruleId":"476","severity":1,"message":"515","line":89,"column":6,"nodeType":"478","endLine":89,"endColumn":8,"suggestions":"516"},{"ruleId":"476","severity":1,"message":"511","line":35,"column":6,"nodeType":"478","endLine":35,"endColumn":8,"suggestions":"517"},{"ruleId":"494","severity":1,"message":"518","line":10,"column":9,"nodeType":"496","messageId":"497","endLine":10,"endColumn":17},{"ruleId":"486","severity":1,"message":"487","line":19,"column":11,"nodeType":"488","endLine":19,"endColumn":23},{"ruleId":"494","severity":1,"message":"519","line":39,"column":22,"nodeType":"496","messageId":"497","endLine":39,"endColumn":35},{"ruleId":"476","severity":1,"message":"520","line":38,"column":6,"nodeType":"478","endLine":38,"endColumn":8,"suggestions":"521"},{"ruleId":"522","severity":1,"message":"523","line":103,"column":29,"nodeType":"488","endLine":103,"endColumn":72},{"ruleId":"494","severity":1,"message":"524","line":13,"column":5,"nodeType":"496","messageId":"497","endLine":13,"endColumn":21},{"ruleId":"476","severity":1,"message":"525","line":33,"column":6,"nodeType":"478","endLine":33,"endColumn":8,"suggestions":"526"},{"ruleId":"476","severity":1,"message":"477","line":47,"column":6,"nodeType":"478","endLine":47,"endColumn":13,"suggestions":"527"},{"ruleId":"476","severity":1,"message":"528","line":103,"column":6,"nodeType":"478","endLine":103,"endColumn":8,"suggestions":"529"},{"ruleId":"476","severity":1,"message":"530","line":116,"column":6,"nodeType":"478","endLine":116,"endColumn":37,"suggestions":"531"},{"ruleId":"476","severity":1,"message":"503","line":500,"column":6,"nodeType":"478","endLine":500,"endColumn":8,"suggestions":"532"},{"ruleId":"476","severity":1,"message":"533","line":515,"column":6,"nodeType":"478","endLine":515,"endColumn":49,"suggestions":"534"},{"ruleId":"476","severity":1,"message":"535","line":523,"column":6,"nodeType":"478","endLine":523,"endColumn":23,"suggestions":"536"},{"ruleId":"476","severity":1,"message":"537","line":713,"column":6,"nodeType":"478","endLine":713,"endColumn":8,"suggestions":"538"},{"ruleId":"476","severity":1,"message":"477","line":28,"column":6,"nodeType":"478","endLine":28,"endColumn":13,"suggestions":"539"},{"ruleId":"476","severity":1,"message":"477","line":29,"column":6,"nodeType":"478","endLine":29,"endColumn":13,"suggestions":"540"},{"ruleId":"476","severity":1,"message":"520","line":49,"column":6,"nodeType":"478","endLine":49,"endColumn":8,"suggestions":"541"},{"ruleId":"476","severity":1,"message":"542","line":68,"column":6,"nodeType":"478","endLine":68,"endColumn":19,"suggestions":"543"},{"ruleId":"476","severity":1,"message":"477","line":75,"column":6,"nodeType":"478","endLine":75,"endColumn":13,"suggestions":"544"},{"ruleId":"476","severity":1,"message":"530","line":54,"column":6,"nodeType":"478","endLine":54,"endColumn":12,"suggestions":"545"},{"ruleId":"476","severity":1,"message":"546","line":184,"column":6,"nodeType":"478","endLine":184,"endColumn":12,"suggestions":"547"},{"ruleId":"476","severity":1,"message":"548","line":273,"column":6,"nodeType":"478","endLine":273,"endColumn":12,"suggestions":"549"},{"ruleId":"476","severity":1,"message":"550","line":285,"column":6,"nodeType":"478","endLine":285,"endColumn":17,"suggestions":"551"},{"ruleId":"476","severity":1,"message":"552","line":417,"column":6,"nodeType":"478","endLine":417,"endColumn":17,"suggestions":"553"},{"ruleId":"476","severity":1,"message":"492","line":534,"column":6,"nodeType":"478","endLine":534,"endColumn":8,"suggestions":"554"},{"ruleId":"476","severity":1,"message":"555","line":647,"column":6,"nodeType":"478","endLine":647,"endColumn":8,"suggestions":"556"},{"ruleId":"476","severity":1,"message":"557","line":47,"column":6,"nodeType":"478","endLine":47,"endColumn":12,"suggestions":"558"},{"ruleId":"494","severity":1,"message":"559","line":204,"column":20,"nodeType":"496","messageId":"497","endLine":204,"endColumn":27},{"ruleId":"476","severity":1,"message":"560","line":208,"column":6,"nodeType":"478","endLine":208,"endColumn":8,"suggestions":"561"},{"ruleId":"476","severity":1,"message":"511","line":302,"column":6,"nodeType":"478","endLine":302,"endColumn":8,"suggestions":"562"},{"ruleId":"476","severity":1,"message":"477","line":20,"column":6,"nodeType":"478","endLine":20,"endColumn":13,"suggestions":"563"},{"ruleId":"494","severity":1,"message":"495","line":6,"column":8,"nodeType":"496","messageId":"497","endLine":6,"endColumn":14},{"ruleId":"476","severity":1,"message":"492","line":22,"column":6,"nodeType":"478","endLine":22,"endColumn":8,"suggestions":"564"},{"ruleId":"494","severity":1,"message":"565","line":8,"column":10,"nodeType":"496","messageId":"497","endLine":8,"endColumn":21},{"ruleId":"473","severity":1,"message":"474","line":7,"column":1,"nodeType":"475","endLine":29,"endColumn":2},{"ruleId":"522","severity":1,"message":"523","line":66,"column":21,"nodeType":"488","endLine":66,"endColumn":74},{"ruleId":"494","severity":1,"message":"566","line":4,"column":8,"nodeType":"496","messageId":"497","endLine":4,"endColumn":15},{"ruleId":"494","severity":1,"message":"567","line":98,"column":7,"nodeType":"496","messageId":"497","endLine":98,"endColumn":35},{"ruleId":"494","severity":1,"message":"568","line":101,"column":11,"nodeType":"496","messageId":"497","endLine":101,"endColumn":16},{"ruleId":"494","severity":1,"message":"569","line":102,"column":11,"nodeType":"496","messageId":"497","endLine":102,"endColumn":19},{"ruleId":"494","severity":1,"message":"570","line":18,"column":11,"nodeType":"496","messageId":"497","endLine":18,"endColumn":15},{"ruleId":"476","severity":1,"message":"492","line":28,"column":6,"nodeType":"478","endLine":28,"endColumn":8,"suggestions":"571"},{"ruleId":"572","severity":1,"message":"573","line":33,"column":11,"nodeType":"488","endLine":40,"endColumn":12},{"ruleId":"476","severity":1,"message":"477","line":35,"column":6,"nodeType":"478","endLine":35,"endColumn":13,"suggestions":"574"},{"ruleId":"476","severity":1,"message":"575","line":39,"column":6,"nodeType":"478","endLine":39,"endColumn":8,"suggestions":"576"},{"ruleId":"480","severity":1,"message":"481","line":3,"column":31,"nodeType":"482","messageId":"483","endLine":3,"endColumn":32,"suggestions":"577"},{"ruleId":"480","severity":1,"message":"481","line":3,"column":56,"nodeType":"482","messageId":"483","endLine":3,"endColumn":57,"suggestions":"578"},{"ruleId":"476","severity":1,"message":"579","line":52,"column":6,"nodeType":"478","endLine":52,"endColumn":8,"suggestions":"580"},{"ruleId":"473","severity":1,"message":"474","line":5,"column":1,"nodeType":"475","endLine":56,"endColumn":2},{"ruleId":"476","severity":1,"message":"581","line":42,"column":6,"nodeType":"478","endLine":42,"endColumn":8,"suggestions":"582"},{"ruleId":"494","severity":1,"message":"583","line":77,"column":9,"nodeType":"496","messageId":"497","endLine":77,"endColumn":19},{"ruleId":"476","severity":1,"message":"477","line":375,"column":6,"nodeType":"478","endLine":375,"endColumn":13,"suggestions":"584"},{"ruleId":"476","severity":1,"message":"585","line":387,"column":6,"nodeType":"478","endLine":387,"endColumn":17,"suggestions":"586"},{"ruleId":"494","severity":1,"message":"587","line":36,"column":31,"nodeType":"496","messageId":"497","endLine":36,"endColumn":40},{"ruleId":"476","severity":1,"message":"588","line":95,"column":6,"nodeType":"478","endLine":95,"endColumn":70,"suggestions":"589"},{"ruleId":"476","severity":1,"message":"492","line":48,"column":6,"nodeType":"478","endLine":48,"endColumn":8,"suggestions":"590"},{"ruleId":"476","severity":1,"message":"501","line":56,"column":6,"nodeType":"478","endLine":56,"endColumn":13,"suggestions":"591"},{"ruleId":"476","severity":1,"message":"515","line":36,"column":6,"nodeType":"478","endLine":36,"endColumn":8,"suggestions":"592"},{"ruleId":"494","severity":1,"message":"495","line":2,"column":8,"nodeType":"496","messageId":"497","endLine":2,"endColumn":14},{"ruleId":"494","severity":1,"message":"593","line":5,"column":25,"nodeType":"496","messageId":"497","endLine":5,"endColumn":29},{"ruleId":"494","severity":1,"message":"594","line":10,"column":11,"nodeType":"496","messageId":"497","endLine":10,"endColumn":14},{"ruleId":"476","severity":1,"message":"575","line":39,"column":6,"nodeType":"478","endLine":39,"endColumn":8,"suggestions":"595"},{"ruleId":"473","severity":1,"message":"474","line":4,"column":1,"nodeType":"475","endLine":28,"endColumn":2},{"ruleId":"476","severity":1,"message":"492","line":11,"column":7,"nodeType":"478","endLine":11,"endColumn":9,"suggestions":"596"},{"ruleId":"476","severity":1,"message":"597","line":15,"column":6,"nodeType":"478","endLine":15,"endColumn":13,"suggestions":"598"},{"ruleId":"476","severity":1,"message":"599","line":19,"column":6,"nodeType":"478","endLine":19,"endColumn":17,"suggestions":"600"},{"ruleId":"473","severity":1,"message":"474","line":4,"column":1,"nodeType":"475","endLine":22,"endColumn":2},{"ruleId":"476","severity":1,"message":"575","line":36,"column":6,"nodeType":"478","endLine":36,"endColumn":8,"suggestions":"601"},{"ruleId":"494","severity":1,"message":"495","line":5,"column":8,"nodeType":"496","messageId":"497","endLine":5,"endColumn":14},{"ruleId":"476","severity":1,"message":"503","line":42,"column":6,"nodeType":"478","endLine":42,"endColumn":8,"suggestions":"602"},{"ruleId":"476","severity":1,"message":"533","line":80,"column":6,"nodeType":"478","endLine":80,"endColumn":49,"suggestions":"603"},{"ruleId":"476","severity":1,"message":"535","line":87,"column":6,"nodeType":"478","endLine":87,"endColumn":23,"suggestions":"604"},{"ruleId":"476","severity":1,"message":"537","line":121,"column":6,"nodeType":"478","endLine":121,"endColumn":8,"suggestions":"605"},{"ruleId":"476","severity":1,"message":"477","line":174,"column":6,"nodeType":"478","endLine":174,"endColumn":13,"suggestions":"606"},{"ruleId":"476","severity":1,"message":"607","line":32,"column":6,"nodeType":"478","endLine":32,"endColumn":8,"suggestions":"608"},{"ruleId":"476","severity":1,"message":"533","line":103,"column":6,"nodeType":"478","endLine":103,"endColumn":49,"suggestions":"609"},{"ruleId":"476","severity":1,"message":"535","line":111,"column":6,"nodeType":"478","endLine":111,"endColumn":23,"suggestions":"610"},{"ruleId":"476","severity":1,"message":"530","line":136,"column":6,"nodeType":"478","endLine":136,"endColumn":25,"suggestions":"611"},"no-native-reassign",["612"],"no-negated-in-lhs",["613"],["612"],["613"],["612"],["613"],["612"],["613"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'clearErrors'. Either include it or remove the dependency array.","ArrayExpression",["614"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["615","616"],["617","618"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has a missing dependency: 'loanData'. Either include it or remove the dependency array. You can also do a functional update 'setLoanData(l => ...)' if you only need 'loanData' in the 'setLoanData' call.",["619"],["620"],"React Hook useEffect has a missing dependency: 'retrieveClientLoans'. Either include it or remove the dependency array.",["621"],"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar",["622"],"'approvedStatus' is assigned a value but never used.","'resetApprovalStatus' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'clearError'. Either include it or remove the dependency array.",["623"],"React Hook useEffect has a missing dependency: 'getBankList'. Either include it or remove the dependency array.",["624"],"React Hook useEffect has a missing dependency: 'approvalData'. Either include it or remove the dependency array. You can also do a functional update 'setApprovalData(a => ...)' if you only need 'approvalData' in the 'setApprovalData' call.",["625"],"React Hook useEffect has a missing dependency: 'clientBank'. Either include it or remove the dependency array. Outer scope values like 'disburseBank' aren't valid dependencies because mutating them doesn't re-render the component.",["626"],"React Hook useEffect has a missing dependency: 'repayData'. Either include it or remove the dependency array. You can also do a functional update 'setRepayData(r => ...)' if you only need 'repayData' in the 'setRepayData' call.",["627"],"React Hook useEffect has missing dependencies: 'loanId' and 'retrieveLoan'. Either include them or remove the dependency array.",["628"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'clientId' and 'getClientDetails'. Either include them or remove the dependency array.",["629"],["630"],"'location' is assigned a value but never used.","'setLgaLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getClientDetails' and 'user.user_id'. Either include them or remove the dependency array.",["631"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'resetLinkSuccess' is assigned a value but never used.","React Hook React.useMemo has missing dependencies: 'authenticateUser' and 'user.user_id'. Either include them or remove the dependency array.",["632"],["633"],"React Hook useEffect has missing dependencies: 'currentAddedUser' and 'getClientDetails'. Either include them or remove the dependency array.",["634"],"React Hook useEffect has a missing dependency: 'biodata'. Either include it or remove the dependency array. You can also do a functional update 'setBiodata(b => ...)' if you only need 'biodata' in the 'setBiodata' call.",["635"],["636"],"React Hook useEffect has missing dependencies: 'bankList' and 'verifyBankInfo'. Either include them or remove the dependency array.",["637"],"React Hook useEffect has a missing dependency: 'bankInfo'. Either include it or remove the dependency array. You can also do a functional update 'setBankInfo(b => ...)' if you only need 'bankInfo' in the 'setBankInfo' call.",["638"],"React Hook useEffect has a missing dependency: 'close'. Either include it or remove the dependency array. If 'close' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["639"],["640"],["641"],["642"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["643"],["644"],["645"],"React Hook useEffect has a missing dependency: 'nextOfKin'. Either include it or remove the dependency array. You can also do a functional update 'setNextOfKin(n => ...)' if you only need 'nextOfKin' in the 'setNextOfKin' call.",["646"],"React Hook useEffect has a missing dependency: 'disburseBank'. Either include it or remove the dependency array. You can also do a functional update 'setDisburseBank(d => ...)' if you only need 'disburseBank' in the 'setDisburseBank' call.",["647"],"React Hook useEffect has a missing dependency: 'salaryBank'. Either include it or remove the dependency array. You can also do a functional update 'setSalaryBank(s => ...)' if you only need 'salaryBank' in the 'setSalaryBank' call.",["648"],"React Hook useEffect has missing dependencies: 'OfficeAddress' and 'employerInfo'. Either include them or remove the dependency array. You can also do a functional update 'setEmployerInfo(e => ...)' if you only need 'employerInfo' in the 'setEmployerInfo' call.",["649"],["650"],"React Hook useEffect has missing dependencies: 'clearErrors', 'clientId', and 'getClientDetails'. Either include them or remove the dependency array.",["651"],"React Hook useEffect has a missing dependency: 'basicInfo'. Either include it or remove the dependency array. You can also do a functional update 'setBasicInfo(b => ...)' if you only need 'basicInfo' in the 'setBasicInfo' call.",["652"],"'loading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loanId' and 'verifyRepaymentStatus'. Either include them or remove the dependency array.",["653"],["654"],["655"],["656"],"'RiUser3Fill' is defined but never used.","'history' is defined but never used.","'getAccountTransactionHistory' is assigned a value but never used.","'token' is assigned a value but never used.","'response' is assigned a value but never used.","'path' is assigned a value but never used.",["657"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.",["658"],"React Hook useEffect has missing dependencies: 'getClientListForRole' and 'retrieveClientLoans'. Either include them or remove the dependency array.",["659"],["660","661"],["662","663"],"React Hook useEffect has missing dependencies: 'loanData?.approvedAmount', 'loanData?.client?.firstName', 'loanData?.client?.lastName', 'loanData?.employment?.sector', 'loanData?.loanPurpose', 'loanData?.monthlyRepayment', 'loanData?.residence?.street', and 'offerFormData'. Either include them or remove the dependency array. You can also do a functional update 'setOfferFormData(o => ...)' if you only need 'offerFormData' in the 'setOfferFormData' call.",["664"],"React Hook useEffect has a missing dependency: 'returnNumber'. Either include it or remove the dependency array. If 'setFaqs' needs the current value of 'returnNumber', you can also switch to useReducer instead of useState and read 'returnNumber' in the reducer.",["665"],"'emptyState' is assigned a value but never used.",["666"],"React Hook useEffect has a missing dependency: 'clearErr'. Either include it or remove the dependency array.",["667"],"'loanApply' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loanCalcData'. Either include it or remove the dependency array. You can also do a functional update 'setLoanCalcData(l => ...)' if you only need 'loanCalcData' in the 'setLoanCalcData' call.",["668"],["669"],["670"],["671"],"'Link' is defined but never used.","'url' is assigned a value but never used.",["672"],["673"],"React Hook useMemo has a missing dependency: 'clientId'. Either include it or remove the dependency array.",["674"],"React Hook useEffect has a missing dependency: 'retrieveLoan'. Either include it or remove the dependency array.",["675"],["676"],["677"],["678"],["679"],["680"],["681"],"React Hook useEffect has missing dependencies: 'getBankList', 'getClientDetails', and 'user.user_id'. Either include them or remove the dependency array.",["682"],["683"],["684"],["685"],"no-global-assign","no-unsafe-negation",{"desc":"686","fix":"687"},{"messageId":"688","fix":"689","desc":"690"},{"messageId":"691","fix":"692","desc":"693"},{"messageId":"688","fix":"694","desc":"690"},{"messageId":"691","fix":"695","desc":"693"},{"desc":"696","fix":"697"},{"desc":"698","fix":"699"},{"desc":"700","fix":"701"},{"desc":"700","fix":"702"},{"desc":"703","fix":"704"},{"desc":"705","fix":"706"},{"desc":"707","fix":"708"},{"desc":"709","fix":"710"},{"desc":"711","fix":"712"},{"desc":"713","fix":"714"},{"desc":"715","fix":"716"},{"desc":"713","fix":"717"},{"desc":"718","fix":"719"},{"desc":"720","fix":"721"},{"desc":"686","fix":"722"},{"desc":"723","fix":"724"},{"desc":"725","fix":"726"},{"desc":"705","fix":"727"},{"desc":"728","fix":"729"},{"desc":"730","fix":"731"},{"desc":"732","fix":"733"},{"desc":"686","fix":"734"},{"desc":"686","fix":"735"},{"desc":"718","fix":"736"},{"desc":"737","fix":"738"},{"desc":"686","fix":"739"},{"desc":"740","fix":"741"},{"desc":"742","fix":"743"},{"desc":"744","fix":"745"},{"desc":"746","fix":"747"},{"desc":"748","fix":"749"},{"desc":"700","fix":"750"},{"desc":"751","fix":"752"},{"desc":"753","fix":"754"},{"desc":"755","fix":"756"},{"desc":"713","fix":"757"},{"desc":"686","fix":"758"},{"desc":"700","fix":"759"},{"desc":"700","fix":"760"},{"desc":"686","fix":"761"},{"desc":"762","fix":"763"},{"messageId":"688","fix":"764","desc":"690"},{"messageId":"691","fix":"765","desc":"693"},{"messageId":"688","fix":"766","desc":"690"},{"messageId":"691","fix":"767","desc":"693"},{"desc":"768","fix":"769"},{"desc":"770","fix":"771"},{"desc":"686","fix":"772"},{"desc":"773","fix":"774"},{"desc":"775","fix":"776"},{"desc":"700","fix":"777"},{"desc":"703","fix":"778"},{"desc":"715","fix":"779"},{"desc":"762","fix":"780"},{"desc":"700","fix":"781"},{"desc":"782","fix":"783"},{"desc":"784","fix":"785"},{"desc":"762","fix":"786"},{"desc":"705","fix":"787"},{"desc":"728","fix":"788"},{"desc":"730","fix":"789"},{"desc":"732","fix":"790"},{"desc":"686","fix":"791"},{"desc":"792","fix":"793"},{"desc":"728","fix":"794"},{"desc":"730","fix":"795"},{"desc":"796","fix":"797"},"Update the dependencies array to be: [clearErrors, error]",{"range":"798","text":"799"},"removeEscape",{"range":"800","text":"801"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"802","text":"803"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"804","text":"801"},{"range":"805","text":"803"},"Update the dependencies array to be: [loanData, location]",{"range":"806","text":"807"},"Update the dependencies array to be: [proposedAmount, proposedDuration, monthlyIncome, loanData]",{"range":"808","text":"809"},"Update the dependencies array to be: [retrieveClientLoans]",{"range":"810","text":"811"},{"range":"812","text":"811"},"Update the dependencies array to be: [clearError, error]",{"range":"813","text":"814"},"Update the dependencies array to be: [getBankList]",{"range":"815","text":"816"},"Update the dependencies array to be: [approvalData, loanData]",{"range":"817","text":"818"},"Update the dependencies array to be: [clientBank]",{"range":"819","text":"820"},"Update the dependencies array to be: [loanData, repayData]",{"range":"821","text":"822"},"Update the dependencies array to be: [loanId, retrieveLoan]",{"range":"823","text":"824"},"Update the dependencies array to be: [clientId, getClientDetails]",{"range":"825","text":"826"},{"range":"827","text":"824"},"Update the dependencies array to be: [getClientDetails, user.user_id]",{"range":"828","text":"829"},"Update the dependencies array to be: [authenticateUser, user.user_id]",{"range":"830","text":"831"},{"range":"832","text":"799"},"Update the dependencies array to be: [currentAddedUser, getClientDetails]",{"range":"833","text":"834"},"Update the dependencies array to be: [biodata, currentAddedUser, userDetails]",{"range":"835","text":"836"},{"range":"837","text":"816"},"Update the dependencies array to be: [bankInfo.accountNumber, bankInfo.bankName, bankList, verifyBankInfo]",{"range":"838","text":"839"},"Update the dependencies array to be: [bankInfo, userBankDetails]",{"range":"840","text":"841"},"Update the dependencies array to be: [close]",{"range":"842","text":"843"},{"range":"844","text":"799"},{"range":"845","text":"799"},{"range":"846","text":"829"},"Update the dependencies array to be: [history, userDetails]",{"range":"847","text":"848"},{"range":"849","text":"799"},"Update the dependencies array to be: [biodata, data]",{"range":"850","text":"851"},"Update the dependencies array to be: [data, nextOfKin]",{"range":"852","text":"853"},"Update the dependencies array to be: [data, disburseBank]",{"range":"854","text":"855"},"Update the dependencies array to be: [loanDeets, salaryBank]",{"range":"856","text":"857"},"Update the dependencies array to be: [OfficeAddress, employerInfo, loanDeets]",{"range":"858","text":"859"},{"range":"860","text":"811"},"Update the dependencies array to be: [clearErrors, clientId, getClientDetails]",{"range":"861","text":"862"},"Update the dependencies array to be: [basicInfo, data]",{"range":"863","text":"864"},"Update the dependencies array to be: [loanId, verifyRepaymentStatus]",{"range":"865","text":"866"},{"range":"867","text":"824"},{"range":"868","text":"799"},{"range":"869","text":"811"},{"range":"870","text":"811"},{"range":"871","text":"799"},"Update the dependencies array to be: [getClientListForRole, retrieveClientLoans]",{"range":"872","text":"873"},{"range":"874","text":"801"},{"range":"875","text":"803"},{"range":"876","text":"801"},{"range":"877","text":"803"},"Update the dependencies array to be: [loanData?.approvedAmount, loanData?.client?.firstName, loanData?.client?.lastName, loanData?.employment?.sector, loanData?.loanPurpose, loanData?.monthlyRepayment, loanData?.residence?.street, offerFormData]",{"range":"878","text":"879"},"Update the dependencies array to be: [returnNumber]",{"range":"880","text":"881"},{"range":"882","text":"799"},"Update the dependencies array to be: [clearErr, userError]",{"range":"883","text":"884"},"Update the dependencies array to be: [monthlySalary, loanAmount, installmentPeriod, loanCalcData.dti, loanCalcData]",{"range":"885","text":"886"},{"range":"887","text":"811"},{"range":"888","text":"814"},{"range":"889","text":"826"},{"range":"890","text":"873"},{"range":"891","text":"811"},"Update the dependencies array to be: [clientId, loans]",{"range":"892","text":"893"},"Update the dependencies array to be: [retrieveLoan, userLoans]",{"range":"894","text":"895"},{"range":"896","text":"873"},{"range":"897","text":"816"},{"range":"898","text":"839"},{"range":"899","text":"841"},{"range":"900","text":"843"},{"range":"901","text":"799"},"Update the dependencies array to be: [getBankList, getClientDetails, user.user_id]",{"range":"902","text":"903"},{"range":"904","text":"839"},{"range":"905","text":"841"},"Update the dependencies array to be: [biodata, user, userDetails]",{"range":"906","text":"907"},[1192,1199],"[clearErrors, error]",[1464,1465],"",[1464,1464],"\\",[1489,1490],[1489,1489],[1402,1412],"[loanData, location]",[2253,2302],"[proposedAmount, proposedDuration, monthlyIncome, loanData]",[904,906],"[retrieveClientLoans]",[812,814],[1703,1710],"[clearError, error]",[2471,2473],"[getBankList]",[2946,2956],"[approvalData, loanData]",[5748,5762],"[clientBank]",[12364,12374],"[loanData, repayData]",[19713,19715],"[loanId, retrieveLoan]",[2829,2831],"[clientId, getClientDetails]",[1179,1181],[1193,1195],"[getClientDetails, user.user_id]",[1060,1062],"[authenticateUser, user.user_id]",[1332,1339],[2818,2820],"[currentAddedUser, getClientDetails]",[3184,3215],"[biodata, currentAddedUser, userDetails]",[14599,14601],[15039,15082],"[bankInfo.accountNumber, bankInfo.bankName, bankList, verifyBankInfo]",[15255,15272],"[bankInfo, userBankDetails]",[21241,21243],"[close]",[882,889],[868,875],[1704,1706],[2253,2266],"[history, userDetails]",[2363,2370],[1984,1990],"[biodata, data]",[4959,4965],"[data, nextOfKin]",[6937,6943],"[data, disburseBank]",[7287,7298],"[loanDeets, salaryBank]",[10781,10792],"[OfficeAddress, employerInfo, loanDeets]",[13630,13632],[17010,17012],"[clearErrors, clientId, getClientDetails]",[1696,1702],"[basicInfo, data]",[5923,5925],"[loanId, verifyRepaymentStatus]",[8621,8623],[664,671],[819,821],[1105,1107],[1036,1043],[1813,1815],"[getClientListForRole, retrieveClientLoans]",[92,93],[92,92],[117,118],[117,117],[1773,1775],"[loanData?.approvedAmount, loanData?.client?.firstName, loanData?.client?.lastName, loanData?.employment?.sector, loanData?.loanPurpose, loanData?.monthlyRepayment, loanData?.residence?.street, offerFormData]",[1194,1196],"[returnNumber]",[10218,10225],[10372,10383],"[clearErr, userError]",[2869,2933],"[monthlySalary, loanAmount, installmentPeriod, loanCalcData.dti, loanCalcData]",[1840,1842],[1939,1946],[1155,1157],[1811,1813],[375,377],[493,500],"[clientId, loans]",[564,575],"[retrieveLoan, userLoans]",[1596,1598],[1268,1270],[2545,2588],[2760,2777],[3009,3011],[4188,4195],[1094,1096],"[getBankList, getClientDetails, user.user_id]",[2707,2750],[2923,2940],[3787,3806],"[biodata, user, userDetails]"]